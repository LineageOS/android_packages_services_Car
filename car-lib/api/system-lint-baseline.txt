// Baseline format: 1.0
AcronymName: android.car.app.CarActivityManager#isCarSystemUIProxyRegistered():
    Acronyms should not be capitalized in method names: was `isCarSystemUIProxyRegistered`, should this be `isCarSystemUiProxyRegistered`?
AcronymName: android.car.app.CarActivityManager#registerCarSystemUIProxy(android.car.app.CarSystemUIProxy):
    Acronyms should not be capitalized in method names: was `registerCarSystemUIProxy`, should this be `registerCarSystemUiProxy`?
AcronymName: android.car.app.CarSystemUIProxy:
    Acronyms should not be capitalized in class names: was `CarSystemUIProxy`, should this be `CarSystemUiProxy`?


AllUpper: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#EGR:
    Constant EGR must be marked static final


ArrayReturn: android.car.content.pm.AppBlockingPackageInfo#AppBlockingPackageInfo(String, int, int, int, android.content.pm.Signature[], String[]) parameter #4:
    Method parameter should be Collection<Signature> (or subclass) instead of raw array; was `android.content.pm.Signature[]`
ArrayReturn: android.car.content.pm.AppBlockingPackageInfo#signatures:
    Field should be Collection<Signature> (or subclass) instead of raw array; was `android.content.pm.Signature[]`
ArrayReturn: android.car.content.pm.CarAppBlockingPolicy#CarAppBlockingPolicy(android.car.content.pm.AppBlockingPackageInfo[], android.car.content.pm.AppBlockingPackageInfo[]) parameter #0:
    Method parameter should be Collection<AppBlockingPackageInfo> (or subclass) instead of raw array; was `android.car.content.pm.AppBlockingPackageInfo[]`
ArrayReturn: android.car.content.pm.CarAppBlockingPolicy#CarAppBlockingPolicy(android.car.content.pm.AppBlockingPackageInfo[], android.car.content.pm.AppBlockingPackageInfo[]) parameter #1:
    Method parameter should be Collection<AppBlockingPackageInfo> (or subclass) instead of raw array; was `android.car.content.pm.AppBlockingPackageInfo[]`
ArrayReturn: android.car.content.pm.CarAppBlockingPolicy#blacklists:
    Field should be Collection<AppBlockingPackageInfo> (or subclass) instead of raw array; was `android.car.content.pm.AppBlockingPackageInfo[]`
ArrayReturn: android.car.content.pm.CarAppBlockingPolicy#whitelists:
    Field should be Collection<AppBlockingPackageInfo> (or subclass) instead of raw array; was `android.car.content.pm.AppBlockingPackageInfo[]`


AutoBoxing: android.car.diagnostic.CarDiagnosticEvent#getFuelSystemStatus():
    Must avoid boxed primitives (`java.lang.Integer`)
AutoBoxing: android.car.diagnostic.CarDiagnosticEvent#getFuelType():
    Must avoid boxed primitives (`java.lang.Integer`)
AutoBoxing: android.car.diagnostic.CarDiagnosticEvent#getSecondaryAirStatus():
    Must avoid boxed primitives (`java.lang.Integer`)
AutoBoxing: android.car.diagnostic.CarDiagnosticEvent#getSystemFloatSensor(int):
    Must avoid boxed primitives (`java.lang.Float`)
AutoBoxing: android.car.diagnostic.CarDiagnosticEvent#getSystemIntegerSensor(int):
    Must avoid boxed primitives (`java.lang.Integer`)
AutoBoxing: android.car.diagnostic.CarDiagnosticEvent#getVendorFloatSensor(int):
    Must avoid boxed primitives (`java.lang.Float`)
AutoBoxing: android.car.diagnostic.CarDiagnosticEvent#getVendorIntegerSensor(int):
    Must avoid boxed primitives (`java.lang.Integer`)
AutoBoxing: android.car.user.UserCreationResult#getAndroidFailureStatus():
    Must avoid boxed primitives (`java.lang.Integer`)
AutoBoxing: android.car.user.UserSwitchResult#getAndroidFailureStatus():
    Must avoid boxed primitives (`java.lang.Integer`)


BannedThrow: android.car.occupantconnection.CarOccupantConnectionManager#sendPayload(android.car.CarOccupantZoneManager.OccupantZoneInfo, android.car.occupantconnection.Payload):
    Methods must not throw unchecked exceptions


BuilderSetStyle: android.car.diagnostic.CarDiagnosticEvent.Builder#newFreezeFrameBuilder():
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method android.car.diagnostic.CarDiagnosticEvent.Builder.newFreezeFrameBuilder()
BuilderSetStyle: android.car.diagnostic.CarDiagnosticEvent.Builder#newLiveFrameBuilder():
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method android.car.diagnostic.CarDiagnosticEvent.Builder.newLiveFrameBuilder()
BuilderSetStyle: android.car.user.UserStopRequest.Builder#withDelayedLocking(boolean):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method android.car.user.UserStopRequest.Builder.withDelayedLocking(boolean)


CallbackInterface: android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback:
    Callbacks must be abstract class instead of interface to enable extension in future API levels: CarVendorExtensionCallback
CallbackInterface: android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback:
    Callbacks must be abstract class instead of interface to enable extension in future API levels: CarCabinEventCallback
CallbackInterface: android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback:
    Callbacks must be abstract class instead of interface to enable extension in future API levels: CarHvacEventCallback
CallbackInterface: android.car.trust.CarTrustAgentEnrollmentManager.CarTrustAgentBleCallback:
    Callbacks must be abstract class instead of interface to enable extension in future API levels: CarTrustAgentBleCallback
CallbackInterface: android.car.trust.CarTrustAgentEnrollmentManager.CarTrustAgentEnrollmentCallback:
    Callbacks must be abstract class instead of interface to enable extension in future API levels: CarTrustAgentEnrollmentCallback
CallbackInterface: android.car.vms.VmsClientManager.VmsClientCallback:
    Callbacks must be abstract class instead of interface to enable extension in future API levels: VmsClientCallback
CallbackInterface: android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback:
    Callbacks must be abstract class instead of interface to enable extension in future API levels: VmsSubscriberClientCallback


ConcreteCollection: android.car.hardware.CarPropertyConfig.Builder#setConfigArray(java.util.ArrayList<java.lang.Integer>) parameter #0:
    Parameter type is concrete collection (`java.util.ArrayList`); must be higher-level interface


EqualsAndHashCode: android.car.storagemonitoring.LifetimeWriteInfo#equals(Object):
    Must override both equals and hashCode; missing one in android.car.storagemonitoring.LifetimeWriteInfo
EqualsAndHashCode: android.car.vms.VmsAvailableLayers#equals(Object):
    Must override both equals and hashCode; missing one in android.car.vms.VmsAvailableLayers


ExecutorRegistration: android.car.CarBugreportManager#requestBugreport(android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, android.car.CarBugreportManager.CarBugreportManagerCallback):
    Registration methods should have overload that accepts delivery Executor: `requestBugreport`
ExecutorRegistration: android.car.CarProjectionManager#registerProjectionListener(android.car.CarProjectionManager.CarProjectionListener, int):
    Registration methods should have overload that accepts delivery Executor: `registerProjectionListener`
ExecutorRegistration: android.car.CarProjectionManager#registerProjectionStatusListener(android.car.CarProjectionManager.ProjectionStatusListener):
    Registration methods should have overload that accepts delivery Executor: `registerProjectionStatusListener`
ExecutorRegistration: android.car.CarProjectionManager#startProjectionAccessPoint(android.car.CarProjectionManager.ProjectionAccessPointCallback):
    Registration methods should have overload that accepts delivery Executor: `startProjectionAccessPoint`
ExecutorRegistration: android.car.diagnostic.CarDiagnosticManager#registerListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener, int, int):
    Registration methods should have overload that accepts delivery Executor: `registerListener`
ExecutorRegistration: android.car.drivingstate.CarDrivingStateManager#registerListener(android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener):
    Registration methods should have overload that accepts delivery Executor: `registerListener`
ExecutorRegistration: android.car.drivingstate.CarUxRestrictionsManager#setListener(int, android.car.drivingstate.CarUxRestrictionsManager.OnUxRestrictionsChangedListener):
    Registration methods should have overload that accepts delivery Executor: `setListener`
ExecutorRegistration: android.car.hardware.CarVendorExtensionManager#registerCallback(android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback):
    Registration methods should have overload that accepts delivery Executor: `registerCallback`
ExecutorRegistration: android.car.hardware.cabin.CarCabinManager#registerCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback):
    Registration methods should have overload that accepts delivery Executor: `registerCallback`
ExecutorRegistration: android.car.hardware.hvac.CarHvacManager#registerCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback):
    Registration methods should have overload that accepts delivery Executor: `registerCallback`
ExecutorRegistration: android.car.media.CarMediaManager#addMediaSourceListener(android.car.media.CarMediaManager.MediaSourceChangedListener, int):
    Registration methods should have overload that accepts delivery Executor: `addMediaSourceListener`
ExecutorRegistration: android.car.storagemonitoring.CarStorageMonitoringManager#registerListener(android.car.storagemonitoring.CarStorageMonitoringManager.IoStatsListener):
    Registration methods should have overload that accepts delivery Executor: `registerListener`
ExecutorRegistration: android.car.trust.CarTrustAgentEnrollmentManager#setBleCallback(android.car.trust.CarTrustAgentEnrollmentManager.CarTrustAgentBleCallback):
    Registration methods should have overload that accepts delivery Executor: `setBleCallback`
ExecutorRegistration: android.car.trust.CarTrustAgentEnrollmentManager#setEnrollmentCallback(android.car.trust.CarTrustAgentEnrollmentManager.CarTrustAgentEnrollmentCallback):
    Registration methods should have overload that accepts delivery Executor: `setEnrollmentCallback`
ExecutorRegistration: android.car.watchdog.CarWatchdogManager#tellClientAlive(android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback, int):
    Registration methods should have overload that accepts delivery Executor: `tellClientAlive`


GenericException: android.car.view.MirroredSurfaceView#finalize():
    Methods must not throw generic exceptions (`java.lang.Throwable`)


HiddenSuperclass: android.car.CarAppFocusManager:
    Public class android.car.CarAppFocusManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.CarInfoManager:
    Public class android.car.CarInfoManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.CarOccupantZoneManager:
    Public class android.car.CarOccupantZoneManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.CarProjectionManager:
    Public class android.car.CarProjectionManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.cluster.CarInstrumentClusterManager:
    Public class android.car.cluster.CarInstrumentClusterManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.content.pm.CarPackageManager:
    Public class android.car.content.pm.CarPackageManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.diagnostic.CarDiagnosticManager:
    Public class android.car.diagnostic.CarDiagnosticManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.drivingstate.CarDrivingStateManager:
    Public class android.car.drivingstate.CarDrivingStateManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.drivingstate.CarUxRestrictionsManager:
    Public class android.car.drivingstate.CarUxRestrictionsManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.hardware.CarSensorManager:
    Public class android.car.hardware.CarSensorManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.hardware.CarVendorExtensionManager:
    Public class android.car.hardware.CarVendorExtensionManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.hardware.cabin.CarCabinManager:
    Public class android.car.hardware.cabin.CarCabinManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.hardware.hvac.CarHvacManager:
    Public class android.car.hardware.hvac.CarHvacManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.hardware.power.CarPowerManager:
    Public class android.car.hardware.power.CarPowerManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.hardware.property.CarPropertyManager:
    Public class android.car.hardware.property.CarPropertyManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.media.CarAudioManager:
    Public class android.car.media.CarAudioManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.navigation.CarNavigationStatusManager:
    Public class android.car.navigation.CarNavigationStatusManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.settings.CarConfigurationManager:
    Public class android.car.settings.CarConfigurationManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.storagemonitoring.CarStorageMonitoringManager:
    Public class android.car.storagemonitoring.CarStorageMonitoringManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.trust.CarTrustAgentEnrollmentManager:
    Public class android.car.trust.CarTrustAgentEnrollmentManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.user.CarUserManager:
    Public class android.car.user.CarUserManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.vms.VmsClientManager:
    Public class android.car.vms.VmsClientManager stripped of unavailable superclass android.car.CarManagerBase
HiddenSuperclass: android.car.vms.VmsSubscriberManager:
    Public class android.car.vms.VmsSubscriberManager stripped of unavailable superclass android.car.CarManagerBase


IntentBuilderName: android.car.app.ControlledRemoteCarTaskViewConfig#getActivityIntent():
    Methods creating an Intent should be named `create<Foo>Intent()`, was `getActivityIntent`


IntentName: android.car.Car#CAR_EXTRA_CLUSTER_ACTIVITY_STATE:
    Intent extra constant name must be EXTRA_FOO: CAR_EXTRA_CLUSTER_ACTIVITY_STATE
IntentName: android.car.media.CarAudioManager#AUDIOFOCUS_EXTRA_RECEIVE_DUCKING_EVENTS:
    Intent extra constant name must be EXTRA_FOO: AUDIOFOCUS_EXTRA_RECEIVE_DUCKING_EVENTS


InvalidNullabilityOverride: android.car.occupantconnection.AbstractReceiverService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #1:
    Invalid nullability on parameter `writer` in method `dump`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: android.car.occupantconnection.AbstractReceiverService#onBind(android.content.Intent) parameter #0:
    Invalid nullability on parameter `intent` in method `onBind`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: android.car.occupantconnection.AbstractReceiverService#onStartCommand(android.content.Intent, int, int) parameter #0:
    Invalid nullability on parameter `intent` in method `onStartCommand`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.


KotlinOperator: android.car.SyncResultCallback#get(long, java.util.concurrent.TimeUnit):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)


ListenerLast: android.car.watchdog.CarWatchdogManager#registerClient(java.util.concurrent.Executor, android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback, int) parameter #2:
    Listeners should always be at end of argument list (method `registerClient`)
ListenerLast: android.car.watchdog.CarWatchdogManager#tellClientAlive(android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback, int) parameter #1:
    Listeners should always be at end of argument list (method `tellClientAlive`)


MinMaxConstant: android.car.diagnostic.IntegerSensorIndex#MAX_AIR_FLOW_RATE_FROM_MASS_AIR_FLOW_SENSOR:
    If min/max could change in future, make them dynamic methods: android.car.diagnostic.IntegerSensorIndex#MAX_AIR_FLOW_RATE_FROM_MASS_AIR_FLOW_SENSOR
MinMaxConstant: android.car.diagnostic.IntegerSensorIndex#MAX_FUEL_AIR_EQUIVALENCE_RATIO:
    If min/max could change in future, make them dynamic methods: android.car.diagnostic.IntegerSensorIndex#MAX_FUEL_AIR_EQUIVALENCE_RATIO
MinMaxConstant: android.car.diagnostic.IntegerSensorIndex#MAX_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE:
    If min/max could change in future, make them dynamic methods: android.car.diagnostic.IntegerSensorIndex#MAX_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE
MinMaxConstant: android.car.diagnostic.IntegerSensorIndex#MAX_OXYGEN_SENSOR_CURRENT:
    If min/max could change in future, make them dynamic methods: android.car.diagnostic.IntegerSensorIndex#MAX_OXYGEN_SENSOR_CURRENT
MinMaxConstant: android.car.diagnostic.IntegerSensorIndex#MAX_OXYGEN_SENSOR_VOLTAGE:
    If min/max could change in future, make them dynamic methods: android.car.diagnostic.IntegerSensorIndex#MAX_OXYGEN_SENSOR_VOLTAGE
MinMaxConstant: android.car.occupantconnection.Payload#MAX_DIRECT_PAYLOAD_SIZE:
    If min/max could change in future, make them dynamic methods: android.car.occupantconnection.Payload#MAX_DIRECT_PAYLOAD_SIZE


MissingGetterMatchingBuilder: android.car.app.ControlledRemoteCarTaskViewConfig.Builder#setShouldAutoRestartOnTaskRemoval(boolean):
    android.car.app.ControlledRemoteCarTaskViewConfig does not declare a `shouldAutoRestartOnTaskRemoval()` method matching method android.car.app.ControlledRemoteCarTaskViewConfig.Builder.setShouldAutoRestartOnTaskRemoval(boolean)
MissingGetterMatchingBuilder: android.car.diagnostic.CarDiagnosticEvent.Builder#setDtc(String):
    android.car.diagnostic.CarDiagnosticEvent does not declare a `getDtc()` method matching method android.car.diagnostic.CarDiagnosticEvent.Builder.setDtc(String)
MissingGetterMatchingBuilder: android.car.diagnostic.CarDiagnosticEvent.Builder#setFloatValue(int, float):
    android.car.diagnostic.CarDiagnosticEvent does not declare a `getFloatValue()` method matching method android.car.diagnostic.CarDiagnosticEvent.Builder.setFloatValue(int,float)
MissingGetterMatchingBuilder: android.car.diagnostic.CarDiagnosticEvent.Builder#setIntValue(int, int):
    android.car.diagnostic.CarDiagnosticEvent does not declare a `getIntValue()` method matching method android.car.diagnostic.CarDiagnosticEvent.Builder.setIntValue(int,int)
MissingGetterMatchingBuilder: android.car.diagnostic.CarDiagnosticEvent.Builder#setTimeStamp(long):
    android.car.diagnostic.CarDiagnosticEvent does not declare a `getTimeStamp()` method matching method android.car.diagnostic.CarDiagnosticEvent.Builder.setTimeStamp(long)
MissingGetterMatchingBuilder: android.car.hardware.CarPropertyConfig.Builder#addArea(int):
    android.car.hardware.CarPropertyConfig does not declare a `getAreas()` method matching method android.car.hardware.CarPropertyConfig.Builder.addArea(int)
MissingGetterMatchingBuilder: android.car.hardware.CarPropertyConfig.Builder#addAreaConfig(int, T, T):
    android.car.hardware.CarPropertyConfig does not declare a `getAreaConfigs()` method matching method android.car.hardware.CarPropertyConfig.Builder.addAreaConfig(int,T,T)
MissingGetterMatchingBuilder: android.car.hardware.CarPropertyConfig.Builder#addAreas(int[]):
    android.car.hardware.CarPropertyConfig does not declare a getter method matching method android.car.hardware.CarPropertyConfig.Builder.addAreas(int[]) (expected one of: [getAreas(), getAreases()])
MissingGetterMatchingBuilder: android.car.hardware.CarPropertyConfig.Builder#setConfigString(String):
    android.car.hardware.CarPropertyConfig does not declare a `getConfigString()` method matching method android.car.hardware.CarPropertyConfig.Builder.setConfigString(String)
MissingGetterMatchingBuilder: android.car.projection.ProjectionStatus.Builder#addMobileDevice(android.car.projection.ProjectionStatus.MobileDevice):
    android.car.projection.ProjectionStatus does not declare a `getMobileDevices()` method matching method android.car.projection.ProjectionStatus.Builder.addMobileDevice(android.car.projection.ProjectionStatus.MobileDevice)
MissingGetterMatchingBuilder: android.car.projection.ProjectionStatus.Builder#setProjectionTransport(int):
    android.car.projection.ProjectionStatus does not declare a `getProjectionTransport()` method matching method android.car.projection.ProjectionStatus.Builder.setProjectionTransport(int)
MissingGetterMatchingBuilder: android.car.projection.ProjectionStatus.MobileDevice.Builder#addTransport(int):
    android.car.projection.ProjectionStatus.MobileDevice does not declare a `getTransports()` method matching method android.car.projection.ProjectionStatus.MobileDevice.Builder.addTransport(int)
MissingGetterMatchingBuilder: android.car.user.UserCreationRequest.Builder#setAdmin():
    android.car.user.UserCreationRequest does not declare a `getAdmin()` method matching method android.car.user.UserCreationRequest.Builder.setAdmin()
MissingGetterMatchingBuilder: android.car.user.UserCreationRequest.Builder#setEphemeral():
    android.car.user.UserCreationRequest does not declare a `getEphemeral()` method matching method android.car.user.UserCreationRequest.Builder.setEphemeral()
MissingGetterMatchingBuilder: android.car.user.UserCreationRequest.Builder#setGuest():
    android.car.user.UserCreationRequest does not declare a `getGuest()` method matching method android.car.user.UserCreationRequest.Builder.setGuest()
MissingGetterMatchingBuilder: android.car.user.UserLifecycleEventFilter.Builder#addEventType(int):
    android.car.user.UserLifecycleEventFilter does not declare a `getEventTypes()` method matching method android.car.user.UserLifecycleEventFilter.Builder.addEventType(int)
MissingGetterMatchingBuilder: android.car.user.UserLifecycleEventFilter.Builder#addUser(android.os.UserHandle):
    android.car.user.UserLifecycleEventFilter does not declare a `getUsers()` method matching method android.car.user.UserLifecycleEventFilter.Builder.addUser(android.os.UserHandle)
MissingGetterMatchingBuilder: android.car.user.UserStopRequest.Builder#setForce():
    android.car.user.UserStopRequest does not declare a `getForce()` method matching method android.car.user.UserStopRequest.Builder.setForce()


MissingNullability: android.car.AoapService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #0:
    Missing nullability on parameter `fd` in method `dump`
MissingNullability: android.car.AoapService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #1:
    Missing nullability on parameter `writer` in method `dump`
MissingNullability: android.car.AoapService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #2:
    Missing nullability on parameter `args` in method `dump`
MissingNullability: android.car.AoapService#onBind(android.content.Intent):
    Missing nullability on method `onBind` return
MissingNullability: android.car.AoapService#onBind(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `onBind`
MissingNullability: android.car.AoapService#onUnbind(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `onUnbind`
MissingNullability: android.car.CarProjectionManager.ProjectionAccessPointCallback#onStarted(android.net.wifi.WifiConfiguration) parameter #0:
    Missing nullability on parameter `wifiConfiguration` in method `onStarted`
MissingNullability: android.car.SyncResultCallback#get(long, java.util.concurrent.TimeUnit) parameter #1:
    Missing nullability on parameter `unit` in method `get`
MissingNullability: android.car.cluster.CarInstrumentClusterManager#registerCallback(String, android.car.cluster.CarInstrumentClusterManager.Callback) parameter #0:
    Missing nullability on parameter `category` in method `registerCallback`
MissingNullability: android.car.cluster.CarInstrumentClusterManager#registerCallback(String, android.car.cluster.CarInstrumentClusterManager.Callback) parameter #1:
    Missing nullability on parameter `callback` in method `registerCallback`
MissingNullability: android.car.cluster.CarInstrumentClusterManager#startActivity(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `startActivity`
MissingNullability: android.car.cluster.CarInstrumentClusterManager#unregisterCallback(android.car.cluster.CarInstrumentClusterManager.Callback) parameter #0:
    Missing nullability on parameter `callback` in method `unregisterCallback`
MissingNullability: android.car.cluster.CarInstrumentClusterManager.Callback#onClusterActivityStateChanged(String, android.os.Bundle) parameter #0:
    Missing nullability on parameter `category` in method `onClusterActivityStateChanged`
MissingNullability: android.car.cluster.CarInstrumentClusterManager.Callback#onClusterActivityStateChanged(String, android.os.Bundle) parameter #1:
    Missing nullability on parameter `clusterActivityState` in method `onClusterActivityStateChanged`
MissingNullability: android.car.cluster.renderer.InstrumentClusterRenderer#createNavigationRenderer():
    Missing nullability on method `createNavigationRenderer` return
MissingNullability: android.car.cluster.renderer.InstrumentClusterRenderer#onCreate(android.content.Context) parameter #0:
    Missing nullability on parameter `context` in method `onCreate`
MissingNullability: android.car.cluster.renderer.InstrumentClusterRenderingService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #0:
    Missing nullability on parameter `fd` in method `dump`
MissingNullability: android.car.cluster.renderer.InstrumentClusterRenderingService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #1:
    Missing nullability on parameter `writer` in method `dump`
MissingNullability: android.car.cluster.renderer.InstrumentClusterRenderingService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #2:
    Missing nullability on parameter `args` in method `dump`
MissingNullability: android.car.cluster.renderer.InstrumentClusterRenderingService#getBitmap(android.net.Uri) parameter #0:
    Missing nullability on parameter `uri` in method `getBitmap`
MissingNullability: android.car.cluster.renderer.InstrumentClusterRenderingService#getBitmap(android.net.Uri, int, int) parameter #0:
    Missing nullability on parameter `uri` in method `getBitmap`
MissingNullability: android.car.cluster.renderer.InstrumentClusterRenderingService#onBind(android.content.Intent):
    Missing nullability on method `onBind` return
MissingNullability: android.car.cluster.renderer.InstrumentClusterRenderingService#onBind(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `onBind`
MissingNullability: android.car.cluster.renderer.NavigationRenderer#getNavigationProperties():
    Missing nullability on method `getNavigationProperties` return
MissingNullability: android.car.content.pm.AppBlockingPackageInfo#AppBlockingPackageInfo(String, int, int, int, android.content.pm.Signature[], String[]) parameter #0:
    Missing nullability on parameter `packageName` in method `AppBlockingPackageInfo`
MissingNullability: android.car.content.pm.AppBlockingPackageInfo#AppBlockingPackageInfo(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `AppBlockingPackageInfo`
MissingNullability: android.car.content.pm.AppBlockingPackageInfo#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.content.pm.AppBlockingPackageInfo`
MissingNullability: android.car.content.pm.AppBlockingPackageInfo#activities:
    Missing nullability on field `activities` in class `class android.car.content.pm.AppBlockingPackageInfo`
MissingNullability: android.car.content.pm.AppBlockingPackageInfo#packageName:
    Missing nullability on field `packageName` in class `class android.car.content.pm.AppBlockingPackageInfo`
MissingNullability: android.car.content.pm.AppBlockingPackageInfo#signatures:
    Missing nullability on field `signatures` in class `class android.car.content.pm.AppBlockingPackageInfo`
MissingNullability: android.car.content.pm.AppBlockingPackageInfo#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.content.pm.CarAppBlockingPolicy#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.content.pm.CarAppBlockingPolicy`
MissingNullability: android.car.content.pm.CarAppBlockingPolicy#CarAppBlockingPolicy(android.car.content.pm.AppBlockingPackageInfo[], android.car.content.pm.AppBlockingPackageInfo[]) parameter #0:
    Missing nullability on parameter `whitelists` in method `CarAppBlockingPolicy`
MissingNullability: android.car.content.pm.CarAppBlockingPolicy#CarAppBlockingPolicy(android.car.content.pm.AppBlockingPackageInfo[], android.car.content.pm.AppBlockingPackageInfo[]) parameter #1:
    Missing nullability on parameter `blacklists` in method `CarAppBlockingPolicy`
MissingNullability: android.car.content.pm.CarAppBlockingPolicy#CarAppBlockingPolicy(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `CarAppBlockingPolicy`
MissingNullability: android.car.content.pm.CarAppBlockingPolicy#blacklists:
    Missing nullability on field `blacklists` in class `class android.car.content.pm.CarAppBlockingPolicy`
MissingNullability: android.car.content.pm.CarAppBlockingPolicy#whitelists:
    Missing nullability on field `whitelists` in class `class android.car.content.pm.CarAppBlockingPolicy`
MissingNullability: android.car.content.pm.CarAppBlockingPolicy#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.content.pm.CarAppBlockingPolicyService#getAppBlockingPolicy():
    Missing nullability on method `getAppBlockingPolicy` return
MissingNullability: android.car.content.pm.CarAppBlockingPolicyService#onBind(android.content.Intent):
    Missing nullability on method `onBind` return
MissingNullability: android.car.content.pm.CarAppBlockingPolicyService#onBind(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `onBind`
MissingNullability: android.car.content.pm.CarAppBlockingPolicyService#onStartCommand(android.content.Intent, int, int) parameter #0:
    Missing nullability on parameter `intent` in method `onStartCommand`
MissingNullability: android.car.content.pm.CarAppBlockingPolicyService#onUnbind(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `onUnbind`
MissingNullability: android.car.content.pm.CarPackageManager#isActivityBackedBySafeActivity(android.content.ComponentName) parameter #0:
    Missing nullability on parameter `activityName` in method `isActivityBackedBySafeActivity`
MissingNullability: android.car.content.pm.CarPackageManager#setAppBlockingPolicy(String, android.car.content.pm.CarAppBlockingPolicy, int) parameter #0:
    Missing nullability on parameter `packageName` in method `setAppBlockingPolicy`
MissingNullability: android.car.content.pm.CarPackageManager#setAppBlockingPolicy(String, android.car.content.pm.CarAppBlockingPolicy, int) parameter #1:
    Missing nullability on parameter `policy` in method `setAppBlockingPolicy`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.diagnostic.CarDiagnosticEvent`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent#CarDiagnosticEvent(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `CarDiagnosticEvent`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent#dtc:
    Missing nullability on field `dtc` in class `class android.car.diagnostic.CarDiagnosticEvent`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent#writeToJson(android.util.JsonWriter) parameter #0:
    Missing nullability on parameter `jsonWriter` in method `writeToJson`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.Builder#build():
    Missing nullability on method `build` return
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.Builder#newFreezeFrameBuilder():
    Missing nullability on method `newFreezeFrameBuilder` return
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.Builder#newLiveFrameBuilder():
    Missing nullability on method `newLiveFrameBuilder` return
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.Builder#setDtc(String):
    Missing nullability on method `setDtc` return
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.Builder#setDtc(String) parameter #0:
    Missing nullability on parameter `dtc` in method `setDtc`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.Builder#setFloatValue(int, float):
    Missing nullability on method `setFloatValue` return
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.Builder#setIntValue(int, int):
    Missing nullability on method `setIntValue` return
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.Builder#setTimeStamp(long):
    Missing nullability on method `setTimeStamp` return
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.Builder#withDtc(String) parameter #0:
    Missing nullability on parameter `dtc` in method `withDtc`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors#components:
    Missing nullability on field `components` in class `class android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors#fuelSystem:
    Missing nullability on field `fuelSystem` in class `class android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors#misfire:
    Missing nullability on field `misfire` in class `class android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#EGROrVVT:
    Missing nullability on field `EGROrVVT` in class `class android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#NMHCCatalyst:
    Missing nullability on field `NMHCCatalyst` in class `class android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#NOxSCR:
    Missing nullability on field `NOxSCR` in class `class android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#PMFilter:
    Missing nullability on field `PMFilter` in class `class android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#boostPressure:
    Missing nullability on field `boostPressure` in class `class android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#exhaustGasSensor:
    Missing nullability on field `exhaustGasSensor` in class `class android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#ACRefrigerant:
    Missing nullability on field `ACRefrigerant` in class `class android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#EGR:
    Missing nullability on field `EGR` in class `class android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#catalyst:
    Missing nullability on field `catalyst` in class `class android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#evaporativeSystem:
    Missing nullability on field `evaporativeSystem` in class `class android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#heatedCatalyst:
    Missing nullability on field `heatedCatalyst` in class `class android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#oxygenSensor:
    Missing nullability on field `oxygenSensor` in class `class android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#oxygenSensorHeater:
    Missing nullability on field `oxygenSensorHeater` in class `class android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#secondaryAirSystem:
    Missing nullability on field `secondaryAirSystem` in class `class android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors`
MissingNullability: android.car.diagnostic.CarDiagnosticManager#clearFreezeFrames(long...) parameter #0:
    Missing nullability on parameter `timestamps` in method `clearFreezeFrames`
MissingNullability: android.car.diagnostic.CarDiagnosticManager#getFreezeFrameTimestamps():
    Missing nullability on method `getFreezeFrameTimestamps` return
MissingNullability: android.car.diagnostic.CarDiagnosticManager#registerListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener, int, int) parameter #0:
    Missing nullability on parameter `listener` in method `registerListener`
MissingNullability: android.car.diagnostic.CarDiagnosticManager#unregisterListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener) parameter #0:
    Missing nullability on parameter `listener` in method `unregisterListener`
MissingNullability: android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener#onDiagnosticEvent(android.car.diagnostic.CarDiagnosticEvent) parameter #0:
    Missing nullability on parameter `carDiagnosticEvent` in method `onDiagnosticEvent`
MissingNullability: android.car.drivingstate.CarDrivingStateEvent#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.drivingstate.CarDrivingStateEvent`
MissingNullability: android.car.drivingstate.CarDrivingStateEvent#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener#onDrivingStateChanged(android.car.drivingstate.CarDrivingStateEvent) parameter #0:
    Missing nullability on parameter `event` in method `onDrivingStateChanged`
MissingNullability: android.car.hardware.CarPropertyConfig#newBuilder(Class<T>, int, int, int):
    Missing nullability on method `newBuilder` return
MissingNullability: android.car.hardware.CarPropertyConfig#newBuilder(Class<T>, int, int, int) parameter #0:
    Missing nullability on parameter `type` in method `newBuilder`
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#addArea(int):
    Missing nullability on method `addArea` return
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#addAreaConfig(int, T, T):
    Missing nullability on method `addAreaConfig` return
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#addAreas(int[]):
    Missing nullability on method `addAreas` return
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#addAreas(int[]) parameter #0:
    Missing nullability on parameter `areaIds` in method `addAreas`
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#build():
    Missing nullability on method `build` return
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#setAccess(int):
    Missing nullability on method `setAccess` return
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#setChangeMode(int):
    Missing nullability on method `setChangeMode` return
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#setConfigArray(java.util.ArrayList<java.lang.Integer>):
    Missing nullability on method `setConfigArray` return
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#setConfigArray(java.util.ArrayList<java.lang.Integer>) parameter #0:
    Missing nullability on parameter `configArray` in method `setConfigArray`
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#setConfigString(String):
    Missing nullability on method `setConfigString` return
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#setConfigString(String) parameter #0:
    Missing nullability on parameter `configString` in method `setConfigString`
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#setMaxSampleRate(float):
    Missing nullability on method `setMaxSampleRate` return
MissingNullability: android.car.hardware.CarPropertyConfig.Builder#setMinSampleRate(float):
    Missing nullability on method `setMinSampleRate` return
MissingNullability: android.car.hardware.CarVendorExtensionManager#getGlobalProperty(Class<E>, int) parameter #0:
    Missing nullability on parameter `propertyClass` in method `getGlobalProperty`
MissingNullability: android.car.hardware.CarVendorExtensionManager#getProperties():
    Missing nullability on method `getProperties` return
MissingNullability: android.car.hardware.CarVendorExtensionManager#getProperty(Class<E>, int, int) parameter #0:
    Missing nullability on parameter `propertyClass` in method `getProperty`
MissingNullability: android.car.hardware.CarVendorExtensionManager#registerCallback(android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback) parameter #0:
    Missing nullability on parameter `callback` in method `registerCallback`
MissingNullability: android.car.hardware.CarVendorExtensionManager#setGlobalProperty(Class<E>, int, E) parameter #0:
    Missing nullability on parameter `propertyClass` in method `setGlobalProperty`
MissingNullability: android.car.hardware.CarVendorExtensionManager#setProperty(Class<E>, int, int, E) parameter #0:
    Missing nullability on parameter `propertyClass` in method `setProperty`
MissingNullability: android.car.hardware.CarVendorExtensionManager#unregisterCallback(android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback) parameter #0:
    Missing nullability on parameter `callback` in method `unregisterCallback`
MissingNullability: android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback#onChangeEvent(android.car.hardware.CarPropertyValue) parameter #0:
    Missing nullability on parameter `value` in method `onChangeEvent`
MissingNullability: android.car.hardware.cabin.CarCabinManager#getPropertyList():
    Missing nullability on method `getPropertyList` return
MissingNullability: android.car.hardware.cabin.CarCabinManager#registerCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback) parameter #0:
    Missing nullability on parameter `callback` in method `registerCallback`
MissingNullability: android.car.hardware.cabin.CarCabinManager#unregisterCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback) parameter #0:
    Missing nullability on parameter `callback` in method `unregisterCallback`
MissingNullability: android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback#onChangeEvent(android.car.hardware.CarPropertyValue) parameter #0:
    Missing nullability on parameter `value` in method `onChangeEvent`
MissingNullability: android.car.hardware.hvac.CarHvacManager#getPropertyList():
    Missing nullability on method `getPropertyList` return
MissingNullability: android.car.hardware.hvac.CarHvacManager#registerCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback) parameter #0:
    Missing nullability on parameter `callback` in method `registerCallback`
MissingNullability: android.car.hardware.hvac.CarHvacManager#unregisterCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback) parameter #0:
    Missing nullability on parameter `callback` in method `unregisterCallback`
MissingNullability: android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback#onChangeEvent(android.car.hardware.CarPropertyValue) parameter #0:
    Missing nullability on parameter `value` in method `onChangeEvent`
MissingNullability: android.car.media.CarAudioManager#createAudioPatch(String, int, int):
    Missing nullability on method `createAudioPatch` return
MissingNullability: android.car.media.CarAudioManager#createAudioPatch(String, int, int) parameter #0:
    Missing nullability on parameter `sourceAddress` in method `createAudioPatch`
MissingNullability: android.car.media.CarAudioManager#releaseAudioPatch(android.car.media.CarAudioPatchHandle) parameter #0:
    Missing nullability on parameter `patch` in method `releaseAudioPatch`
MissingNullability: android.car.media.CarAudioPatchHandle#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.media.CarAudioPatchHandle`
MissingNullability: android.car.media.CarAudioPatchHandle#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `out` in method `writeToParcel`
MissingNullability: android.car.navigation.CarNavigationInstrumentCluster#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.navigation.CarNavigationInstrumentCluster`
MissingNullability: android.car.navigation.CarNavigationInstrumentCluster#CarNavigationInstrumentCluster(android.car.navigation.CarNavigationInstrumentCluster) parameter #0:
    Missing nullability on parameter `that` in method `CarNavigationInstrumentCluster`
MissingNullability: android.car.navigation.CarNavigationInstrumentCluster#createCluster(int):
    Missing nullability on method `createCluster` return
MissingNullability: android.car.navigation.CarNavigationInstrumentCluster#createCustomImageCluster(int, int, int, int):
    Missing nullability on method `createCustomImageCluster` return
MissingNullability: android.car.navigation.CarNavigationInstrumentCluster#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.navigation.CarNavigationStatusManager#getInstrumentClusterInfo():
    Missing nullability on method `getInstrumentClusterInfo` return
MissingNullability: android.car.navigation.CarNavigationStatusManager#sendEvent(int, android.os.Bundle) parameter #1:
    Missing nullability on parameter `bundle` in method `sendEvent`
MissingNullability: android.car.navigation.CarNavigationStatusManager#sendNavigationStateChange(android.os.Bundle) parameter #0:
    Missing nullability on parameter `bundle` in method `sendNavigationStateChange`
MissingNullability: android.car.occupantconnection.AbstractReceiverService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #0:
    Missing nullability on parameter `fd` in method `dump`
MissingNullability: android.car.occupantconnection.AbstractReceiverService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #1:
    Missing nullability on parameter `writer` in method `dump`
MissingNullability: android.car.occupantconnection.AbstractReceiverService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #2:
    Missing nullability on parameter `args` in method `dump`
MissingNullability: android.car.occupantconnection.AbstractReceiverService#onBind(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `onBind`
MissingNullability: android.car.occupantconnection.AbstractReceiverService#onLocalServiceBind(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `onLocalServiceBind`
MissingNullability: android.car.projection.ProjectionOptions#ProjectionOptions(android.os.Bundle) parameter #0:
    Missing nullability on parameter `bundle` in method `ProjectionOptions`
MissingNullability: android.car.projection.ProjectionStatus#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.projection.ProjectionStatus`
MissingNullability: android.car.projection.ProjectionStatus#builder(String, int) parameter #0:
    Missing nullability on parameter `packageName` in method `builder`
MissingNullability: android.car.projection.ProjectionStatus#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.projection.ProjectionStatus.Builder#addMobileDevice(android.car.projection.ProjectionStatus.MobileDevice) parameter #0:
    Missing nullability on parameter `mobileDevice` in method `addMobileDevice`
MissingNullability: android.car.projection.ProjectionStatus.Builder#build():
    Missing nullability on method `build` return
MissingNullability: android.car.projection.ProjectionStatus.Builder#setExtras(android.os.Bundle) parameter #0:
    Missing nullability on parameter `extras` in method `setExtras`
MissingNullability: android.car.projection.ProjectionStatus.MobileDevice#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.projection.ProjectionStatus.MobileDevice`
MissingNullability: android.car.projection.ProjectionStatus.MobileDevice#builder(int, String) parameter #1:
    Missing nullability on parameter `name` in method `builder`
MissingNullability: android.car.projection.ProjectionStatus.MobileDevice#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.projection.ProjectionStatus.MobileDevice.Builder#setExtras(android.os.Bundle) parameter #0:
    Missing nullability on parameter `extras` in method `setExtras`
MissingNullability: android.car.storagemonitoring.CarStorageMonitoringManager#getAggregateIoStats():
    Missing nullability on method `getAggregateIoStats` return
MissingNullability: android.car.storagemonitoring.CarStorageMonitoringManager#getBootIoStats():
    Missing nullability on method `getBootIoStats` return
MissingNullability: android.car.storagemonitoring.CarStorageMonitoringManager#getIoStatsDeltas():
    Missing nullability on method `getIoStatsDeltas` return
MissingNullability: android.car.storagemonitoring.CarStorageMonitoringManager#getWearEstimate():
    Missing nullability on method `getWearEstimate` return
MissingNullability: android.car.storagemonitoring.CarStorageMonitoringManager#getWearEstimateHistory():
    Missing nullability on method `getWearEstimateHistory` return
MissingNullability: android.car.storagemonitoring.CarStorageMonitoringManager#registerListener(android.car.storagemonitoring.CarStorageMonitoringManager.IoStatsListener) parameter #0:
    Missing nullability on parameter `listener` in method `registerListener`
MissingNullability: android.car.storagemonitoring.CarStorageMonitoringManager#unregisterListener(android.car.storagemonitoring.CarStorageMonitoringManager.IoStatsListener) parameter #0:
    Missing nullability on parameter `listener` in method `unregisterListener`
MissingNullability: android.car.storagemonitoring.CarStorageMonitoringManager.IoStatsListener#onSnapshot(android.car.storagemonitoring.IoStats) parameter #0:
    Missing nullability on parameter `snapshot` in method `onSnapshot`
MissingNullability: android.car.storagemonitoring.IoStats#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.storagemonitoring.IoStats`
MissingNullability: android.car.storagemonitoring.IoStats#IoStats(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `IoStats`
MissingNullability: android.car.storagemonitoring.IoStats#IoStats(java.util.List<android.car.storagemonitoring.IoStatsEntry>, long) parameter #0:
    Missing nullability on parameter `stats` in method `IoStats`
MissingNullability: android.car.storagemonitoring.IoStats#getBackgroundTotals():
    Missing nullability on method `getBackgroundTotals` return
MissingNullability: android.car.storagemonitoring.IoStats#getForegroundTotals():
    Missing nullability on method `getForegroundTotals` return
MissingNullability: android.car.storagemonitoring.IoStats#getStats():
    Missing nullability on method `getStats` return
MissingNullability: android.car.storagemonitoring.IoStats#getTotals():
    Missing nullability on method `getTotals` return
MissingNullability: android.car.storagemonitoring.IoStats#getUserIdStats(int):
    Missing nullability on method `getUserIdStats` return
MissingNullability: android.car.storagemonitoring.IoStats#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.storagemonitoring.IoStatsEntry#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.storagemonitoring.IoStatsEntry`
MissingNullability: android.car.storagemonitoring.IoStatsEntry#IoStatsEntry(android.car.storagemonitoring.UidIoRecord, long) parameter #0:
    Missing nullability on parameter `record` in method `IoStatsEntry`
MissingNullability: android.car.storagemonitoring.IoStatsEntry#IoStatsEntry(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `IoStatsEntry`
MissingNullability: android.car.storagemonitoring.IoStatsEntry#IoStatsEntry(int, long, android.car.storagemonitoring.IoStatsEntry.Metrics, android.car.storagemonitoring.IoStatsEntry.Metrics) parameter #2:
    Missing nullability on parameter `foreground` in method `IoStatsEntry`
MissingNullability: android.car.storagemonitoring.IoStatsEntry#IoStatsEntry(int, long, android.car.storagemonitoring.IoStatsEntry.Metrics, android.car.storagemonitoring.IoStatsEntry.Metrics) parameter #3:
    Missing nullability on parameter `background` in method `IoStatsEntry`
MissingNullability: android.car.storagemonitoring.IoStatsEntry#background:
    Missing nullability on field `background` in class `class android.car.storagemonitoring.IoStatsEntry`
MissingNullability: android.car.storagemonitoring.IoStatsEntry#foreground:
    Missing nullability on field `foreground` in class `class android.car.storagemonitoring.IoStatsEntry`
MissingNullability: android.car.storagemonitoring.IoStatsEntry#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.storagemonitoring.IoStatsEntry.Metrics#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.storagemonitoring.IoStatsEntry.Metrics`
MissingNullability: android.car.storagemonitoring.IoStatsEntry.Metrics#Metrics(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `Metrics`
MissingNullability: android.car.storagemonitoring.IoStatsEntry.Metrics#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.storagemonitoring.LifetimeWriteInfo#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.storagemonitoring.LifetimeWriteInfo`
MissingNullability: android.car.storagemonitoring.LifetimeWriteInfo#LifetimeWriteInfo(String, String, long) parameter #0:
    Missing nullability on parameter `partition` in method `LifetimeWriteInfo`
MissingNullability: android.car.storagemonitoring.LifetimeWriteInfo#LifetimeWriteInfo(String, String, long) parameter #1:
    Missing nullability on parameter `fstype` in method `LifetimeWriteInfo`
MissingNullability: android.car.storagemonitoring.LifetimeWriteInfo#LifetimeWriteInfo(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `LifetimeWriteInfo`
MissingNullability: android.car.storagemonitoring.LifetimeWriteInfo#fstype:
    Missing nullability on field `fstype` in class `class android.car.storagemonitoring.LifetimeWriteInfo`
MissingNullability: android.car.storagemonitoring.LifetimeWriteInfo#partition:
    Missing nullability on field `partition` in class `class android.car.storagemonitoring.LifetimeWriteInfo`
MissingNullability: android.car.storagemonitoring.LifetimeWriteInfo#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.storagemonitoring.WearEstimate#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.storagemonitoring.WearEstimate`
MissingNullability: android.car.storagemonitoring.WearEstimate#WearEstimate(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `WearEstimate`
MissingNullability: android.car.storagemonitoring.WearEstimate#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.storagemonitoring.WearEstimateChange#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.storagemonitoring.WearEstimateChange`
MissingNullability: android.car.storagemonitoring.WearEstimateChange#WearEstimateChange(android.car.storagemonitoring.WearEstimate, android.car.storagemonitoring.WearEstimate, long, java.time.Instant, boolean) parameter #0:
    Missing nullability on parameter `oldEstimate` in method `WearEstimateChange`
MissingNullability: android.car.storagemonitoring.WearEstimateChange#WearEstimateChange(android.car.storagemonitoring.WearEstimate, android.car.storagemonitoring.WearEstimate, long, java.time.Instant, boolean) parameter #1:
    Missing nullability on parameter `newEstimate` in method `WearEstimateChange`
MissingNullability: android.car.storagemonitoring.WearEstimateChange#WearEstimateChange(android.car.storagemonitoring.WearEstimate, android.car.storagemonitoring.WearEstimate, long, java.time.Instant, boolean) parameter #3:
    Missing nullability on parameter `dateAtChange` in method `WearEstimateChange`
MissingNullability: android.car.storagemonitoring.WearEstimateChange#WearEstimateChange(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `WearEstimateChange`
MissingNullability: android.car.storagemonitoring.WearEstimateChange#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.trust.CarTrustAgentEnrollmentManager#enrollmentHandshakeAccepted(android.bluetooth.BluetoothDevice) parameter #0:
    Missing nullability on parameter `device` in method `enrollmentHandshakeAccepted`
MissingNullability: android.car.trust.CarTrustAgentEnrollmentManager.CarTrustAgentBleCallback#onBleEnrollmentDeviceConnected(android.bluetooth.BluetoothDevice) parameter #0:
    Missing nullability on parameter `device` in method `onBleEnrollmentDeviceConnected`
MissingNullability: android.car.trust.CarTrustAgentEnrollmentManager.CarTrustAgentBleCallback#onBleEnrollmentDeviceDisconnected(android.bluetooth.BluetoothDevice) parameter #0:
    Missing nullability on parameter `device` in method `onBleEnrollmentDeviceDisconnected`
MissingNullability: android.car.trust.CarTrustAgentEnrollmentManager.CarTrustAgentEnrollmentCallback#onAuthStringAvailable(android.bluetooth.BluetoothDevice, String) parameter #0:
    Missing nullability on parameter `device` in method `onAuthStringAvailable`
MissingNullability: android.car.trust.CarTrustAgentEnrollmentManager.CarTrustAgentEnrollmentCallback#onAuthStringAvailable(android.bluetooth.BluetoothDevice, String) parameter #1:
    Missing nullability on parameter `authString` in method `onAuthStringAvailable`
MissingNullability: android.car.trust.TrustedDeviceInfo#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.trust.TrustedDeviceInfo`
MissingNullability: android.car.trust.TrustedDeviceInfo#TrustedDeviceInfo(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `TrustedDeviceInfo`
MissingNullability: android.car.trust.TrustedDeviceInfo#deserialize(String):
    Missing nullability on method `deserialize` return
MissingNullability: android.car.trust.TrustedDeviceInfo#deserialize(String) parameter #0:
    Missing nullability on parameter `deviceInfo` in method `deserialize`
MissingNullability: android.car.trust.TrustedDeviceInfo#serialize():
    Missing nullability on method `serialize` return
MissingNullability: android.car.trust.TrustedDeviceInfo#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.car.vms.VmsAssociatedLayer#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.vms.VmsAssociatedLayer`
MissingNullability: android.car.vms.VmsAssociatedLayer#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `out` in method `writeToParcel`
MissingNullability: android.car.vms.VmsAvailableLayers#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.vms.VmsAvailableLayers`
MissingNullability: android.car.vms.VmsAvailableLayers#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `out` in method `writeToParcel`
MissingNullability: android.car.vms.VmsLayer#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.vms.VmsLayer`
MissingNullability: android.car.vms.VmsLayer#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `out` in method `writeToParcel`
MissingNullability: android.car.vms.VmsLayerDependency#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.vms.VmsLayerDependency`
MissingNullability: android.car.vms.VmsLayerDependency#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `out` in method `writeToParcel`
MissingNullability: android.car.vms.VmsLayersOffering#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.vms.VmsLayersOffering`
MissingNullability: android.car.vms.VmsLayersOffering#getDependencies():
    Missing nullability on method `getDependencies` return
MissingNullability: android.car.vms.VmsLayersOffering#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `out` in method `writeToParcel`
MissingNullability: android.car.vms.VmsOperationRecorder#addHalSubscription(int, android.car.vms.VmsLayer) parameter #1:
    Missing nullability on parameter `layer` in method `addHalSubscription`
MissingNullability: android.car.vms.VmsOperationRecorder#addSubscription(int, android.car.vms.VmsLayer) parameter #1:
    Missing nullability on parameter `layer` in method `addSubscription`
MissingNullability: android.car.vms.VmsOperationRecorder#get():
    Missing nullability on method `get` return
MissingNullability: android.car.vms.VmsOperationRecorder#removeHalSubscription(int, android.car.vms.VmsLayer) parameter #1:
    Missing nullability on parameter `layer` in method `removeHalSubscription`
MissingNullability: android.car.vms.VmsOperationRecorder#removeSubscription(int, android.car.vms.VmsLayer) parameter #1:
    Missing nullability on parameter `layer` in method `removeSubscription`
MissingNullability: android.car.vms.VmsOperationRecorder#setHalPublisherLayersOffering(android.car.vms.VmsLayersOffering) parameter #0:
    Missing nullability on parameter `layersOffering` in method `setHalPublisherLayersOffering`
MissingNullability: android.car.vms.VmsOperationRecorder#setLayersOffering(android.car.vms.VmsLayersOffering) parameter #0:
    Missing nullability on parameter `layersOffering` in method `setLayersOffering`
MissingNullability: android.car.vms.VmsOperationRecorder#setPublisherLayersOffering(android.car.vms.VmsLayersOffering) parameter #0:
    Missing nullability on parameter `layersOffering` in method `setPublisherLayersOffering`
MissingNullability: android.car.vms.VmsOperationRecorder#subscribe(android.car.vms.VmsLayer) parameter #0:
    Missing nullability on parameter `layer` in method `subscribe`
MissingNullability: android.car.vms.VmsOperationRecorder#subscribe(android.car.vms.VmsLayer, int) parameter #0:
    Missing nullability on parameter `layer` in method `subscribe`
MissingNullability: android.car.vms.VmsOperationRecorder#unsubscribe(android.car.vms.VmsLayer) parameter #0:
    Missing nullability on parameter `layer` in method `unsubscribe`
MissingNullability: android.car.vms.VmsOperationRecorder#unsubscribe(android.car.vms.VmsLayer, int) parameter #0:
    Missing nullability on parameter `layer` in method `unsubscribe`
MissingNullability: android.car.vms.VmsPublisherClientService#getPublisherId(byte[]) parameter #0:
    Missing nullability on parameter `publisherInfo` in method `getPublisherId`
MissingNullability: android.car.vms.VmsPublisherClientService#getSubscriptions():
    Missing nullability on method `getSubscriptions` return
MissingNullability: android.car.vms.VmsPublisherClientService#onBind(android.content.Intent):
    Missing nullability on method `onBind` return
MissingNullability: android.car.vms.VmsPublisherClientService#onBind(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `onBind`
MissingNullability: android.car.vms.VmsPublisherClientService#onUnbind(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `onUnbind`
MissingNullability: android.car.vms.VmsPublisherClientService#publish(android.car.vms.VmsLayer, int, byte[]) parameter #2:
    Missing nullability on parameter `payload` in method `publish`
MissingNullability: android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback#onVmsMessageReceived(android.car.vms.VmsLayer, byte[]) parameter #1:
    Missing nullability on parameter `payload` in method `onVmsMessageReceived`
MissingNullability: android.car.vms.VmsSubscriptionState#CREATOR:
    Missing nullability on field `CREATOR` in class `class android.car.vms.VmsSubscriptionState`
MissingNullability: android.car.vms.VmsSubscriptionState#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `out` in method `writeToParcel`


MutableBareField: android.car.occupantconnection.Payload#bytes:
    Bare field bytes must be marked final, or moved behind accessors if mutable


NotCloseable: android.car.app.CarTaskViewController:
    Classes that release resources (release()) should implement AutoCloseable and CloseGuard: class android.car.app.CarTaskViewController
NotCloseable: android.car.app.CarTaskViewHost:
    Classes that release resources (release()) should implement AutoCloseable and CloseGuard: class android.car.app.CarTaskViewHost
NotCloseable: android.car.app.ControlledRemoteCarTaskView:
    Classes that release resources (release()) should implement AutoCloseable and CloseGuard: class android.car.app.ControlledRemoteCarTaskView
NotCloseable: android.car.occupantconnection.CarOccupantConnectionManager:
    Classes that release resources (disconnect()) should implement AutoCloseable and CloseGuard: class android.car.occupantconnection.CarOccupantConnectionManager
NotCloseable: android.car.oem.OemCarServiceComponent:
    Classes that release resources (release()) should implement AutoClosable and CloseGuard: class android.car.oem.OemCarServiceComponent
NotCloseable: android.car.view.MirroredSurfaceView:
    Classes that release resources (release()) should implement AutoCloseable and CloseGuard: class android.car.view.MirroredSurfaceView


NullableCollection: android.car.cluster.ClusterActivityState#getExtras():
    Return type of method android.car.cluster.ClusterActivityState.getExtras() is a nullable collection (`android.os.Bundle`); must be non-null
NullableCollection: android.car.drivingstate.CarUxRestrictionsManager#getConfigs():
    Return type of method android.car.drivingstate.CarUxRestrictionsManager.getConfigs() is a nullable collection (`java.util.List`); must be non-null
NullableCollection: android.car.drivingstate.CarUxRestrictionsManager#getStagedConfigs():
    Return type of method android.car.drivingstate.CarUxRestrictionsManager.getStagedConfigs() is a nullable collection (`java.util.List`); must be non-null
NullableCollection: android.car.telemetry.CarTelemetryManager.MetricsReportCallback#onResult(String, android.os.PersistableBundle, byte[], int) parameter #1:
    Type of parameter report in android.car.telemetry.CarTelemetryManager.MetricsReportCallback.onResult(String metricsConfigName, android.os.PersistableBundle report, byte[] telemetryError, int status) is a nullable collection (`android.os.PersistableBundle`); must be non-null
NullableCollection: android.car.watchdog.CarWatchdogManager#getResourceOveruseConfigurations(int):
    Return type of method android.car.watchdog.CarWatchdogManager.getResourceOveruseConfigurations(int) is a nullable collection (`java.util.List`); must be non-null


OnNameExpected: android.car.AoapService#canSwitchToAoap(android.hardware.usb.UsbDevice):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.AoapService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.AoapService#isDeviceSupported(android.hardware.usb.UsbDevice):
    Methods implemented by developers should follow the on<Something> style, was `isDeviceSupported`
OnNameExpected: android.car.cluster.renderer.InstrumentClusterRenderingService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.cluster.renderer.InstrumentClusterRenderingService#getBitmap(android.net.Uri, int, int):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.cluster.renderer.InstrumentClusterRenderingService#getBitmap(android.net.Uri, int, int, float):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.cluster.renderer.InstrumentClusterRenderingService#getNavigationRenderer():
    Methods implemented by developers should follow the on<Something> style, was `getNavigationRenderer`
OnNameExpected: android.car.cluster.renderer.InstrumentClusterRenderingService#setClusterActivityLaunchOptions(android.app.ActivityOptions):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.cluster.renderer.InstrumentClusterRenderingService#setClusterActivityState(android.car.cluster.ClusterActivityState):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.cluster.renderer.InstrumentClusterRenderingService#startFixedActivityModeForDisplayAndUser(android.content.Intent, android.app.ActivityOptions, int):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.cluster.renderer.InstrumentClusterRenderingService#startNavigationActivity(android.content.ComponentName):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.cluster.renderer.InstrumentClusterRenderingService#stopFixedActivityMode(int):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.content.pm.CarAppBlockingPolicyService#getAppBlockingPolicy():
    Methods implemented by developers should follow the on<Something> style, was `getAppBlockingPolicy`
OnNameExpected: android.car.occupantconnection.AbstractReceiverService#acceptConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.occupantconnection.AbstractReceiverService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.occupantconnection.AbstractReceiverService#forwardPayload(android.car.CarOccupantZoneManager.OccupantZoneInfo, String, android.car.occupantconnection.Payload):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.occupantconnection.AbstractReceiverService#getAllReceiverEndpoints():
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.occupantconnection.AbstractReceiverService#rejectConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo, int):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.oem.OemCarService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.oem.OemCarService#getOemAudioFocusService():
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.car.oem.OemCarService#getSupportedCarVersion():
    Methods implemented by developers should follow the on<Something> style, was `getSupportedCarVersion`
OnNameExpected: android.car.oem.OemCarService#isOemServiceReady():
    Methods implemented by developers should follow the on<Something> style, was `isOemServiceReady`


OverlappingConstants: android.car.CarRemoteDeviceManager#FLAG_OCCUPANT_ZONE_CONNECTION_READY:
    Found overlapping flag constant values: `FLAG_OCCUPANT_ZONE_CONNECTION_READY` with value 4 (0x4) and overlapping flag value 4 (0x4) from `FLAG_CLIENT_SAME_SIGNATURE`


ParcelConstructor: android.car.content.pm.AppBlockingPackageInfo#AppBlockingPackageInfo(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.content.pm.AppBlockingPackageInfo
ParcelConstructor: android.car.content.pm.CarAppBlockingPolicy#CarAppBlockingPolicy(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.content.pm.CarAppBlockingPolicy
ParcelConstructor: android.car.diagnostic.CarDiagnosticEvent#CarDiagnosticEvent(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.diagnostic.CarDiagnosticEvent
ParcelConstructor: android.car.occupantconnection.Payload#Payload(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.occupantconnection.Payload
ParcelConstructor: android.car.storagemonitoring.IoStats#IoStats(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.storagemonitoring.IoStats
ParcelConstructor: android.car.storagemonitoring.IoStatsEntry#IoStatsEntry(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.storagemonitoring.IoStatsEntry
ParcelConstructor: android.car.storagemonitoring.IoStatsEntry.Metrics#Metrics(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.storagemonitoring.IoStatsEntry.Metrics
ParcelConstructor: android.car.storagemonitoring.LifetimeWriteInfo#LifetimeWriteInfo(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.storagemonitoring.LifetimeWriteInfo
ParcelConstructor: android.car.storagemonitoring.WearEstimate#WearEstimate(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.storagemonitoring.WearEstimate
ParcelConstructor: android.car.storagemonitoring.WearEstimateChange#WearEstimateChange(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.storagemonitoring.WearEstimateChange
ParcelConstructor: android.car.trust.TrustedDeviceInfo#TrustedDeviceInfo(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.car.trust.TrustedDeviceInfo


ProtectedMember: android.car.AoapService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]):
    Protected methods not allowed; must be public: method android.car.AoapService.dump(java.io.FileDescriptor,java.io.PrintWriter,String[])}
ProtectedMember: android.car.cluster.renderer.InstrumentClusterRenderer#createNavigationRenderer():
    Protected methods not allowed; must be public: method android.car.cluster.renderer.InstrumentClusterRenderer.createNavigationRenderer()}
ProtectedMember: android.car.cluster.renderer.InstrumentClusterRenderingService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]):
    Protected methods not allowed; must be public: method android.car.cluster.renderer.InstrumentClusterRenderingService.dump(java.io.FileDescriptor,java.io.PrintWriter,String[])}
ProtectedMember: android.car.cluster.renderer.InstrumentClusterRenderingService#startNavigationActivity(android.content.ComponentName):
    Protected methods not allowed; must be public: method android.car.cluster.renderer.InstrumentClusterRenderingService.startNavigationActivity(android.content.ComponentName)}
ProtectedMember: android.car.content.pm.CarAppBlockingPolicyService#getAppBlockingPolicy():
    Protected methods not allowed; must be public: method android.car.content.pm.CarAppBlockingPolicyService.getAppBlockingPolicy()}
ProtectedMember: android.car.occupantconnection.AbstractReceiverService#acceptConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    Protected methods not allowed; must be public: method android.car.occupantconnection.AbstractReceiverService.acceptConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo)}
ProtectedMember: android.car.occupantconnection.AbstractReceiverService#forwardPayload(android.car.CarOccupantZoneManager.OccupantZoneInfo, String, android.car.occupantconnection.Payload):
    Protected methods not allowed; must be public: method android.car.occupantconnection.AbstractReceiverService.forwardPayload(android.car.CarOccupantZoneManager.OccupantZoneInfo,String,android.car.occupantconnection.Payload)}
ProtectedMember: android.car.occupantconnection.AbstractReceiverService#getAllReceiverEndpoints():
    Protected methods not allowed; must be public: method android.car.occupantconnection.AbstractReceiverService.getAllReceiverEndpoints()}
ProtectedMember: android.car.occupantconnection.AbstractReceiverService#onConnected(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    Protected methods not allowed; must be public: method android.car.occupantconnection.AbstractReceiverService.onConnected(android.car.CarOccupantZoneManager.OccupantZoneInfo)}
ProtectedMember: android.car.occupantconnection.AbstractReceiverService#onConnectionCanceled(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    Protected methods not allowed; must be public: method android.car.occupantconnection.AbstractReceiverService.onConnectionCanceled(android.car.CarOccupantZoneManager.OccupantZoneInfo)}
ProtectedMember: android.car.occupantconnection.AbstractReceiverService#onConnectionInitiated(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    Protected methods not allowed; must be public: method android.car.occupantconnection.AbstractReceiverService.onConnectionInitiated(android.car.CarOccupantZoneManager.OccupantZoneInfo)}
ProtectedMember: android.car.occupantconnection.AbstractReceiverService#onDisconnected(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    Protected methods not allowed; must be public: method android.car.occupantconnection.AbstractReceiverService.onDisconnected(android.car.CarOccupantZoneManager.OccupantZoneInfo)}
ProtectedMember: android.car.occupantconnection.AbstractReceiverService#onPayloadReceived(android.car.CarOccupantZoneManager.OccupantZoneInfo, android.car.occupantconnection.Payload):
    Protected methods not allowed; must be public: method android.car.occupantconnection.AbstractReceiverService.onPayloadReceived(android.car.CarOccupantZoneManager.OccupantZoneInfo,android.car.occupantconnection.Payload)}
ProtectedMember: android.car.occupantconnection.AbstractReceiverService#onReceiverRegistered(String):
    Protected methods not allowed; must be public: method android.car.occupantconnection.AbstractReceiverService.onReceiverRegistered(String)}
ProtectedMember: android.car.occupantconnection.AbstractReceiverService#rejectConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo, int):
    Protected methods not allowed; must be public: method android.car.occupantconnection.AbstractReceiverService.rejectConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo,int)}
ProtectedMember: android.car.occupantconnection.Payload#deserialize(android.os.Parcel):
    Protected methods not allowed; must be public: method android.car.occupantconnection.Payload.deserialize(android.os.Parcel)}
ProtectedMember: android.car.occupantconnection.Payload#serialize(android.os.Parcel, int):
    Protected methods not allowed; must be public: method android.car.occupantconnection.Payload.serialize(android.os.Parcel,int)}
ProtectedMember: android.car.occupantconnection.Payload#serializeNullPayload(android.os.Parcel):
    Protected methods not allowed; must be public: method android.car.occupantconnection.Payload.serializeNullPayload(android.os.Parcel)}
ProtectedMember: android.car.view.MirroredSurfaceView#onAttachedToWindow():
    Protected methods not allowed; must be public: method android.car.view.MirroredSurfaceView.onAttachedToWindow()}
ProtectedMember: android.car.view.MirroredSurfaceView#onDetachedFromWindow():
    Protected methods not allowed; must be public: method android.car.view.MirroredSurfaceView.onDetachedFromWindow()}
ProtectedMember: android.car.vms.VmsPublisherClientService#onVmsPublisherServiceReady():
    Protected methods not allowed; must be public: method android.car.vms.VmsPublisherClientService.onVmsPublisherServiceReady()}


PublicTypedef: android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.Status:
    Don't expose @IntDef: Status must be hidden.
PublicTypedef: android.car.diagnostic.CarDiagnosticEvent.FuelType.Type:
    Don't expose @IntDef: Type must be hidden.
PublicTypedef: android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.Status:
    Don't expose @IntDef: Status must be hidden.
PublicTypedef: android.car.diagnostic.CarDiagnosticManager.FrameType:
    Don't expose @IntDef: FrameType must be hidden.


RegistrationName: android.car.CarProjectionManager#registerProjectionListener(android.car.CarProjectionManager.CarProjectionListener, int):
    Listener methods should be named add/remove; was registerProjectionListener
RegistrationName: android.car.CarProjectionManager#registerProjectionStatusListener(android.car.CarProjectionManager.ProjectionStatusListener):
    Listener methods should be named add/remove; was registerProjectionStatusListener
RegistrationName: android.car.CarProjectionManager#unregisterProjectionListener():
    Listener methods should be named add/remove; was unregisterProjectionListener
RegistrationName: android.car.CarProjectionManager#unregisterProjectionStatusListener(android.car.CarProjectionManager.ProjectionStatusListener):
    Listener methods should be named add/remove; was unregisterProjectionStatusListener
RegistrationName: android.car.diagnostic.CarDiagnosticManager#registerListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener, int, int):
    Listener methods should be named add/remove; was registerListener
RegistrationName: android.car.diagnostic.CarDiagnosticManager#unregisterListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener):
    Listener methods should be named add/remove; was unregisterListener
RegistrationName: android.car.drivingstate.CarDrivingStateManager#registerListener(android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener):
    Listener methods should be named add/remove; was registerListener
RegistrationName: android.car.drivingstate.CarDrivingStateManager#unregisterListener():
    Listener methods should be named add/remove; was unregisterListener
RegistrationName: android.car.storagemonitoring.CarStorageMonitoringManager#registerListener(android.car.storagemonitoring.CarStorageMonitoringManager.IoStatsListener):
    Listener methods should be named add/remove; was registerListener
RegistrationName: android.car.storagemonitoring.CarStorageMonitoringManager#unregisterListener(android.car.storagemonitoring.CarStorageMonitoringManager.IoStatsListener):
    Listener methods should be named add/remove; was unregisterListener


RethrowRemoteException: android.car.occupantconnection.AbstractReceiverService#forwardPayload(android.car.CarOccupantZoneManager.OccupantZoneInfo, String, android.car.occupantconnection.Payload):
    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)


SamShouldBeLast: android.car.CarProjectionManager#registerProjectionListener(android.car.CarProjectionManager.CarProjectionListener, int):
    SAM-compatible parameters (such as parameter 1, "listener", in android.car.CarProjectionManager.registerProjectionListener) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.car.diagnostic.CarDiagnosticManager#registerListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener, int, int):
    SAM-compatible parameters (such as parameter 1, "listener", in android.car.diagnostic.CarDiagnosticManager.registerListener) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.car.media.CarMediaManager#addMediaSourceListener(android.car.media.CarMediaManager.MediaSourceChangedListener, int):
    SAM-compatible parameters (such as parameter 1, "callback", in android.car.media.CarMediaManager.addMediaSourceListener) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.car.media.CarMediaManager#removeMediaSourceListener(android.car.media.CarMediaManager.MediaSourceChangedListener, int):
    SAM-compatible parameters (such as parameter 1, "callback", in android.car.media.CarMediaManager.removeMediaSourceListener) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions


ServiceName: android.car.Car#CAR_DRIVING_STATE_SERVICE:
    Inconsistent service value; expected `CAR_DRIVING_STATE`, was `drivingstate`
ServiceName: android.car.Car#CAR_TRUST_AGENT_ENROLLMENT_SERVICE:
    Inconsistent service value; expected `CAR_TRUST_AGENT_ENROLLMENT`, was `trust_enroll`
ServiceName: android.car.Car#CAR_USER_SERVICE:
    Inconsistent service value; expected `CAR_USER`, was `car_user_service`
ServiceName: android.car.Car#PERMISSION_CAR_TEST_SERVICE:
    Inconsistent service value; expected `PERMISSION_CAR_TEST`, was `android.car.permission.CAR_TEST_SERVICE`
ServiceName: android.car.Car#TEST_SERVICE:
    Inconsistent service value; expected `TEST`, was `car-service-test`
ServiceName: android.car.Car#VMS_SUBSCRIBER_SERVICE:
    Inconsistent service value; expected `VMS_SUBSCRIBER`, was `vehicle_map_subscriber_service`


StartWithLower: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#EGROrVVT:
    Non-static field EGROrVVT must be named using fooBar style
StartWithLower: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#NMHCCatalyst:
    Non-static field NMHCCatalyst must be named using fooBar style
StartWithLower: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#NOxSCR:
    Non-static field NOxSCR must be named using fooBar style
StartWithLower: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#PMFilter:
    Non-static field PMFilter must be named using fooBar style
StartWithLower: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#ACRefrigerant:
    Non-static field ACRefrigerant must be named using fooBar style
StartWithLower: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#EGR:
    Non-static field EGR must be named using fooBar style


StaticFinalBuilder: android.car.diagnostic.CarDiagnosticEvent.Builder:
    Builder must be final: android.car.diagnostic.CarDiagnosticEvent.Builder
StaticFinalBuilder: android.car.hardware.CarPropertyConfig.Builder:
    Builder must be final: android.car.hardware.CarPropertyConfig.Builder


UnflaggedApi: android.car.AoapService:
    New API must be flagged with @FlaggedApi: class android.car.AoapService
UnflaggedApi: android.car.AoapService#AoapService():
    New API must be flagged with @FlaggedApi: constructor android.car.AoapService()
UnflaggedApi: android.car.AoapService#RESULT_DEVICE_NOT_SUPPORTED:
    New API must be flagged with @FlaggedApi: field android.car.AoapService.RESULT_DEVICE_NOT_SUPPORTED
UnflaggedApi: android.car.AoapService#RESULT_DO_NOT_SWITCH_TO_AOAP:
    New API must be flagged with @FlaggedApi: field android.car.AoapService.RESULT_DO_NOT_SWITCH_TO_AOAP
UnflaggedApi: android.car.AoapService#RESULT_OK:
    New API must be flagged with @FlaggedApi: field android.car.AoapService.RESULT_OK
UnflaggedApi: android.car.AoapService#canSwitchToAoap(android.hardware.usb.UsbDevice):
    New API must be flagged with @FlaggedApi: method android.car.AoapService.canSwitchToAoap(android.hardware.usb.UsbDevice)
UnflaggedApi: android.car.AoapService#isDeviceSupported(android.hardware.usb.UsbDevice):
    New API must be flagged with @FlaggedApi: method android.car.AoapService.isDeviceSupported(android.hardware.usb.UsbDevice)
UnflaggedApi: android.car.AoapService#onBind(android.content.Intent):
    New API must be flagged with @FlaggedApi: method android.car.AoapService.onBind(android.content.Intent)
UnflaggedApi: android.car.Car#ACCESS_PRIVATE_DISPLAY_ID:
    New API must be flagged with @FlaggedApi: field android.car.Car.ACCESS_PRIVATE_DISPLAY_ID
UnflaggedApi: android.car.Car#CAR_ACTIVITY_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_ACTIVITY_SERVICE
UnflaggedApi: android.car.Car#CAR_BUGREPORT_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_BUGREPORT_SERVICE
UnflaggedApi: android.car.Car#CAR_DEVICE_POLICY_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_DEVICE_POLICY_SERVICE
UnflaggedApi: android.car.Car#CAR_DRIVING_STATE_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_DRIVING_STATE_SERVICE
UnflaggedApi: android.car.Car#CAR_EVS_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_EVS_SERVICE
UnflaggedApi: android.car.Car#CAR_EXTRA_CLUSTER_ACTIVITY_STATE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_EXTRA_CLUSTER_ACTIVITY_STATE
UnflaggedApi: android.car.Car#CAR_INPUT_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_INPUT_SERVICE
UnflaggedApi: android.car.Car#CAR_MEDIA_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_MEDIA_SERVICE
UnflaggedApi: android.car.Car#CAR_OCCUPANT_CONNECTION_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_OCCUPANT_CONNECTION_SERVICE
UnflaggedApi: android.car.Car#CAR_PERFORMANCE_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_PERFORMANCE_SERVICE
UnflaggedApi: android.car.Car#CAR_REMOTEACCESS_REMOTE_TASK_CLIENT_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_REMOTEACCESS_REMOTE_TASK_CLIENT_SERVICE
UnflaggedApi: android.car.Car#CAR_REMOTE_ACCESS_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_REMOTE_ACCESS_SERVICE
UnflaggedApi: android.car.Car#CAR_REMOTE_DEVICE_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_REMOTE_DEVICE_SERVICE
UnflaggedApi: android.car.Car#CAR_TELEMETRY_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_TELEMETRY_SERVICE
UnflaggedApi: android.car.Car#CAR_USER_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.CAR_USER_SERVICE
UnflaggedApi: android.car.Car#DIAGNOSTIC_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.DIAGNOSTIC_SERVICE
UnflaggedApi: android.car.Car#FEATURE_REQUEST_ALREADY_IN_THE_STATE:
    New API must be flagged with @FlaggedApi: field android.car.Car.FEATURE_REQUEST_ALREADY_IN_THE_STATE
UnflaggedApi: android.car.Car#FEATURE_REQUEST_MANDATORY:
    New API must be flagged with @FlaggedApi: field android.car.Car.FEATURE_REQUEST_MANDATORY
UnflaggedApi: android.car.Car#FEATURE_REQUEST_NOT_EXISTING:
    New API must be flagged with @FlaggedApi: field android.car.Car.FEATURE_REQUEST_NOT_EXISTING
UnflaggedApi: android.car.Car#FEATURE_REQUEST_SUCCESS:
    New API must be flagged with @FlaggedApi: field android.car.Car.FEATURE_REQUEST_SUCCESS
UnflaggedApi: android.car.Car#OCCUPANT_AWARENESS_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.OCCUPANT_AWARENESS_SERVICE
UnflaggedApi: android.car.Car#PERMISSION_ACCESS_MIRRORRED_SURFACE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_ACCESS_MIRRORRED_SURFACE
UnflaggedApi: android.car.Car#PERMISSION_ADJUST_RANGE_REMAINING:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_ADJUST_RANGE_REMAINING
UnflaggedApi: android.car.Car#PERMISSION_CAR_DIAGNOSTIC_CLEAR:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_DIAGNOSTIC_CLEAR
UnflaggedApi: android.car.Car#PERMISSION_CAR_DIAGNOSTIC_READ_ALL:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_DIAGNOSTIC_READ_ALL
UnflaggedApi: android.car.Car#PERMISSION_CAR_DRIVING_STATE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_DRIVING_STATE
UnflaggedApi: android.car.Car#PERMISSION_CAR_DYNAMICS_STATE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_DYNAMICS_STATE
UnflaggedApi: android.car.Car#PERMISSION_CAR_ENGINE_DETAILED:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_ENGINE_DETAILED
UnflaggedApi: android.car.Car#PERMISSION_CAR_EPOCH_TIME:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_EPOCH_TIME
UnflaggedApi: android.car.Car#PERMISSION_CAR_INSTRUMENT_CLUSTER_CONTROL:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_INSTRUMENT_CLUSTER_CONTROL
UnflaggedApi: android.car.Car#PERMISSION_CAR_MONITOR_INPUT:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_MONITOR_INPUT
UnflaggedApi: android.car.Car#PERMISSION_CAR_POWER:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_POWER
UnflaggedApi: android.car.Car#PERMISSION_CAR_PROJECTION:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_PROJECTION
UnflaggedApi: android.car.Car#PERMISSION_CAR_PROJECTION_STATUS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_PROJECTION_STATUS
UnflaggedApi: android.car.Car#PERMISSION_CAR_TEST_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_TEST_SERVICE
UnflaggedApi: android.car.Car#PERMISSION_CAR_UX_RESTRICTIONS_CONFIGURATION:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CAR_UX_RESTRICTIONS_CONFIGURATION
UnflaggedApi: android.car.Car#PERMISSION_COLLECT_CAR_WATCHDOG_METRICS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_COLLECT_CAR_WATCHDOG_METRICS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_ADAS_SETTINGS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_ADAS_SETTINGS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_ADAS_STATES:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_ADAS_STATES
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_APP_BLOCKING:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_APP_BLOCKING
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_AIRBAGS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_AIRBAGS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_APP_LAUNCH:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_APP_LAUNCH
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_CLIMATE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_CLIMATE
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_DOORS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_DOORS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_EVS_ACTIVITY:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_EVS_ACTIVITY
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_FEATURES:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_FEATURES
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_MIRRORS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_MIRRORS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_POWER_POLICY:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_POWER_POLICY
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_SEATS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_SEATS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_WATCHDOG_CONFIG:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_WATCHDOG_CONFIG
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_CAR_WINDOWS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_CAR_WINDOWS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_DRIVER_MONITORING_SETTINGS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_DRIVER_MONITORING_SETTINGS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_ENERGY_PORTS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_ENERGY_PORTS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_EXTERIOR_LIGHTS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_EXTERIOR_LIGHTS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_GLOVE_BOX:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_GLOVE_BOX
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_POWERTRAIN:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_POWERTRAIN
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_REMOTE_ACCESS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_REMOTE_ACCESS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_SHUTDOWN_PROCESS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_SHUTDOWN_PROCESS
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_STEERING_WHEEL:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_STEERING_WHEEL
UnflaggedApi: android.car.Car#PERMISSION_CONTROL_WINDSHIELD_WIPERS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_CONTROL_WINDSHIELD_WIPERS
UnflaggedApi: android.car.Car#PERMISSION_EXTERIOR_LIGHTS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_EXTERIOR_LIGHTS
UnflaggedApi: android.car.Car#PERMISSION_MANAGE_CAR_SYSTEM_UI:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_MANAGE_CAR_SYSTEM_UI
UnflaggedApi: android.car.Car#PERMISSION_MANAGE_OCCUPANT_CONNECTION:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_MANAGE_OCCUPANT_CONNECTION
UnflaggedApi: android.car.Car#PERMISSION_MANAGE_OCCUPANT_ZONE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_MANAGE_OCCUPANT_ZONE
UnflaggedApi: android.car.Car#PERMISSION_MANAGE_REMOTE_DEVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_MANAGE_REMOTE_DEVICE
UnflaggedApi: android.car.Car#PERMISSION_MANAGE_THREAD_PRIORITY:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_MANAGE_THREAD_PRIORITY
UnflaggedApi: android.car.Car#PERMISSION_MILEAGE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_MILEAGE
UnflaggedApi: android.car.Car#PERMISSION_MIRROR_DISPLAY:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_MIRROR_DISPLAY
UnflaggedApi: android.car.Car#PERMISSION_MONITOR_CAR_EVS_STATUS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_MONITOR_CAR_EVS_STATUS
UnflaggedApi: android.car.Car#PERMISSION_READ_ADAS_SETTINGS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_READ_ADAS_SETTINGS
UnflaggedApi: android.car.Car#PERMISSION_READ_ADAS_STATES:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_READ_ADAS_STATES
UnflaggedApi: android.car.Car#PERMISSION_READ_CAR_OCCUPANT_AWARENESS_STATE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_READ_CAR_OCCUPANT_AWARENESS_STATE
UnflaggedApi: android.car.Car#PERMISSION_READ_CAR_VENDOR_PERMISSION_INFO:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_READ_CAR_VENDOR_PERMISSION_INFO
UnflaggedApi: android.car.Car#PERMISSION_READ_DRIVER_MONITORING_SETTINGS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_READ_DRIVER_MONITORING_SETTINGS
UnflaggedApi: android.car.Car#PERMISSION_READ_DRIVER_MONITORING_STATES:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_READ_DRIVER_MONITORING_STATES
UnflaggedApi: android.car.Car#PERMISSION_READ_WINDSHIELD_WIPERS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_READ_WINDSHIELD_WIPERS
UnflaggedApi: android.car.Car#PERMISSION_RECEIVE_CAR_AUDIO_DUCKING_EVENTS:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_RECEIVE_CAR_AUDIO_DUCKING_EVENTS
UnflaggedApi: android.car.Car#PERMISSION_REGISTER_CAR_SYSTEM_UI_PROXY:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_REGISTER_CAR_SYSTEM_UI_PROXY
UnflaggedApi: android.car.Car#PERMISSION_REQUEST_CAR_EVS_ACTIVITY:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_REQUEST_CAR_EVS_ACTIVITY
UnflaggedApi: android.car.Car#PERMISSION_STORAGE_MONITORING:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_STORAGE_MONITORING
UnflaggedApi: android.car.Car#PERMISSION_TEMPLATE_RENDERER:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_TEMPLATE_RENDERER
UnflaggedApi: android.car.Car#PERMISSION_TIRES:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_TIRES
UnflaggedApi: android.car.Car#PERMISSION_USE_CAR_EVS_CAMERA:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_USE_CAR_EVS_CAMERA
UnflaggedApi: android.car.Car#PERMISSION_USE_CAR_TELEMETRY_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_USE_CAR_TELEMETRY_SERVICE
UnflaggedApi: android.car.Car#PERMISSION_USE_CAR_WATCHDOG:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_USE_CAR_WATCHDOG
UnflaggedApi: android.car.Car#PERMISSION_VENDOR_EXTENSION:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_VENDOR_EXTENSION
UnflaggedApi: android.car.Car#PERMISSION_VMS_PUBLISHER:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_VMS_PUBLISHER
UnflaggedApi: android.car.Car#PERMISSION_VMS_SUBSCRIBER:
    New API must be flagged with @FlaggedApi: field android.car.Car.PERMISSION_VMS_SUBSCRIBER
UnflaggedApi: android.car.Car#PROJECTION_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.PROJECTION_SERVICE
UnflaggedApi: android.car.Car#STORAGE_MONITORING_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.STORAGE_MONITORING_SERVICE
UnflaggedApi: android.car.Car#TEST_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.TEST_SERVICE
UnflaggedApi: android.car.Car#VEHICLE_MAP_SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.Car.VEHICLE_MAP_SERVICE
UnflaggedApi: android.car.Car#disableFeature(String):
    New API must be flagged with @FlaggedApi: method android.car.Car.disableFeature(String)
UnflaggedApi: android.car.Car#enableFeature(String):
    New API must be flagged with @FlaggedApi: method android.car.Car.enableFeature(String)
UnflaggedApi: android.car.Car#getAllEnabledFeatures():
    New API must be flagged with @FlaggedApi: method android.car.Car.getAllEnabledFeatures()
UnflaggedApi: android.car.Car#getAllPendingDisabledFeatures():
    New API must be flagged with @FlaggedApi: method android.car.Car.getAllPendingDisabledFeatures()
UnflaggedApi: android.car.Car#getAllPendingEnabledFeatures():
    New API must be flagged with @FlaggedApi: method android.car.Car.getAllPendingEnabledFeatures()
UnflaggedApi: android.car.CarBugreportManager:
    New API must be flagged with @FlaggedApi: class android.car.CarBugreportManager
UnflaggedApi: android.car.CarBugreportManager#cancelBugreport():
    New API must be flagged with @FlaggedApi: method android.car.CarBugreportManager.cancelBugreport()
UnflaggedApi: android.car.CarBugreportManager#requestBugreport(android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, android.car.CarBugreportManager.CarBugreportManagerCallback):
    New API must be flagged with @FlaggedApi: method android.car.CarBugreportManager.requestBugreport(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.car.CarBugreportManager.CarBugreportManagerCallback)
UnflaggedApi: android.car.CarBugreportManager.CarBugreportManagerCallback:
    New API must be flagged with @FlaggedApi: class android.car.CarBugreportManager.CarBugreportManagerCallback
UnflaggedApi: android.car.CarBugreportManager.CarBugreportManagerCallback#CAR_BUGREPORT_DUMPSTATE_CONNECTION_FAILED:
    New API must be flagged with @FlaggedApi: field android.car.CarBugreportManager.CarBugreportManagerCallback.CAR_BUGREPORT_DUMPSTATE_CONNECTION_FAILED
UnflaggedApi: android.car.CarBugreportManager.CarBugreportManagerCallback#CAR_BUGREPORT_DUMPSTATE_FAILED:
    New API must be flagged with @FlaggedApi: field android.car.CarBugreportManager.CarBugreportManagerCallback.CAR_BUGREPORT_DUMPSTATE_FAILED
UnflaggedApi: android.car.CarBugreportManager.CarBugreportManagerCallback#CAR_BUGREPORT_IN_PROGRESS:
    New API must be flagged with @FlaggedApi: field android.car.CarBugreportManager.CarBugreportManagerCallback.CAR_BUGREPORT_IN_PROGRESS
UnflaggedApi: android.car.CarBugreportManager.CarBugreportManagerCallback#CAR_BUGREPORT_SERVICE_NOT_AVAILABLE:
    New API must be flagged with @FlaggedApi: field android.car.CarBugreportManager.CarBugreportManagerCallback.CAR_BUGREPORT_SERVICE_NOT_AVAILABLE
UnflaggedApi: android.car.CarBugreportManager.CarBugreportManagerCallback#CarBugreportManagerCallback():
    New API must be flagged with @FlaggedApi: constructor android.car.CarBugreportManager.CarBugreportManagerCallback()
UnflaggedApi: android.car.CarBugreportManager.CarBugreportManagerCallback#onError(int):
    New API must be flagged with @FlaggedApi: method android.car.CarBugreportManager.CarBugreportManagerCallback.onError(int)
UnflaggedApi: android.car.CarBugreportManager.CarBugreportManagerCallback#onFinished():
    New API must be flagged with @FlaggedApi: method android.car.CarBugreportManager.CarBugreportManagerCallback.onFinished()
UnflaggedApi: android.car.CarBugreportManager.CarBugreportManagerCallback#onProgress(float):
    New API must be flagged with @FlaggedApi: method android.car.CarBugreportManager.CarBugreportManagerCallback.onProgress(float)
UnflaggedApi: android.car.CarOccupantZoneManager#USER_ASSIGNMENT_RESULT_FAIL_ALREADY_ASSIGNED:
    New API must be flagged with @FlaggedApi: field android.car.CarOccupantZoneManager.USER_ASSIGNMENT_RESULT_FAIL_ALREADY_ASSIGNED
UnflaggedApi: android.car.CarOccupantZoneManager#USER_ASSIGNMENT_RESULT_FAIL_DRIVER_ZONE:
    New API must be flagged with @FlaggedApi: field android.car.CarOccupantZoneManager.USER_ASSIGNMENT_RESULT_FAIL_DRIVER_ZONE
UnflaggedApi: android.car.CarOccupantZoneManager#USER_ASSIGNMENT_RESULT_FAIL_NON_VISIBLE_USER:
    New API must be flagged with @FlaggedApi: field android.car.CarOccupantZoneManager.USER_ASSIGNMENT_RESULT_FAIL_NON_VISIBLE_USER
UnflaggedApi: android.car.CarOccupantZoneManager#USER_ASSIGNMENT_RESULT_OK:
    New API must be flagged with @FlaggedApi: field android.car.CarOccupantZoneManager.USER_ASSIGNMENT_RESULT_OK
UnflaggedApi: android.car.CarOccupantZoneManager#assignVisibleUserToOccupantZone(android.car.CarOccupantZoneManager.OccupantZoneInfo, android.os.UserHandle):
    New API must be flagged with @FlaggedApi: method android.car.CarOccupantZoneManager.assignVisibleUserToOccupantZone(android.car.CarOccupantZoneManager.OccupantZoneInfo,android.os.UserHandle)
UnflaggedApi: android.car.CarOccupantZoneManager#getAudioZoneIdForOccupant(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.CarOccupantZoneManager.getAudioZoneIdForOccupant(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.CarOccupantZoneManager#getDisplayIdForDriver(int):
    New API must be flagged with @FlaggedApi: method android.car.CarOccupantZoneManager.getDisplayIdForDriver(int)
UnflaggedApi: android.car.CarOccupantZoneManager#getOccupantForAudioZoneId(int):
    New API must be flagged with @FlaggedApi: method android.car.CarOccupantZoneManager.getOccupantForAudioZoneId(int)
UnflaggedApi: android.car.CarOccupantZoneManager#getOccupantZoneForDisplayId(int):
    New API must be flagged with @FlaggedApi: method android.car.CarOccupantZoneManager.getOccupantZoneForDisplayId(int)
UnflaggedApi: android.car.CarOccupantZoneManager#unassignOccupantZone(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.CarOccupantZoneManager.unassignOccupantZone(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.CarProjectionManager:
    New API must be flagged with @FlaggedApi: class android.car.CarProjectionManager
UnflaggedApi: android.car.CarProjectionManager#KEY_EVENT_CALL_KEY_DOWN:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.KEY_EVENT_CALL_KEY_DOWN
UnflaggedApi: android.car.CarProjectionManager#KEY_EVENT_CALL_LONG_PRESS_KEY_DOWN:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.KEY_EVENT_CALL_LONG_PRESS_KEY_DOWN
UnflaggedApi: android.car.CarProjectionManager#KEY_EVENT_CALL_LONG_PRESS_KEY_UP:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.KEY_EVENT_CALL_LONG_PRESS_KEY_UP
UnflaggedApi: android.car.CarProjectionManager#KEY_EVENT_CALL_SHORT_PRESS_KEY_UP:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.KEY_EVENT_CALL_SHORT_PRESS_KEY_UP
UnflaggedApi: android.car.CarProjectionManager#KEY_EVENT_VOICE_SEARCH_KEY_DOWN:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.KEY_EVENT_VOICE_SEARCH_KEY_DOWN
UnflaggedApi: android.car.CarProjectionManager#KEY_EVENT_VOICE_SEARCH_LONG_PRESS_KEY_DOWN:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.KEY_EVENT_VOICE_SEARCH_LONG_PRESS_KEY_DOWN
UnflaggedApi: android.car.CarProjectionManager#KEY_EVENT_VOICE_SEARCH_LONG_PRESS_KEY_UP:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.KEY_EVENT_VOICE_SEARCH_LONG_PRESS_KEY_UP
UnflaggedApi: android.car.CarProjectionManager#KEY_EVENT_VOICE_SEARCH_SHORT_PRESS_KEY_UP:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.KEY_EVENT_VOICE_SEARCH_SHORT_PRESS_KEY_UP
UnflaggedApi: android.car.CarProjectionManager#addKeyEventHandler(java.util.Set<java.lang.Integer>, android.car.CarProjectionManager.ProjectionKeyEventHandler):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.addKeyEventHandler(java.util.Set<java.lang.Integer>,android.car.CarProjectionManager.ProjectionKeyEventHandler)
UnflaggedApi: android.car.CarProjectionManager#addKeyEventHandler(java.util.Set<java.lang.Integer>, java.util.concurrent.Executor, android.car.CarProjectionManager.ProjectionKeyEventHandler):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.addKeyEventHandler(java.util.Set<java.lang.Integer>,java.util.concurrent.Executor,android.car.CarProjectionManager.ProjectionKeyEventHandler)
UnflaggedApi: android.car.CarProjectionManager#getAvailableWifiChannels(int):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.getAvailableWifiChannels(int)
UnflaggedApi: android.car.CarProjectionManager#getProjectionOptions():
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.getProjectionOptions()
UnflaggedApi: android.car.CarProjectionManager#registerProjectionListener(android.car.CarProjectionManager.CarProjectionListener, int):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.registerProjectionListener(android.car.CarProjectionManager.CarProjectionListener,int)
UnflaggedApi: android.car.CarProjectionManager#registerProjectionRunner(android.content.Intent):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.registerProjectionRunner(android.content.Intent)
UnflaggedApi: android.car.CarProjectionManager#registerProjectionStatusListener(android.car.CarProjectionManager.ProjectionStatusListener):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.registerProjectionStatusListener(android.car.CarProjectionManager.ProjectionStatusListener)
UnflaggedApi: android.car.CarProjectionManager#releaseBluetoothProfileInhibit(android.bluetooth.BluetoothDevice, int):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.releaseBluetoothProfileInhibit(android.bluetooth.BluetoothDevice,int)
UnflaggedApi: android.car.CarProjectionManager#removeKeyEventHandler(android.car.CarProjectionManager.ProjectionKeyEventHandler):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.removeKeyEventHandler(android.car.CarProjectionManager.ProjectionKeyEventHandler)
UnflaggedApi: android.car.CarProjectionManager#requestBluetoothProfileInhibit(android.bluetooth.BluetoothDevice, int):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.requestBluetoothProfileInhibit(android.bluetooth.BluetoothDevice,int)
UnflaggedApi: android.car.CarProjectionManager#resetProjectionAccessPointCredentials():
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.resetProjectionAccessPointCredentials()
UnflaggedApi: android.car.CarProjectionManager#startProjectionAccessPoint(android.car.CarProjectionManager.ProjectionAccessPointCallback):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.startProjectionAccessPoint(android.car.CarProjectionManager.ProjectionAccessPointCallback)
UnflaggedApi: android.car.CarProjectionManager#stopProjectionAccessPoint():
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.stopProjectionAccessPoint()
UnflaggedApi: android.car.CarProjectionManager#unregisterProjectionListener():
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.unregisterProjectionListener()
UnflaggedApi: android.car.CarProjectionManager#unregisterProjectionRunner(android.content.Intent):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.unregisterProjectionRunner(android.content.Intent)
UnflaggedApi: android.car.CarProjectionManager#unregisterProjectionStatusListener(android.car.CarProjectionManager.ProjectionStatusListener):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.unregisterProjectionStatusListener(android.car.CarProjectionManager.ProjectionStatusListener)
UnflaggedApi: android.car.CarProjectionManager#updateProjectionStatus(android.car.projection.ProjectionStatus):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.updateProjectionStatus(android.car.projection.ProjectionStatus)
UnflaggedApi: android.car.CarProjectionManager.CarProjectionListener:
    New API must be flagged with @FlaggedApi: class android.car.CarProjectionManager.CarProjectionListener
UnflaggedApi: android.car.CarProjectionManager.CarProjectionListener#onVoiceAssistantRequest(boolean):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.CarProjectionListener.onVoiceAssistantRequest(boolean)
UnflaggedApi: android.car.CarProjectionManager.ProjectionAccessPointCallback:
    New API must be flagged with @FlaggedApi: class android.car.CarProjectionManager.ProjectionAccessPointCallback
UnflaggedApi: android.car.CarProjectionManager.ProjectionAccessPointCallback#ERROR_GENERIC:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.ProjectionAccessPointCallback.ERROR_GENERIC
UnflaggedApi: android.car.CarProjectionManager.ProjectionAccessPointCallback#ERROR_INCOMPATIBLE_MODE:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.ProjectionAccessPointCallback.ERROR_INCOMPATIBLE_MODE
UnflaggedApi: android.car.CarProjectionManager.ProjectionAccessPointCallback#ERROR_NO_CHANNEL:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.ProjectionAccessPointCallback.ERROR_NO_CHANNEL
UnflaggedApi: android.car.CarProjectionManager.ProjectionAccessPointCallback#ERROR_TETHERING_DISALLOWED:
    New API must be flagged with @FlaggedApi: field android.car.CarProjectionManager.ProjectionAccessPointCallback.ERROR_TETHERING_DISALLOWED
UnflaggedApi: android.car.CarProjectionManager.ProjectionAccessPointCallback#ProjectionAccessPointCallback():
    New API must be flagged with @FlaggedApi: constructor android.car.CarProjectionManager.ProjectionAccessPointCallback()
UnflaggedApi: android.car.CarProjectionManager.ProjectionAccessPointCallback#onFailed(int):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.ProjectionAccessPointCallback.onFailed(int)
UnflaggedApi: android.car.CarProjectionManager.ProjectionAccessPointCallback#onStarted(android.net.wifi.SoftApConfiguration):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.ProjectionAccessPointCallback.onStarted(android.net.wifi.SoftApConfiguration)
UnflaggedApi: android.car.CarProjectionManager.ProjectionAccessPointCallback#onStopped():
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.ProjectionAccessPointCallback.onStopped()
UnflaggedApi: android.car.CarProjectionManager.ProjectionKeyEventHandler:
    New API must be flagged with @FlaggedApi: class android.car.CarProjectionManager.ProjectionKeyEventHandler
UnflaggedApi: android.car.CarProjectionManager.ProjectionKeyEventHandler#onKeyEvent(int):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.ProjectionKeyEventHandler.onKeyEvent(int)
UnflaggedApi: android.car.CarProjectionManager.ProjectionStatusListener:
    New API must be flagged with @FlaggedApi: class android.car.CarProjectionManager.ProjectionStatusListener
UnflaggedApi: android.car.CarProjectionManager.ProjectionStatusListener#onProjectionStatusChanged(int, String, java.util.List<android.car.projection.ProjectionStatus>):
    New API must be flagged with @FlaggedApi: method android.car.CarProjectionManager.ProjectionStatusListener.onProjectionStatusChanged(int,String,java.util.List<android.car.projection.ProjectionStatus>)
UnflaggedApi: android.car.CarRemoteDeviceManager:
    New API must be flagged with @FlaggedApi: class android.car.CarRemoteDeviceManager
UnflaggedApi: android.car.CarRemoteDeviceManager#FLAG_CLIENT_INSTALLED:
    New API must be flagged with @FlaggedApi: field android.car.CarRemoteDeviceManager.FLAG_CLIENT_INSTALLED
UnflaggedApi: android.car.CarRemoteDeviceManager#FLAG_CLIENT_IN_FOREGROUND:
    New API must be flagged with @FlaggedApi: field android.car.CarRemoteDeviceManager.FLAG_CLIENT_IN_FOREGROUND
UnflaggedApi: android.car.CarRemoteDeviceManager#FLAG_CLIENT_RUNNING:
    New API must be flagged with @FlaggedApi: field android.car.CarRemoteDeviceManager.FLAG_CLIENT_RUNNING
UnflaggedApi: android.car.CarRemoteDeviceManager#FLAG_CLIENT_SAME_LONG_VERSION:
    New API must be flagged with @FlaggedApi: field android.car.CarRemoteDeviceManager.FLAG_CLIENT_SAME_LONG_VERSION
UnflaggedApi: android.car.CarRemoteDeviceManager#FLAG_CLIENT_SAME_SIGNATURE:
    New API must be flagged with @FlaggedApi: field android.car.CarRemoteDeviceManager.FLAG_CLIENT_SAME_SIGNATURE
UnflaggedApi: android.car.CarRemoteDeviceManager#FLAG_OCCUPANT_ZONE_CONNECTION_READY:
    New API must be flagged with @FlaggedApi: field android.car.CarRemoteDeviceManager.FLAG_OCCUPANT_ZONE_CONNECTION_READY
UnflaggedApi: android.car.CarRemoteDeviceManager#FLAG_OCCUPANT_ZONE_POWER_ON:
    New API must be flagged with @FlaggedApi: field android.car.CarRemoteDeviceManager.FLAG_OCCUPANT_ZONE_POWER_ON
UnflaggedApi: android.car.CarRemoteDeviceManager#FLAG_OCCUPANT_ZONE_SCREEN_UNLOCKED:
    New API must be flagged with @FlaggedApi: field android.car.CarRemoteDeviceManager.FLAG_OCCUPANT_ZONE_SCREEN_UNLOCKED
UnflaggedApi: android.car.CarRemoteDeviceManager#getEndpointPackageInfo(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.CarRemoteDeviceManager.getEndpointPackageInfo(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.CarRemoteDeviceManager#isOccupantZonePowerOn(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.CarRemoteDeviceManager.isOccupantZonePowerOn(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.CarRemoteDeviceManager#registerStateCallback(java.util.concurrent.Executor, android.car.CarRemoteDeviceManager.StateCallback):
    New API must be flagged with @FlaggedApi: method android.car.CarRemoteDeviceManager.registerStateCallback(java.util.concurrent.Executor,android.car.CarRemoteDeviceManager.StateCallback)
UnflaggedApi: android.car.CarRemoteDeviceManager#setOccupantZonePower(android.car.CarOccupantZoneManager.OccupantZoneInfo, boolean):
    New API must be flagged with @FlaggedApi: method android.car.CarRemoteDeviceManager.setOccupantZonePower(android.car.CarOccupantZoneManager.OccupantZoneInfo,boolean)
UnflaggedApi: android.car.CarRemoteDeviceManager#unregisterStateCallback():
    New API must be flagged with @FlaggedApi: method android.car.CarRemoteDeviceManager.unregisterStateCallback()
UnflaggedApi: android.car.CarRemoteDeviceManager.StateCallback:
    New API must be flagged with @FlaggedApi: class android.car.CarRemoteDeviceManager.StateCallback
UnflaggedApi: android.car.CarRemoteDeviceManager.StateCallback#onAppStateChanged(android.car.CarOccupantZoneManager.OccupantZoneInfo, int):
    New API must be flagged with @FlaggedApi: method android.car.CarRemoteDeviceManager.StateCallback.onAppStateChanged(android.car.CarOccupantZoneManager.OccupantZoneInfo,int)
UnflaggedApi: android.car.CarRemoteDeviceManager.StateCallback#onOccupantZoneStateChanged(android.car.CarOccupantZoneManager.OccupantZoneInfo, int):
    New API must be flagged with @FlaggedApi: method android.car.CarRemoteDeviceManager.StateCallback.onOccupantZoneStateChanged(android.car.CarOccupantZoneManager.OccupantZoneInfo,int)
UnflaggedApi: android.car.ResultCallback:
    New API must be flagged with @FlaggedApi: class android.car.ResultCallback
UnflaggedApi: android.car.ResultCallback#onResult(V):
    New API must be flagged with @FlaggedApi: method android.car.ResultCallback.onResult(V)
UnflaggedApi: android.car.SyncResultCallback:
    New API must be flagged with @FlaggedApi: class android.car.SyncResultCallback
UnflaggedApi: android.car.SyncResultCallback#SyncResultCallback():
    New API must be flagged with @FlaggedApi: constructor android.car.SyncResultCallback()
UnflaggedApi: android.car.SyncResultCallback#get():
    New API must be flagged with @FlaggedApi: method android.car.SyncResultCallback.get()
UnflaggedApi: android.car.SyncResultCallback#get(long, java.util.concurrent.TimeUnit):
    New API must be flagged with @FlaggedApi: method android.car.SyncResultCallback.get(long,java.util.concurrent.TimeUnit)
UnflaggedApi: android.car.SyncResultCallback#onResult(V):
    New API must be flagged with @FlaggedApi: method android.car.SyncResultCallback.onResult(V)
UnflaggedApi: android.car.VehicleAreaDoor:
    New API must be flagged with @FlaggedApi: class android.car.VehicleAreaDoor
UnflaggedApi: android.car.VehicleAreaDoor#DOOR_HOOD:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaDoor.DOOR_HOOD
UnflaggedApi: android.car.VehicleAreaDoor#DOOR_REAR:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaDoor.DOOR_REAR
UnflaggedApi: android.car.VehicleAreaDoor#DOOR_ROW_1_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaDoor.DOOR_ROW_1_LEFT
UnflaggedApi: android.car.VehicleAreaDoor#DOOR_ROW_1_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaDoor.DOOR_ROW_1_RIGHT
UnflaggedApi: android.car.VehicleAreaDoor#DOOR_ROW_2_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaDoor.DOOR_ROW_2_LEFT
UnflaggedApi: android.car.VehicleAreaDoor#DOOR_ROW_2_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaDoor.DOOR_ROW_2_RIGHT
UnflaggedApi: android.car.VehicleAreaDoor#DOOR_ROW_3_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaDoor.DOOR_ROW_3_LEFT
UnflaggedApi: android.car.VehicleAreaDoor#DOOR_ROW_3_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaDoor.DOOR_ROW_3_RIGHT
UnflaggedApi: android.car.VehicleAreaMirror:
    New API must be flagged with @FlaggedApi: class android.car.VehicleAreaMirror
UnflaggedApi: android.car.VehicleAreaMirror#MIRROR_DRIVER_CENTER:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaMirror.MIRROR_DRIVER_CENTER
UnflaggedApi: android.car.VehicleAreaMirror#MIRROR_DRIVER_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaMirror.MIRROR_DRIVER_LEFT
UnflaggedApi: android.car.VehicleAreaMirror#MIRROR_DRIVER_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaMirror.MIRROR_DRIVER_RIGHT
UnflaggedApi: android.car.VehicleAreaWindow:
    New API must be flagged with @FlaggedApi: class android.car.VehicleAreaWindow
UnflaggedApi: android.car.VehicleAreaWindow#WINDOW_FRONT_WINDSHIELD:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaWindow.WINDOW_FRONT_WINDSHIELD
UnflaggedApi: android.car.VehicleAreaWindow#WINDOW_REAR_WINDSHIELD:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaWindow.WINDOW_REAR_WINDSHIELD
UnflaggedApi: android.car.VehicleAreaWindow#WINDOW_ROOF_TOP_1:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaWindow.WINDOW_ROOF_TOP_1
UnflaggedApi: android.car.VehicleAreaWindow#WINDOW_ROOF_TOP_2:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaWindow.WINDOW_ROOF_TOP_2
UnflaggedApi: android.car.VehicleAreaWindow#WINDOW_ROW_1_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaWindow.WINDOW_ROW_1_LEFT
UnflaggedApi: android.car.VehicleAreaWindow#WINDOW_ROW_1_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaWindow.WINDOW_ROW_1_RIGHT
UnflaggedApi: android.car.VehicleAreaWindow#WINDOW_ROW_2_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaWindow.WINDOW_ROW_2_LEFT
UnflaggedApi: android.car.VehicleAreaWindow#WINDOW_ROW_2_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaWindow.WINDOW_ROW_2_RIGHT
UnflaggedApi: android.car.VehicleAreaWindow#WINDOW_ROW_3_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaWindow.WINDOW_ROW_3_LEFT
UnflaggedApi: android.car.VehicleAreaWindow#WINDOW_ROW_3_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleAreaWindow.WINDOW_ROW_3_RIGHT
UnflaggedApi: android.car.VehiclePropertyAccess:
    New API must be flagged with @FlaggedApi: class android.car.VehiclePropertyAccess
UnflaggedApi: android.car.VehiclePropertyAccess#NONE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyAccess.NONE
UnflaggedApi: android.car.VehiclePropertyAccess#READ:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyAccess.READ
UnflaggedApi: android.car.VehiclePropertyAccess#READ_WRITE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyAccess.READ_WRITE
UnflaggedApi: android.car.VehiclePropertyAccess#WRITE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyAccess.WRITE
UnflaggedApi: android.car.VehiclePropertyIds#ADAPTIVE_CRUISE_CONTROL_LEAD_VEHICLE_MEASURED_DISTANCE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.ADAPTIVE_CRUISE_CONTROL_LEAD_VEHICLE_MEASURED_DISTANCE
UnflaggedApi: android.car.VehiclePropertyIds#ADAPTIVE_CRUISE_CONTROL_TARGET_TIME_GAP:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.ADAPTIVE_CRUISE_CONTROL_TARGET_TIME_GAP
UnflaggedApi: android.car.VehiclePropertyIds#AUTOMATIC_EMERGENCY_BRAKING_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.AUTOMATIC_EMERGENCY_BRAKING_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#AUTOMATIC_EMERGENCY_BRAKING_STATE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.AUTOMATIC_EMERGENCY_BRAKING_STATE
UnflaggedApi: android.car.VehiclePropertyIds#BLIND_SPOT_WARNING_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.BLIND_SPOT_WARNING_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#BLIND_SPOT_WARNING_STATE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.BLIND_SPOT_WARNING_STATE
UnflaggedApi: android.car.VehiclePropertyIds#CRUISE_CONTROL_COMMAND:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.CRUISE_CONTROL_COMMAND
UnflaggedApi: android.car.VehiclePropertyIds#CRUISE_CONTROL_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.CRUISE_CONTROL_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#CRUISE_CONTROL_STATE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.CRUISE_CONTROL_STATE
UnflaggedApi: android.car.VehiclePropertyIds#CRUISE_CONTROL_TARGET_SPEED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.CRUISE_CONTROL_TARGET_SPEED
UnflaggedApi: android.car.VehiclePropertyIds#CRUISE_CONTROL_TYPE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.CRUISE_CONTROL_TYPE
UnflaggedApi: android.car.VehiclePropertyIds#DOOR_CHILD_LOCK_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.DOOR_CHILD_LOCK_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#EMERGENCY_LANE_KEEP_ASSIST_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.EMERGENCY_LANE_KEEP_ASSIST_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#EMERGENCY_LANE_KEEP_ASSIST_STATE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.EMERGENCY_LANE_KEEP_ASSIST_STATE
UnflaggedApi: android.car.VehiclePropertyIds#ENGINE_IDLE_AUTO_STOP_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.ENGINE_IDLE_AUTO_STOP_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#FORWARD_COLLISION_WARNING_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.FORWARD_COLLISION_WARNING_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#FORWARD_COLLISION_WARNING_STATE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.FORWARD_COLLISION_WARNING_STATE
UnflaggedApi: android.car.VehiclePropertyIds#GLOVE_BOX_DOOR_POS:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.GLOVE_BOX_DOOR_POS
UnflaggedApi: android.car.VehiclePropertyIds#GLOVE_BOX_LOCKED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.GLOVE_BOX_LOCKED
UnflaggedApi: android.car.VehiclePropertyIds#HANDS_ON_DETECTION_DRIVER_STATE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.HANDS_ON_DETECTION_DRIVER_STATE
UnflaggedApi: android.car.VehiclePropertyIds#HANDS_ON_DETECTION_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.HANDS_ON_DETECTION_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#HANDS_ON_DETECTION_WARNING:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.HANDS_ON_DETECTION_WARNING
UnflaggedApi: android.car.VehiclePropertyIds#HVAC_ELECTRIC_DEFROSTER_ON:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.HVAC_ELECTRIC_DEFROSTER_ON
UnflaggedApi: android.car.VehiclePropertyIds#LANE_CENTERING_ASSIST_COMMAND:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.LANE_CENTERING_ASSIST_COMMAND
UnflaggedApi: android.car.VehiclePropertyIds#LANE_CENTERING_ASSIST_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.LANE_CENTERING_ASSIST_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#LANE_CENTERING_ASSIST_STATE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.LANE_CENTERING_ASSIST_STATE
UnflaggedApi: android.car.VehiclePropertyIds#LANE_DEPARTURE_WARNING_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.LANE_DEPARTURE_WARNING_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#LANE_DEPARTURE_WARNING_STATE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.LANE_DEPARTURE_WARNING_STATE
UnflaggedApi: android.car.VehiclePropertyIds#LANE_KEEP_ASSIST_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.LANE_KEEP_ASSIST_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#LANE_KEEP_ASSIST_STATE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.LANE_KEEP_ASSIST_STATE
UnflaggedApi: android.car.VehiclePropertyIds#MIRROR_AUTO_FOLD_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.MIRROR_AUTO_FOLD_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#MIRROR_AUTO_TILT_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.MIRROR_AUTO_TILT_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#SEAT_AIRBAG_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.SEAT_AIRBAG_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#SEAT_CUSHION_SIDE_SUPPORT_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.SEAT_CUSHION_SIDE_SUPPORT_MOVE
UnflaggedApi: android.car.VehiclePropertyIds#SEAT_CUSHION_SIDE_SUPPORT_POS:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.SEAT_CUSHION_SIDE_SUPPORT_POS
UnflaggedApi: android.car.VehiclePropertyIds#SEAT_EASY_ACCESS_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.SEAT_EASY_ACCESS_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#SEAT_LUMBAR_VERTICAL_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.SEAT_LUMBAR_VERTICAL_MOVE
UnflaggedApi: android.car.VehiclePropertyIds#SEAT_LUMBAR_VERTICAL_POS:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.SEAT_LUMBAR_VERTICAL_POS
UnflaggedApi: android.car.VehiclePropertyIds#SEAT_WALK_IN_POS:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.SEAT_WALK_IN_POS
UnflaggedApi: android.car.VehiclePropertyIds#STEERING_WHEEL_DEPTH_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.STEERING_WHEEL_DEPTH_MOVE
UnflaggedApi: android.car.VehiclePropertyIds#STEERING_WHEEL_DEPTH_POS:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.STEERING_WHEEL_DEPTH_POS
UnflaggedApi: android.car.VehiclePropertyIds#STEERING_WHEEL_EASY_ACCESS_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.STEERING_WHEEL_EASY_ACCESS_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#STEERING_WHEEL_HEIGHT_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.STEERING_WHEEL_HEIGHT_MOVE
UnflaggedApi: android.car.VehiclePropertyIds#STEERING_WHEEL_HEIGHT_POS:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.STEERING_WHEEL_HEIGHT_POS
UnflaggedApi: android.car.VehiclePropertyIds#STEERING_WHEEL_LOCKED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.STEERING_WHEEL_LOCKED
UnflaggedApi: android.car.VehiclePropertyIds#STEERING_WHEEL_THEFT_LOCK_ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.STEERING_WHEEL_THEFT_LOCK_ENABLED
UnflaggedApi: android.car.VehiclePropertyIds#WINDSHIELD_WIPERS_PERIOD:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.WINDSHIELD_WIPERS_PERIOD
UnflaggedApi: android.car.VehiclePropertyIds#WINDSHIELD_WIPERS_STATE:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.WINDSHIELD_WIPERS_STATE
UnflaggedApi: android.car.VehiclePropertyIds#WINDSHIELD_WIPERS_SWITCH:
    New API must be flagged with @FlaggedApi: field android.car.VehiclePropertyIds.WINDSHIELD_WIPERS_SWITCH
UnflaggedApi: android.car.VehicleUnit#DEGREES:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.DEGREES
UnflaggedApi: android.car.VehicleUnit#HERTZ:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.HERTZ
UnflaggedApi: android.car.VehicleUnit#MILLIAMPERE:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.MILLIAMPERE
UnflaggedApi: android.car.VehicleUnit#MILLIVOLT:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.MILLIVOLT
UnflaggedApi: android.car.VehicleUnit#MILLIWATTS:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.MILLIWATTS
UnflaggedApi: android.car.VehicleUnit#MILLI_SECS:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.MILLI_SECS
UnflaggedApi: android.car.VehicleUnit#NANO_SECS:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.NANO_SECS
UnflaggedApi: android.car.VehicleUnit#PERCENTILE:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.PERCENTILE
UnflaggedApi: android.car.VehicleUnit#RPM:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.RPM
UnflaggedApi: android.car.VehicleUnit#SECS:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.SECS
UnflaggedApi: android.car.VehicleUnit#SHOULD_NOT_USE:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.SHOULD_NOT_USE
UnflaggedApi: android.car.VehicleUnit#YEAR:
    New API must be flagged with @FlaggedApi: field android.car.VehicleUnit.YEAR
UnflaggedApi: android.car.admin.CarDevicePolicyManager:
    New API must be flagged with @FlaggedApi: class android.car.admin.CarDevicePolicyManager
UnflaggedApi: android.car.admin.CarDevicePolicyManager#USER_TYPE_ADMIN:
    New API must be flagged with @FlaggedApi: field android.car.admin.CarDevicePolicyManager.USER_TYPE_ADMIN
UnflaggedApi: android.car.admin.CarDevicePolicyManager#USER_TYPE_GUEST:
    New API must be flagged with @FlaggedApi: field android.car.admin.CarDevicePolicyManager.USER_TYPE_GUEST
UnflaggedApi: android.car.admin.CarDevicePolicyManager#USER_TYPE_REGULAR:
    New API must be flagged with @FlaggedApi: field android.car.admin.CarDevicePolicyManager.USER_TYPE_REGULAR
UnflaggedApi: android.car.admin.CarDevicePolicyManager#createUser(String, int):
    New API must be flagged with @FlaggedApi: method android.car.admin.CarDevicePolicyManager.createUser(String,int)
UnflaggedApi: android.car.admin.CarDevicePolicyManager#removeUser(android.os.UserHandle):
    New API must be flagged with @FlaggedApi: method android.car.admin.CarDevicePolicyManager.removeUser(android.os.UserHandle)
UnflaggedApi: android.car.admin.CreateUserResult:
    New API must be flagged with @FlaggedApi: class android.car.admin.CreateUserResult
UnflaggedApi: android.car.admin.CreateUserResult#STATUS_FAILURE_GENERIC:
    New API must be flagged with @FlaggedApi: field android.car.admin.CreateUserResult.STATUS_FAILURE_GENERIC
UnflaggedApi: android.car.admin.CreateUserResult#STATUS_FAILURE_INVALID_ARGUMENTS:
    New API must be flagged with @FlaggedApi: field android.car.admin.CreateUserResult.STATUS_FAILURE_INVALID_ARGUMENTS
UnflaggedApi: android.car.admin.CreateUserResult#STATUS_SUCCESS:
    New API must be flagged with @FlaggedApi: field android.car.admin.CreateUserResult.STATUS_SUCCESS
UnflaggedApi: android.car.admin.CreateUserResult#getStatus():
    New API must be flagged with @FlaggedApi: method android.car.admin.CreateUserResult.getStatus()
UnflaggedApi: android.car.admin.CreateUserResult#getUserHandle():
    New API must be flagged with @FlaggedApi: method android.car.admin.CreateUserResult.getUserHandle()
UnflaggedApi: android.car.admin.CreateUserResult#isSuccess():
    New API must be flagged with @FlaggedApi: method android.car.admin.CreateUserResult.isSuccess()
UnflaggedApi: android.car.admin.RemoveUserResult:
    New API must be flagged with @FlaggedApi: class android.car.admin.RemoveUserResult
UnflaggedApi: android.car.admin.RemoveUserResult#STATUS_FAILURE_GENERIC:
    New API must be flagged with @FlaggedApi: field android.car.admin.RemoveUserResult.STATUS_FAILURE_GENERIC
UnflaggedApi: android.car.admin.RemoveUserResult#STATUS_FAILURE_INVALID_ARGUMENTS:
    New API must be flagged with @FlaggedApi: field android.car.admin.RemoveUserResult.STATUS_FAILURE_INVALID_ARGUMENTS
UnflaggedApi: android.car.admin.RemoveUserResult#STATUS_FAILURE_USER_DOES_NOT_EXIST:
    New API must be flagged with @FlaggedApi: field android.car.admin.RemoveUserResult.STATUS_FAILURE_USER_DOES_NOT_EXIST
UnflaggedApi: android.car.admin.RemoveUserResult#STATUS_SUCCESS:
    New API must be flagged with @FlaggedApi: field android.car.admin.RemoveUserResult.STATUS_SUCCESS
UnflaggedApi: android.car.admin.RemoveUserResult#STATUS_SUCCESS_LAST_ADMIN_REMOVED:
    New API must be flagged with @FlaggedApi: field android.car.admin.RemoveUserResult.STATUS_SUCCESS_LAST_ADMIN_REMOVED
UnflaggedApi: android.car.admin.RemoveUserResult#STATUS_SUCCESS_LAST_ADMIN_SET_EPHEMERAL:
    New API must be flagged with @FlaggedApi: field android.car.admin.RemoveUserResult.STATUS_SUCCESS_LAST_ADMIN_SET_EPHEMERAL
UnflaggedApi: android.car.admin.RemoveUserResult#STATUS_SUCCESS_SET_EPHEMERAL:
    New API must be flagged with @FlaggedApi: field android.car.admin.RemoveUserResult.STATUS_SUCCESS_SET_EPHEMERAL
UnflaggedApi: android.car.admin.RemoveUserResult#getStatus():
    New API must be flagged with @FlaggedApi: method android.car.admin.RemoveUserResult.getStatus()
UnflaggedApi: android.car.admin.RemoveUserResult#isSuccess():
    New API must be flagged with @FlaggedApi: method android.car.admin.RemoveUserResult.isSuccess()
UnflaggedApi: android.car.app.CarActivityManager:
    New API must be flagged with @FlaggedApi: class android.car.app.CarActivityManager
UnflaggedApi: android.car.app.CarActivityManager#RESULT_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.app.CarActivityManager.RESULT_FAILURE
UnflaggedApi: android.car.app.CarActivityManager#RESULT_INVALID_USER:
    New API must be flagged with @FlaggedApi: field android.car.app.CarActivityManager.RESULT_INVALID_USER
UnflaggedApi: android.car.app.CarActivityManager#RESULT_SUCCESS:
    New API must be flagged with @FlaggedApi: field android.car.app.CarActivityManager.RESULT_SUCCESS
UnflaggedApi: android.car.app.CarActivityManager#createDisplayMirroringToken(int):
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.createDisplayMirroringToken(int)
UnflaggedApi: android.car.app.CarActivityManager#createTaskMirroringToken(int):
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.createTaskMirroringToken(int)
UnflaggedApi: android.car.app.CarActivityManager#getCarTaskViewController(android.app.Activity, java.util.concurrent.Executor, android.car.app.CarTaskViewControllerCallback):
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.getCarTaskViewController(android.app.Activity,java.util.concurrent.Executor,android.car.app.CarTaskViewControllerCallback)
UnflaggedApi: android.car.app.CarActivityManager#getVisibleTasks():
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.getVisibleTasks()
UnflaggedApi: android.car.app.CarActivityManager#getVisibleTasks(int):
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.getVisibleTasks(int)
UnflaggedApi: android.car.app.CarActivityManager#isCarSystemUIProxyRegistered():
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.isCarSystemUIProxyRegistered()
UnflaggedApi: android.car.app.CarActivityManager#moveRootTaskToDisplay(int, int):
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.moveRootTaskToDisplay(int,int)
UnflaggedApi: android.car.app.CarActivityManager#registerCarSystemUIProxy(android.car.app.CarSystemUIProxy):
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.registerCarSystemUIProxy(android.car.app.CarSystemUIProxy)
UnflaggedApi: android.car.app.CarActivityManager#setPersistentActivitiesOnRootTask(java.util.List<android.content.ComponentName>, android.os.IBinder):
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.setPersistentActivitiesOnRootTask(java.util.List<android.content.ComponentName>,android.os.IBinder)
UnflaggedApi: android.car.app.CarActivityManager#setPersistentActivity(android.content.ComponentName, int, int):
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.setPersistentActivity(android.content.ComponentName,int,int)
UnflaggedApi: android.car.app.CarActivityManager#startUserPickerOnDisplay(int):
    New API must be flagged with @FlaggedApi: method android.car.app.CarActivityManager.startUserPickerOnDisplay(int)
UnflaggedApi: android.car.app.CarSystemUIProxy:
    New API must be flagged with @FlaggedApi: class android.car.app.CarSystemUIProxy
UnflaggedApi: android.car.app.CarSystemUIProxy#createControlledCarTaskView(android.car.app.CarTaskViewClient):
    New API must be flagged with @FlaggedApi: method android.car.app.CarSystemUIProxy.createControlledCarTaskView(android.car.app.CarTaskViewClient)
UnflaggedApi: android.car.app.CarTaskViewClient:
    New API must be flagged with @FlaggedApi: class android.car.app.CarTaskViewClient
UnflaggedApi: android.car.app.CarTaskViewClient#getCurrentBoundsOnScreen():
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewClient.getCurrentBoundsOnScreen()
UnflaggedApi: android.car.app.CarTaskViewClient#onTaskAppeared(android.app.ActivityManager.RunningTaskInfo, android.view.SurfaceControl):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewClient.onTaskAppeared(android.app.ActivityManager.RunningTaskInfo,android.view.SurfaceControl)
UnflaggedApi: android.car.app.CarTaskViewClient#onTaskInfoChanged(android.app.ActivityManager.RunningTaskInfo):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewClient.onTaskInfoChanged(android.app.ActivityManager.RunningTaskInfo)
UnflaggedApi: android.car.app.CarTaskViewClient#onTaskVanished(android.app.ActivityManager.RunningTaskInfo):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewClient.onTaskVanished(android.app.ActivityManager.RunningTaskInfo)
UnflaggedApi: android.car.app.CarTaskViewClient#setResizeBackgroundColor(android.view.SurfaceControl.Transaction, int):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewClient.setResizeBackgroundColor(android.view.SurfaceControl.Transaction,int)
UnflaggedApi: android.car.app.CarTaskViewController:
    New API must be flagged with @FlaggedApi: class android.car.app.CarTaskViewController
UnflaggedApi: android.car.app.CarTaskViewController#createControlledRemoteCarTaskView(android.car.app.ControlledRemoteCarTaskViewConfig, java.util.concurrent.Executor, android.car.app.ControlledRemoteCarTaskViewCallback):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewController.createControlledRemoteCarTaskView(android.car.app.ControlledRemoteCarTaskViewConfig,java.util.concurrent.Executor,android.car.app.ControlledRemoteCarTaskViewCallback)
UnflaggedApi: android.car.app.CarTaskViewController#release():
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewController.release()
UnflaggedApi: android.car.app.CarTaskViewController#showEmbeddedTasks():
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewController.showEmbeddedTasks()
UnflaggedApi: android.car.app.CarTaskViewControllerCallback:
    New API must be flagged with @FlaggedApi: class android.car.app.CarTaskViewControllerCallback
UnflaggedApi: android.car.app.CarTaskViewControllerCallback#onConnected(android.car.app.CarTaskViewController):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewControllerCallback.onConnected(android.car.app.CarTaskViewController)
UnflaggedApi: android.car.app.CarTaskViewControllerCallback#onDisconnected(android.car.app.CarTaskViewController):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewControllerCallback.onDisconnected(android.car.app.CarTaskViewController)
UnflaggedApi: android.car.app.CarTaskViewHost:
    New API must be flagged with @FlaggedApi: class android.car.app.CarTaskViewHost
UnflaggedApi: android.car.app.CarTaskViewHost#addInsets(int, int, android.graphics.Rect):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewHost.addInsets(int,int,android.graphics.Rect)
UnflaggedApi: android.car.app.CarTaskViewHost#notifySurfaceCreated(android.view.SurfaceControl):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewHost.notifySurfaceCreated(android.view.SurfaceControl)
UnflaggedApi: android.car.app.CarTaskViewHost#notifySurfaceDestroyed():
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewHost.notifySurfaceDestroyed()
UnflaggedApi: android.car.app.CarTaskViewHost#release():
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewHost.release()
UnflaggedApi: android.car.app.CarTaskViewHost#removeInsets(int, int):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewHost.removeInsets(int,int)
UnflaggedApi: android.car.app.CarTaskViewHost#setWindowBounds(android.graphics.Rect):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewHost.setWindowBounds(android.graphics.Rect)
UnflaggedApi: android.car.app.CarTaskViewHost#showEmbeddedTask():
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewHost.showEmbeddedTask()
UnflaggedApi: android.car.app.CarTaskViewHost#startActivity(android.app.PendingIntent, android.content.Intent, android.os.Bundle, android.graphics.Rect):
    New API must be flagged with @FlaggedApi: method android.car.app.CarTaskViewHost.startActivity(android.app.PendingIntent,android.content.Intent,android.os.Bundle,android.graphics.Rect)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView:
    New API must be flagged with @FlaggedApi: class android.car.app.ControlledRemoteCarTaskView
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#addInsets(int, int, android.graphics.Rect):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.addInsets(int,int,android.graphics.Rect)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#getTaskInfo():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.getTaskInfo()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#isInitialized():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.isInitialized()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#isReleased():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.isReleased()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#onAttachedToWindow():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.onAttachedToWindow()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#onDetachedFromWindow():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.onDetachedFromWindow()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#release():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.release()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#removeInsets(int, int):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.removeInsets(int,int)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#setObscuredTouchRect(android.graphics.Rect):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.setObscuredTouchRect(android.graphics.Rect)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#setObscuredTouchRegion(android.graphics.Region):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.setObscuredTouchRegion(android.graphics.Region)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#showEmbeddedTask():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.showEmbeddedTask()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#startActivity():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.startActivity()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskView#updateWindowBounds():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskView.updateWindowBounds()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewCallback:
    New API must be flagged with @FlaggedApi: class android.car.app.ControlledRemoteCarTaskViewCallback
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewCallback#onTaskAppeared(android.app.ActivityManager.RunningTaskInfo):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewCallback.onTaskAppeared(android.app.ActivityManager.RunningTaskInfo)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewCallback#onTaskInfoChanged(android.app.ActivityManager.RunningTaskInfo):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewCallback.onTaskInfoChanged(android.app.ActivityManager.RunningTaskInfo)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewCallback#onTaskVanished(android.app.ActivityManager.RunningTaskInfo):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewCallback.onTaskVanished(android.app.ActivityManager.RunningTaskInfo)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewCallback#onTaskViewCreated(android.car.app.ControlledRemoteCarTaskView):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewCallback.onTaskViewCreated(android.car.app.ControlledRemoteCarTaskView)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewCallback#onTaskViewInitialized():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewCallback.onTaskViewInitialized()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewCallback#onTaskViewReleased():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewCallback.onTaskViewReleased()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig:
    New API must be flagged with @FlaggedApi: class android.car.app.ControlledRemoteCarTaskViewConfig
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig#getActivityIntent():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewConfig.getActivityIntent()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig#shouldAutoRestartOnCrash():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewConfig.shouldAutoRestartOnCrash()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig#shouldCaptureGestures():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewConfig.shouldCaptureGestures()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig#shouldCaptureLongPress():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewConfig.shouldCaptureLongPress()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig.Builder:
    New API must be flagged with @FlaggedApi: class android.car.app.ControlledRemoteCarTaskViewConfig.Builder
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig.Builder#Builder():
    New API must be flagged with @FlaggedApi: constructor android.car.app.ControlledRemoteCarTaskViewConfig.Builder()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewConfig.Builder.build()
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig.Builder#setActivityIntent(android.content.Intent):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewConfig.Builder.setActivityIntent(android.content.Intent)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig.Builder#setShouldAutoRestartOnTaskRemoval(boolean):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewConfig.Builder.setShouldAutoRestartOnTaskRemoval(boolean)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig.Builder#setShouldCaptureGestures(boolean):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewConfig.Builder.setShouldCaptureGestures(boolean)
UnflaggedApi: android.car.app.ControlledRemoteCarTaskViewConfig.Builder#setShouldCaptureLongPress(boolean):
    New API must be flagged with @FlaggedApi: method android.car.app.ControlledRemoteCarTaskViewConfig.Builder.setShouldCaptureLongPress(boolean)
UnflaggedApi: android.car.cluster.CarInstrumentClusterManager.Callback#onClusterActivityStateChanged(String, android.os.Bundle):
    New API must be flagged with @FlaggedApi: method android.car.cluster.CarInstrumentClusterManager.Callback.onClusterActivityStateChanged(String,android.os.Bundle)
UnflaggedApi: android.car.cluster.ClusterActivityState:
    New API must be flagged with @FlaggedApi: class android.car.cluster.ClusterActivityState
UnflaggedApi: android.car.cluster.ClusterActivityState#create(boolean, android.graphics.Rect):
    New API must be flagged with @FlaggedApi: method android.car.cluster.ClusterActivityState.create(boolean,android.graphics.Rect)
UnflaggedApi: android.car.cluster.ClusterActivityState#fromBundle(android.os.Bundle):
    New API must be flagged with @FlaggedApi: method android.car.cluster.ClusterActivityState.fromBundle(android.os.Bundle)
UnflaggedApi: android.car.cluster.ClusterActivityState#getExtras():
    New API must be flagged with @FlaggedApi: method android.car.cluster.ClusterActivityState.getExtras()
UnflaggedApi: android.car.cluster.ClusterActivityState#getUnobscuredBounds():
    New API must be flagged with @FlaggedApi: method android.car.cluster.ClusterActivityState.getUnobscuredBounds()
UnflaggedApi: android.car.cluster.ClusterActivityState#isVisible():
    New API must be flagged with @FlaggedApi: method android.car.cluster.ClusterActivityState.isVisible()
UnflaggedApi: android.car.cluster.ClusterActivityState#setExtras(android.os.Bundle):
    New API must be flagged with @FlaggedApi: method android.car.cluster.ClusterActivityState.setExtras(android.os.Bundle)
UnflaggedApi: android.car.cluster.ClusterActivityState#setUnobscuredBounds(android.graphics.Rect):
    New API must be flagged with @FlaggedApi: method android.car.cluster.ClusterActivityState.setUnobscuredBounds(android.graphics.Rect)
UnflaggedApi: android.car.cluster.ClusterActivityState#setVisible(boolean):
    New API must be flagged with @FlaggedApi: method android.car.cluster.ClusterActivityState.setVisible(boolean)
UnflaggedApi: android.car.cluster.ClusterActivityState#toBundle():
    New API must be flagged with @FlaggedApi: method android.car.cluster.ClusterActivityState.toBundle()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderer#InstrumentClusterRenderer():
    New API must be flagged with @FlaggedApi: constructor android.car.cluster.renderer.InstrumentClusterRenderer()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderer#createNavigationRenderer():
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderer.createNavigationRenderer()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderer#getNavigationRenderer():
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderer.getNavigationRenderer()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderer#initialize():
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderer.initialize()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderer#onCreate(android.content.Context):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderer.onCreate(android.content.Context)
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderer#onStart():
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderer.onStart()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderer#onStop():
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderer.onStop()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService:
    New API must be flagged with @FlaggedApi: class android.car.cluster.renderer.InstrumentClusterRenderingService
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#InstrumentClusterRenderingService():
    New API must be flagged with @FlaggedApi: constructor android.car.cluster.renderer.InstrumentClusterRenderingService()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#getBitmap(android.net.Uri, int, int):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.getBitmap(android.net.Uri,int,int)
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#getBitmap(android.net.Uri, int, int, float):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.getBitmap(android.net.Uri,int,int,float)
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#getNavigationRenderer():
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.getNavigationRenderer()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#onBind(android.content.Intent):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.onBind(android.content.Intent)
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#onKeyEvent(android.view.KeyEvent):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.onKeyEvent(android.view.KeyEvent)
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#onNavigationComponentLaunched():
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.onNavigationComponentLaunched()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#onNavigationComponentReleased():
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.onNavigationComponentReleased()
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#setClusterActivityLaunchOptions(android.app.ActivityOptions):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.setClusterActivityLaunchOptions(android.app.ActivityOptions)
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#setClusterActivityState(android.car.cluster.ClusterActivityState):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.setClusterActivityState(android.car.cluster.ClusterActivityState)
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#startFixedActivityModeForDisplayAndUser(android.content.Intent, android.app.ActivityOptions, int):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.startFixedActivityModeForDisplayAndUser(android.content.Intent,android.app.ActivityOptions,int)
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#startNavigationActivity(android.content.ComponentName):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.startNavigationActivity(android.content.ComponentName)
UnflaggedApi: android.car.cluster.renderer.InstrumentClusterRenderingService#stopFixedActivityMode(int):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.InstrumentClusterRenderingService.stopFixedActivityMode(int)
UnflaggedApi: android.car.cluster.renderer.NavigationRenderer:
    New API must be flagged with @FlaggedApi: class android.car.cluster.renderer.NavigationRenderer
UnflaggedApi: android.car.cluster.renderer.NavigationRenderer#NavigationRenderer():
    New API must be flagged with @FlaggedApi: constructor android.car.cluster.renderer.NavigationRenderer()
UnflaggedApi: android.car.cluster.renderer.NavigationRenderer#getNavigationProperties():
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.NavigationRenderer.getNavigationProperties()
UnflaggedApi: android.car.cluster.renderer.NavigationRenderer#onNavigationStateChanged(android.os.Bundle):
    New API must be flagged with @FlaggedApi: method android.car.cluster.renderer.NavigationRenderer.onNavigationStateChanged(android.os.Bundle)
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo:
    New API must be flagged with @FlaggedApi: class android.car.content.pm.AppBlockingPackageInfo
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#AppBlockingPackageInfo(String, int, int, int, android.content.pm.Signature[], String[]):
    New API must be flagged with @FlaggedApi: constructor android.car.content.pm.AppBlockingPackageInfo(String,int,int,int,android.content.pm.Signature[],String[])
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#AppBlockingPackageInfo(android.os.Parcel):
    New API must be flagged with @FlaggedApi: constructor android.car.content.pm.AppBlockingPackageInfo(android.os.Parcel)
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.AppBlockingPackageInfo.CREATOR
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#FLAG_SYSTEM_APP:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.AppBlockingPackageInfo.FLAG_SYSTEM_APP
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#FLAG_WHOLE_ACTIVITY:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.AppBlockingPackageInfo.FLAG_WHOLE_ACTIVITY
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#activities:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.AppBlockingPackageInfo.activities
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.content.pm.AppBlockingPackageInfo.describeContents()
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#flags:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.AppBlockingPackageInfo.flags
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#maxRevisionCode:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.AppBlockingPackageInfo.maxRevisionCode
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#minRevisionCode:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.AppBlockingPackageInfo.minRevisionCode
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#packageName:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.AppBlockingPackageInfo.packageName
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#signatures:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.AppBlockingPackageInfo.signatures
UnflaggedApi: android.car.content.pm.AppBlockingPackageInfo#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.content.pm.AppBlockingPackageInfo.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicy:
    New API must be flagged with @FlaggedApi: class android.car.content.pm.CarAppBlockingPolicy
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicy#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.CarAppBlockingPolicy.CREATOR
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicy#CarAppBlockingPolicy(android.car.content.pm.AppBlockingPackageInfo[], android.car.content.pm.AppBlockingPackageInfo[]):
    New API must be flagged with @FlaggedApi: constructor android.car.content.pm.CarAppBlockingPolicy(android.car.content.pm.AppBlockingPackageInfo[],android.car.content.pm.AppBlockingPackageInfo[])
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicy#CarAppBlockingPolicy(android.os.Parcel):
    New API must be flagged with @FlaggedApi: constructor android.car.content.pm.CarAppBlockingPolicy(android.os.Parcel)
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicy#blacklists:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.CarAppBlockingPolicy.blacklists
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicy#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.content.pm.CarAppBlockingPolicy.describeContents()
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicy#whitelists:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.CarAppBlockingPolicy.whitelists
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicy#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.content.pm.CarAppBlockingPolicy.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicyService:
    New API must be flagged with @FlaggedApi: class android.car.content.pm.CarAppBlockingPolicyService
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicyService#CarAppBlockingPolicyService():
    New API must be flagged with @FlaggedApi: constructor android.car.content.pm.CarAppBlockingPolicyService()
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicyService#SERVICE_INTERFACE:
    New API must be flagged with @FlaggedApi: field android.car.content.pm.CarAppBlockingPolicyService.SERVICE_INTERFACE
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicyService#getAppBlockingPolicy():
    New API must be flagged with @FlaggedApi: method android.car.content.pm.CarAppBlockingPolicyService.getAppBlockingPolicy()
UnflaggedApi: android.car.content.pm.CarAppBlockingPolicyService#onBind(android.content.Intent):
    New API must be flagged with @FlaggedApi: method android.car.content.pm.CarAppBlockingPolicyService.onBind(android.content.Intent)
UnflaggedApi: android.car.content.pm.CarPackageManager#isActivityBackedBySafeActivity(android.content.ComponentName):
    New API must be flagged with @FlaggedApi: method android.car.content.pm.CarPackageManager.isActivityBackedBySafeActivity(android.content.ComponentName)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.CREATOR
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#CarDiagnosticEvent(android.os.Parcel):
    New API must be flagged with @FlaggedApi: constructor android.car.diagnostic.CarDiagnosticEvent(android.os.Parcel)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.describeContents()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#dtc:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.dtc
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#frameType:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.frameType
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getFuelSystemStatus():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getFuelSystemStatus()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getFuelType():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getFuelType()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getIgnitionMonitors():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getIgnitionMonitors()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getSecondaryAirStatus():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getSecondaryAirStatus()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getSystemFloatSensor(int):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getSystemFloatSensor(int)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getSystemFloatSensor(int, float):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getSystemFloatSensor(int,float)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getSystemIntegerSensor(int):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getSystemIntegerSensor(int)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getSystemIntegerSensor(int, int):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getSystemIntegerSensor(int,int)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getVendorFloatSensor(int):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getVendorFloatSensor(int)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getVendorFloatSensor(int, float):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getVendorFloatSensor(int,float)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getVendorIntegerSensor(int):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getVendorIntegerSensor(int)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#getVendorIntegerSensor(int, int):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.getVendorIntegerSensor(int,int)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#isFreezeFrame():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.isFreezeFrame()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#isLiveFrame():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.isLiveFrame()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#timestamp:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.timestamp
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#writeToJson(android.util.JsonWriter):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.writeToJson(android.util.JsonWriter)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.Builder:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.Builder
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.Builder.build()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.Builder#newFreezeFrameBuilder():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.Builder.newFreezeFrameBuilder()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.Builder#newLiveFrameBuilder():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.Builder.newLiveFrameBuilder()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.Builder#setDtc(String):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.Builder.setDtc(String)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.Builder#setFloatValue(int, float):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.Builder.setFloatValue(int,float)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.Builder#setIntValue(int, int):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.Builder.setIntValue(int,int)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.Builder#setTimeStamp(long):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.Builder.setTimeStamp(long)
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors#asCompressionIgnitionMonitors():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors.asCompressionIgnitionMonitors()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors#asSparkIgnitionMonitors():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors.asSparkIgnitionMonitors()
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors#components:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors.components
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors#fuelSystem:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors.fuelSystem
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors#misfire:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors.misfire
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#EGROrVVT:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors.EGROrVVT
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#NMHCCatalyst:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors.NMHCCatalyst
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#NOxSCR:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors.NOxSCR
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#PMFilter:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors.PMFilter
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#boostPressure:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors.boostPressure
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors#exhaustGasSensor:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors.exhaustGasSensor
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus#CLOSED_LOOP:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.CLOSED_LOOP
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus#CLOSED_LOOP_BUT_FEEDBACK_FAULT:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.CLOSED_LOOP_BUT_FEEDBACK_FAULT
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus#OPEN_ENGINE_LOAD_OR_DECELERATION:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.OPEN_ENGINE_LOAD_OR_DECELERATION
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus#OPEN_INSUFFICIENT_ENGINE_TEMPERATURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.OPEN_INSUFFICIENT_ENGINE_TEMPERATURE
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus#OPEN_SYSTEM_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.OPEN_SYSTEM_FAILURE
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.Status:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.Status
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.FuelType
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#BIFUEL_RUNNING_CNG:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_CNG
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#BIFUEL_RUNNING_DIESEL:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_DIESEL
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#BIFUEL_RUNNING_ELECTRIC:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_ELECTRIC
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#BIFUEL_RUNNING_ELECTRIC_AND_COMBUSTION:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_ELECTRIC_AND_COMBUSTION
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#BIFUEL_RUNNING_ETHANOL:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_ETHANOL
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#BIFUEL_RUNNING_GASOLINE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_GASOLINE
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#BIFUEL_RUNNING_LPG:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_LPG
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#BIFUEL_RUNNING_METHANOL:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_METHANOL
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#BIFUEL_RUNNING_PROPANE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_PROPANE
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#CNG:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.CNG
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#DIESEL:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.DIESEL
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#ELECTRIC:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.ELECTRIC
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#ETHANOL:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.ETHANOL
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#GASOLINE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.GASOLINE
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#HYBRID_DIESEL:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_DIESEL
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#HYBRID_ELECTRIC:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_ELECTRIC
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#HYBRID_ETHANOL:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_ETHANOL
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#HYBRID_GASOLINE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_GASOLINE
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#HYBRID_REGENERATIVE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_REGENERATIVE
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#HYBRID_RUNNING_ELECTRIC_AND_COMBUSTION:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_RUNNING_ELECTRIC_AND_COMBUSTION
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#LPG:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.LPG
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#METHANOL:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.METHANOL
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#NOT_AVAILABLE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.NOT_AVAILABLE
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType#PROPANE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.FuelType.PROPANE
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.FuelType.Type:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.FuelType.Type
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor#available:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor.available
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor#incomplete:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor.incomplete
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus#DOWNSTREAM_OF_CATALYCIC_CONVERTER:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.DOWNSTREAM_OF_CATALYCIC_CONVERTER
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus#FROM_OUTSIDE_OR_OFF:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.FROM_OUTSIDE_OR_OFF
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus#PUMP_ON_FOR_DIAGNOSTICS:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.PUMP_ON_FOR_DIAGNOSTICS
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus#UPSTREAM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.UPSTREAM
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.Status:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.Status
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#ACRefrigerant:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors.ACRefrigerant
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#EGR:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors.EGR
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#catalyst:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors.catalyst
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#evaporativeSystem:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors.evaporativeSystem
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#heatedCatalyst:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors.heatedCatalyst
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#oxygenSensor:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors.oxygenSensor
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#oxygenSensorHeater:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors.oxygenSensorHeater
UnflaggedApi: android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors#secondaryAirSystem:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors.secondaryAirSystem
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticManager
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#FRAME_TYPE_FREEZE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticManager.FRAME_TYPE_FREEZE
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#FRAME_TYPE_LIVE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.CarDiagnosticManager.FRAME_TYPE_LIVE
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#clearFreezeFrames(long...):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.clearFreezeFrames(long...)
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#getFreezeFrame(long):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.getFreezeFrame(long)
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#getFreezeFrameTimestamps():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.getFreezeFrameTimestamps()
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#getLatestLiveFrame():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.getLatestLiveFrame()
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#isClearFreezeFramesSupported():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.isClearFreezeFramesSupported()
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#isFreezeFrameNotificationSupported():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.isFreezeFrameNotificationSupported()
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#isGetFreezeFrameSupported():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.isGetFreezeFrameSupported()
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#isLiveFrameSupported():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.isLiveFrameSupported()
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#isSelectiveClearFreezeFramesSupported():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.isSelectiveClearFreezeFramesSupported()
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#onCarDisconnected():
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.onCarDisconnected()
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#registerListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener, int, int):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.registerListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener,int,int)
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager#unregisterListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.unregisterListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener)
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager.FrameType:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticManager.FrameType
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener
UnflaggedApi: android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener#onDiagnosticEvent(android.car.diagnostic.CarDiagnosticEvent):
    New API must be flagged with @FlaggedApi: method android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener.onDiagnosticEvent(android.car.diagnostic.CarDiagnosticEvent)
UnflaggedApi: android.car.diagnostic.FloatSensorIndex:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.FloatSensorIndex
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ABSOLUTE_EVAPORATION_SYSTEM_VAPOR_PRESSURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ABSOLUTE_EVAPORATION_SYSTEM_VAPOR_PRESSURE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ABSOLUTE_LOAD_VALUE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ABSOLUTE_LOAD_VALUE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ABSOLUTE_THROTTLE_POSITION_B:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ABSOLUTE_THROTTLE_POSITION_B
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ABSOLUTE_THROTTLE_POSITION_C:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ABSOLUTE_THROTTLE_POSITION_C
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ACCELERATOR_PEDAL_POSITION_D:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ACCELERATOR_PEDAL_POSITION_D
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ACCELERATOR_PEDAL_POSITION_E:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ACCELERATOR_PEDAL_POSITION_E
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ACCELERATOR_PEDAL_POSITION_F:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ACCELERATOR_PEDAL_POSITION_F
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#CALCULATED_ENGINE_LOAD:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.CALCULATED_ENGINE_LOAD
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#CATALYST_TEMPERATURE_BANK1_SENSOR1:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.CATALYST_TEMPERATURE_BANK1_SENSOR1
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#CATALYST_TEMPERATURE_BANK1_SENSOR2:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.CATALYST_TEMPERATURE_BANK1_SENSOR2
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#CATALYST_TEMPERATURE_BANK2_SENSOR1:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.CATALYST_TEMPERATURE_BANK2_SENSOR1
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#CATALYST_TEMPERATURE_BANK2_SENSOR2:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.CATALYST_TEMPERATURE_BANK2_SENSOR2
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#COMMANDED_EVAPORATIVE_PURGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.COMMANDED_EVAPORATIVE_PURGE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#COMMANDED_EXHAUST_GAS_RECIRCULATION:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.COMMANDED_EXHAUST_GAS_RECIRCULATION
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#COMMANDED_THROTTLE_ACTUATOR:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.COMMANDED_THROTTLE_ACTUATOR
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ENGINE_COOLANT_TEMPERATURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ENGINE_COOLANT_TEMPERATURE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ENGINE_FUEL_RATE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ENGINE_FUEL_RATE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ENGINE_RPM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ENGINE_RPM
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#ETHANOL_FUEL_PERCENTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.ETHANOL_FUEL_PERCENTAGE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#EVAPORATION_SYSTEM_VAPOR_PRESSURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.EVAPORATION_SYSTEM_VAPOR_PRESSURE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#EXHAUST_GAS_RECIRCULATION_ERROR:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.EXHAUST_GAS_RECIRCULATION_ERROR
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#FUEL_AIR_COMMANDED_EQUIVALENCE_RATIO:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.FUEL_AIR_COMMANDED_EQUIVALENCE_RATIO
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#FUEL_INJECTION_TIMING:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.FUEL_INJECTION_TIMING
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#FUEL_PRESSURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.FUEL_PRESSURE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#FUEL_RAIL_GAUGE_PRESSURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.FUEL_RAIL_GAUGE_PRESSURE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#FUEL_RAIL_PRESSURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.FUEL_RAIL_PRESSURE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#FUEL_TANK_LEVEL_INPUT:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.FUEL_TANK_LEVEL_INPUT
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#HYBRID_BATTERY_PACK_REMAINING_LIFE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.HYBRID_BATTERY_PACK_REMAINING_LIFE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#INTAKE_MANIFOLD_ABSOLUTE_PRESSURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.INTAKE_MANIFOLD_ABSOLUTE_PRESSURE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#LAST_SYSTEM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.LAST_SYSTEM
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#LONG_TERM_FUEL_TRIM_BANK1:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.LONG_TERM_FUEL_TRIM_BANK1
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#LONG_TERM_FUEL_TRIM_BANK2:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.LONG_TERM_FUEL_TRIM_BANK2
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK1:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK1
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK2:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK2
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK3:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK3
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK4:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK4
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#MAF_AIR_FLOW_RATE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.MAF_AIR_FLOW_RATE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR1_FUEL_AIR_EQUIVALENCE_RATIO:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR1_FUEL_AIR_EQUIVALENCE_RATIO
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR1_SHORT_TERM_FUEL_TRIM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR1_SHORT_TERM_FUEL_TRIM
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR1_VOLTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR1_VOLTAGE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR2_FUEL_AIR_EQUIVALENCE_RATIO:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR2_FUEL_AIR_EQUIVALENCE_RATIO
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR2_SHORT_TERM_FUEL_TRIM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR2_SHORT_TERM_FUEL_TRIM
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR2_VOLTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR2_VOLTAGE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR3_FUEL_AIR_EQUIVALENCE_RATIO:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR3_FUEL_AIR_EQUIVALENCE_RATIO
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR3_SHORT_TERM_FUEL_TRIM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR3_SHORT_TERM_FUEL_TRIM
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR3_VOLTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR3_VOLTAGE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR4_FUEL_AIR_EQUIVALENCE_RATIO:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR4_FUEL_AIR_EQUIVALENCE_RATIO
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR4_SHORT_TERM_FUEL_TRIM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR4_SHORT_TERM_FUEL_TRIM
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR4_VOLTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR4_VOLTAGE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR5_FUEL_AIR_EQUIVALENCE_RATIO:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR5_FUEL_AIR_EQUIVALENCE_RATIO
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR5_SHORT_TERM_FUEL_TRIM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR5_SHORT_TERM_FUEL_TRIM
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR5_VOLTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR5_VOLTAGE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR6_FUEL_AIR_EQUIVALENCE_RATIO:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR6_FUEL_AIR_EQUIVALENCE_RATIO
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR6_SHORT_TERM_FUEL_TRIM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR6_SHORT_TERM_FUEL_TRIM
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR6_VOLTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR6_VOLTAGE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR7_FUEL_AIR_EQUIVALENCE_RATIO:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR7_FUEL_AIR_EQUIVALENCE_RATIO
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR7_SHORT_TERM_FUEL_TRIM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR7_SHORT_TERM_FUEL_TRIM
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR7_VOLTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR7_VOLTAGE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR8_FUEL_AIR_EQUIVALENCE_RATIO:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR8_FUEL_AIR_EQUIVALENCE_RATIO
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR8_SHORT_TERM_FUEL_TRIM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR8_SHORT_TERM_FUEL_TRIM
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#OXYGEN_SENSOR8_VOLTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.OXYGEN_SENSOR8_VOLTAGE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#RELATIVE_ACCELERATOR_PEDAL_POSITION:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.RELATIVE_ACCELERATOR_PEDAL_POSITION
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#RELATIVE_THROTTLE_POSITION:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.RELATIVE_THROTTLE_POSITION
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#SHORT_TERM_FUEL_TRIM_BANK1:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.SHORT_TERM_FUEL_TRIM_BANK1
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#SHORT_TERM_FUEL_TRIM_BANK2:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.SHORT_TERM_FUEL_TRIM_BANK2
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK1:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK1
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK2:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK2
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK3:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK3
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK4:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK4
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#THROTTLE_POSITION:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.THROTTLE_POSITION
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#TIMING_ADVANCE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.TIMING_ADVANCE
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#VEHICLE_SPEED:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.VEHICLE_SPEED
UnflaggedApi: android.car.diagnostic.FloatSensorIndex#VENDOR_START:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.FloatSensorIndex.VENDOR_START
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex:
    New API must be flagged with @FlaggedApi: class android.car.diagnostic.IntegerSensorIndex
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#ABSOLUTE_BAROMETRIC_PRESSURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.ABSOLUTE_BAROMETRIC_PRESSURE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#AMBIENT_AIR_TEMPERATURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.AMBIENT_AIR_TEMPERATURE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#COMMANDED_SECONDARY_AIR_STATUS:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.COMMANDED_SECONDARY_AIR_STATUS
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#CONTROL_MODULE_VOLTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.CONTROL_MODULE_VOLTAGE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#DISTANCE_TRAVELED_SINCE_CODES_CLEARED:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.DISTANCE_TRAVELED_SINCE_CODES_CLEARED
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#DISTANCE_TRAVELED_WITH_MALFUNCTION_INDICATOR_LIGHT_ON:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.DISTANCE_TRAVELED_WITH_MALFUNCTION_INDICATOR_LIGHT_ON
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#DRIVER_DEMAND_PERCENT_TORQUE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.DRIVER_DEMAND_PERCENT_TORQUE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#ENGINE_ACTUAL_PERCENT_TORQUE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.ENGINE_ACTUAL_PERCENT_TORQUE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#ENGINE_OIL_TEMPERATURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.ENGINE_OIL_TEMPERATURE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#ENGINE_PERCENT_TORQUE_DATA_IDLE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.ENGINE_PERCENT_TORQUE_DATA_IDLE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#ENGINE_PERCENT_TORQUE_DATA_POINT1:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.ENGINE_PERCENT_TORQUE_DATA_POINT1
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#ENGINE_PERCENT_TORQUE_DATA_POINT2:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.ENGINE_PERCENT_TORQUE_DATA_POINT2
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#ENGINE_PERCENT_TORQUE_DATA_POINT3:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.ENGINE_PERCENT_TORQUE_DATA_POINT3
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#ENGINE_PERCENT_TORQUE_DATA_POINT4:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.ENGINE_PERCENT_TORQUE_DATA_POINT4
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#ENGINE_REFERENCE_PERCENT_TORQUE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.ENGINE_REFERENCE_PERCENT_TORQUE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#FUEL_RAIL_ABSOLUTE_PRESSURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.FUEL_RAIL_ABSOLUTE_PRESSURE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#FUEL_SYSTEM_STATUS:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.FUEL_SYSTEM_STATUS
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#FUEL_TYPE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.FUEL_TYPE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#IGNITION_MONITORS_SUPPORTED:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.IGNITION_MONITORS_SUPPORTED
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#IGNITION_SPECIFIC_MONITORS:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.IGNITION_SPECIFIC_MONITORS
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#INTAKE_AIR_TEMPERATURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.INTAKE_AIR_TEMPERATURE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#LAST_SYSTEM:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.LAST_SYSTEM
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#MALFUNCTION_INDICATOR_LIGHT_ON:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.MALFUNCTION_INDICATOR_LIGHT_ON
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#MAX_AIR_FLOW_RATE_FROM_MASS_AIR_FLOW_SENSOR:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.MAX_AIR_FLOW_RATE_FROM_MASS_AIR_FLOW_SENSOR
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#MAX_FUEL_AIR_EQUIVALENCE_RATIO:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.MAX_FUEL_AIR_EQUIVALENCE_RATIO
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#MAX_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.MAX_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#MAX_OXYGEN_SENSOR_CURRENT:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.MAX_OXYGEN_SENSOR_CURRENT
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#MAX_OXYGEN_SENSOR_VOLTAGE:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.MAX_OXYGEN_SENSOR_VOLTAGE
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#NUM_OXYGEN_SENSORS_PRESENT:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.NUM_OXYGEN_SENSORS_PRESENT
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#RUNTIME_SINCE_ENGINE_START:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.RUNTIME_SINCE_ENGINE_START
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#TIME_SINCE_TROUBLE_CODES_CLEARED:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.TIME_SINCE_TROUBLE_CODES_CLEARED
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#TIME_WITH_MALFUNCTION_LIGHT_ON:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.TIME_WITH_MALFUNCTION_LIGHT_ON
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#VENDOR_START:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.VENDOR_START
UnflaggedApi: android.car.diagnostic.IntegerSensorIndex#WARMUPS_SINCE_CODES_CLEARED:
    New API must be flagged with @FlaggedApi: field android.car.diagnostic.IntegerSensorIndex.WARMUPS_SINCE_CODES_CLEARED
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent:
    New API must be flagged with @FlaggedApi: class android.car.drivingstate.CarDrivingStateEvent
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.drivingstate.CarDrivingStateEvent.CREATOR
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent#CarDrivingStateEvent(int, long):
    New API must be flagged with @FlaggedApi: constructor android.car.drivingstate.CarDrivingStateEvent(int,long)
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent#DRIVING_STATE_IDLING:
    New API must be flagged with @FlaggedApi: field android.car.drivingstate.CarDrivingStateEvent.DRIVING_STATE_IDLING
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent#DRIVING_STATE_MOVING:
    New API must be flagged with @FlaggedApi: field android.car.drivingstate.CarDrivingStateEvent.DRIVING_STATE_MOVING
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent#DRIVING_STATE_PARKED:
    New API must be flagged with @FlaggedApi: field android.car.drivingstate.CarDrivingStateEvent.DRIVING_STATE_PARKED
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent#DRIVING_STATE_UNKNOWN:
    New API must be flagged with @FlaggedApi: field android.car.drivingstate.CarDrivingStateEvent.DRIVING_STATE_UNKNOWN
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarDrivingStateEvent.describeContents()
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent#eventValue:
    New API must be flagged with @FlaggedApi: field android.car.drivingstate.CarDrivingStateEvent.eventValue
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent#timeStamp:
    New API must be flagged with @FlaggedApi: field android.car.drivingstate.CarDrivingStateEvent.timeStamp
UnflaggedApi: android.car.drivingstate.CarDrivingStateEvent#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarDrivingStateEvent.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.drivingstate.CarDrivingStateManager:
    New API must be flagged with @FlaggedApi: class android.car.drivingstate.CarDrivingStateManager
UnflaggedApi: android.car.drivingstate.CarDrivingStateManager#getCurrentCarDrivingState():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarDrivingStateManager.getCurrentCarDrivingState()
UnflaggedApi: android.car.drivingstate.CarDrivingStateManager#registerListener(android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarDrivingStateManager.registerListener(android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener)
UnflaggedApi: android.car.drivingstate.CarDrivingStateManager#unregisterListener():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarDrivingStateManager.unregisterListener()
UnflaggedApi: android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener:
    New API must be flagged with @FlaggedApi: class android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener
UnflaggedApi: android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener#onDrivingStateChanged(android.car.drivingstate.CarDrivingStateEvent):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener.onDrivingStateChanged(android.car.drivingstate.CarDrivingStateEvent)
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsConfiguration:
    New API must be flagged with @FlaggedApi: class android.car.drivingstate.CarUxRestrictionsConfiguration
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsConfiguration#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.drivingstate.CarUxRestrictionsConfiguration.CREATOR
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsConfiguration#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsConfiguration.describeContents()
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsConfiguration#getDisplayType():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsConfiguration.getDisplayType()
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsConfiguration#getOccupantZoneId():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsConfiguration.getOccupantZoneId()
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsConfiguration#getPhysicalPort():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsConfiguration.getPhysicalPort()
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsConfiguration#getUxRestrictions(int, float):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsConfiguration.getUxRestrictions(int,float)
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsConfiguration#getUxRestrictions(int, float, String):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsConfiguration.getUxRestrictions(int,float,String)
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsConfiguration#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsConfiguration.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsManager#UX_RESTRICTION_MODE_BASELINE:
    New API must be flagged with @FlaggedApi: field android.car.drivingstate.CarUxRestrictionsManager.UX_RESTRICTION_MODE_BASELINE
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsManager#getConfigs():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsManager.getConfigs()
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsManager#getCurrentCarUxRestrictions(int):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsManager.getCurrentCarUxRestrictions(int)
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsManager#getRestrictionMode():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsManager.getRestrictionMode()
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsManager#getStagedConfigs():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsManager.getStagedConfigs()
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsManager#onCarDisconnected():
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsManager.onCarDisconnected()
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsManager#saveUxRestrictionsConfigurationForNextBoot(android.car.drivingstate.CarUxRestrictionsConfiguration):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsManager.saveUxRestrictionsConfigurationForNextBoot(android.car.drivingstate.CarUxRestrictionsConfiguration)
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsManager#saveUxRestrictionsConfigurationForNextBoot(java.util.List<android.car.drivingstate.CarUxRestrictionsConfiguration>):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsManager.saveUxRestrictionsConfigurationForNextBoot(java.util.List<android.car.drivingstate.CarUxRestrictionsConfiguration>)
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsManager#setListener(int, android.car.drivingstate.CarUxRestrictionsManager.OnUxRestrictionsChangedListener):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsManager.setListener(int,android.car.drivingstate.CarUxRestrictionsManager.OnUxRestrictionsChangedListener)
UnflaggedApi: android.car.drivingstate.CarUxRestrictionsManager#setRestrictionMode(String):
    New API must be flagged with @FlaggedApi: method android.car.drivingstate.CarUxRestrictionsManager.setRestrictionMode(String)
UnflaggedApi: android.car.evs.CarEvsBufferDescriptor:
    New API must be flagged with @FlaggedApi: class android.car.evs.CarEvsBufferDescriptor
UnflaggedApi: android.car.evs.CarEvsBufferDescriptor#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsBufferDescriptor.CREATOR
UnflaggedApi: android.car.evs.CarEvsBufferDescriptor#CarEvsBufferDescriptor(int, android.hardware.HardwareBuffer):
    New API must be flagged with @FlaggedApi: constructor android.car.evs.CarEvsBufferDescriptor(int,android.hardware.HardwareBuffer)
UnflaggedApi: android.car.evs.CarEvsBufferDescriptor#close():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsBufferDescriptor.close()
UnflaggedApi: android.car.evs.CarEvsBufferDescriptor#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsBufferDescriptor.describeContents()
UnflaggedApi: android.car.evs.CarEvsBufferDescriptor#getHardwareBuffer():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsBufferDescriptor.getHardwareBuffer()
UnflaggedApi: android.car.evs.CarEvsBufferDescriptor#getId():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsBufferDescriptor.getId()
UnflaggedApi: android.car.evs.CarEvsBufferDescriptor#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsBufferDescriptor.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.evs.CarEvsManager:
    New API must be flagged with @FlaggedApi: class android.car.evs.CarEvsManager
UnflaggedApi: android.car.evs.CarEvsManager#ERROR_BUSY:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.ERROR_BUSY
UnflaggedApi: android.car.evs.CarEvsManager#ERROR_NONE:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.ERROR_NONE
UnflaggedApi: android.car.evs.CarEvsManager#ERROR_UNAVAILABLE:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.ERROR_UNAVAILABLE
UnflaggedApi: android.car.evs.CarEvsManager#EXTRA_SESSION_TOKEN:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.EXTRA_SESSION_TOKEN
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_STATE_ACTIVE:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_STATE_ACTIVE
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_STATE_INACTIVE:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_STATE_INACTIVE
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_STATE_REQUESTED:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_STATE_REQUESTED
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_STATE_UNAVAILABLE:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_STATE_UNAVAILABLE
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_TYPE_DRIVERVIEW:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_TYPE_DRIVERVIEW
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_TYPE_FRONTVIEW:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_TYPE_FRONTVIEW
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_TYPE_FRONT_PASSENGERSVIEW:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_TYPE_FRONT_PASSENGERSVIEW
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_TYPE_LEFTVIEW:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_TYPE_LEFTVIEW
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_TYPE_REARVIEW:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_TYPE_REARVIEW
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_TYPE_REAR_PASSENGERSVIEW:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_TYPE_REAR_PASSENGERSVIEW
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_TYPE_RIGHTVIEW:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_TYPE_RIGHTVIEW
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_TYPE_SURROUNDVIEW:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_TYPE_SURROUNDVIEW
UnflaggedApi: android.car.evs.CarEvsManager#SERVICE_TYPE_USER_DEFINED:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.SERVICE_TYPE_USER_DEFINED
UnflaggedApi: android.car.evs.CarEvsManager#STREAM_EVENT_FRAME_DROPPED:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.STREAM_EVENT_FRAME_DROPPED
UnflaggedApi: android.car.evs.CarEvsManager#STREAM_EVENT_NONE:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.STREAM_EVENT_NONE
UnflaggedApi: android.car.evs.CarEvsManager#STREAM_EVENT_OTHER_ERRORS:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.STREAM_EVENT_OTHER_ERRORS
UnflaggedApi: android.car.evs.CarEvsManager#STREAM_EVENT_PARAMETER_CHANGED:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.STREAM_EVENT_PARAMETER_CHANGED
UnflaggedApi: android.car.evs.CarEvsManager#STREAM_EVENT_PRIMARY_OWNER_CHANGED:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.STREAM_EVENT_PRIMARY_OWNER_CHANGED
UnflaggedApi: android.car.evs.CarEvsManager#STREAM_EVENT_STREAM_STARTED:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.STREAM_EVENT_STREAM_STARTED
UnflaggedApi: android.car.evs.CarEvsManager#STREAM_EVENT_STREAM_STOPPED:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.STREAM_EVENT_STREAM_STOPPED
UnflaggedApi: android.car.evs.CarEvsManager#STREAM_EVENT_TIMEOUT:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsManager.STREAM_EVENT_TIMEOUT
UnflaggedApi: android.car.evs.CarEvsManager#clearStatusListener():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.clearStatusListener()
UnflaggedApi: android.car.evs.CarEvsManager#generateSessionToken():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.generateSessionToken()
UnflaggedApi: android.car.evs.CarEvsManager#getCurrentStatus():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.getCurrentStatus()
UnflaggedApi: android.car.evs.CarEvsManager#isSupported(int):
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.isSupported(int)
UnflaggedApi: android.car.evs.CarEvsManager#returnFrameBuffer(android.car.evs.CarEvsBufferDescriptor):
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.returnFrameBuffer(android.car.evs.CarEvsBufferDescriptor)
UnflaggedApi: android.car.evs.CarEvsManager#setStatusListener(java.util.concurrent.Executor, android.car.evs.CarEvsManager.CarEvsStatusListener):
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.setStatusListener(java.util.concurrent.Executor,android.car.evs.CarEvsManager.CarEvsStatusListener)
UnflaggedApi: android.car.evs.CarEvsManager#startActivity(int):
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.startActivity(int)
UnflaggedApi: android.car.evs.CarEvsManager#startVideoStream(int, android.os.IBinder, java.util.concurrent.Executor, android.car.evs.CarEvsManager.CarEvsStreamCallback):
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.startVideoStream(int,android.os.IBinder,java.util.concurrent.Executor,android.car.evs.CarEvsManager.CarEvsStreamCallback)
UnflaggedApi: android.car.evs.CarEvsManager#stopActivity():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.stopActivity()
UnflaggedApi: android.car.evs.CarEvsManager#stopVideoStream():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.stopVideoStream()
UnflaggedApi: android.car.evs.CarEvsManager.CarEvsStatusListener:
    New API must be flagged with @FlaggedApi: class android.car.evs.CarEvsManager.CarEvsStatusListener
UnflaggedApi: android.car.evs.CarEvsManager.CarEvsStatusListener#onStatusChanged(android.car.evs.CarEvsStatus):
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.CarEvsStatusListener.onStatusChanged(android.car.evs.CarEvsStatus)
UnflaggedApi: android.car.evs.CarEvsManager.CarEvsStreamCallback:
    New API must be flagged with @FlaggedApi: class android.car.evs.CarEvsManager.CarEvsStreamCallback
UnflaggedApi: android.car.evs.CarEvsManager.CarEvsStreamCallback#onNewFrame(android.car.evs.CarEvsBufferDescriptor):
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.CarEvsStreamCallback.onNewFrame(android.car.evs.CarEvsBufferDescriptor)
UnflaggedApi: android.car.evs.CarEvsManager.CarEvsStreamCallback#onStreamEvent(int):
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsManager.CarEvsStreamCallback.onStreamEvent(int)
UnflaggedApi: android.car.evs.CarEvsStatus:
    New API must be flagged with @FlaggedApi: class android.car.evs.CarEvsStatus
UnflaggedApi: android.car.evs.CarEvsStatus#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.evs.CarEvsStatus.CREATOR
UnflaggedApi: android.car.evs.CarEvsStatus#CarEvsStatus(int, int):
    New API must be flagged with @FlaggedApi: constructor android.car.evs.CarEvsStatus(int,int)
UnflaggedApi: android.car.evs.CarEvsStatus#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsStatus.describeContents()
UnflaggedApi: android.car.evs.CarEvsStatus#getServiceType():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsStatus.getServiceType()
UnflaggedApi: android.car.evs.CarEvsStatus#getState():
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsStatus.getState()
UnflaggedApi: android.car.evs.CarEvsStatus#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.evs.CarEvsStatus.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.hardware.CarHvacFanDirection:
    New API must be flagged with @FlaggedApi: class android.car.hardware.CarHvacFanDirection
UnflaggedApi: android.car.hardware.CarHvacFanDirection#DEFROST:
    New API must be flagged with @FlaggedApi: field android.car.hardware.CarHvacFanDirection.DEFROST
UnflaggedApi: android.car.hardware.CarHvacFanDirection#DEFROST_AND_FLOOR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.CarHvacFanDirection.DEFROST_AND_FLOOR
UnflaggedApi: android.car.hardware.CarHvacFanDirection#FACE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.CarHvacFanDirection.FACE
UnflaggedApi: android.car.hardware.CarHvacFanDirection#FACE_AND_DEFROST:
    New API must be flagged with @FlaggedApi: field android.car.hardware.CarHvacFanDirection.FACE_AND_DEFROST
UnflaggedApi: android.car.hardware.CarHvacFanDirection#FACE_AND_FLOOR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.CarHvacFanDirection.FACE_AND_FLOOR
UnflaggedApi: android.car.hardware.CarHvacFanDirection#FACE_DEFROST_AND_FLOOR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.CarHvacFanDirection.FACE_DEFROST_AND_FLOOR
UnflaggedApi: android.car.hardware.CarHvacFanDirection#FLOOR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.CarHvacFanDirection.FLOOR
UnflaggedApi: android.car.hardware.CarHvacFanDirection#UNKNOWN:
    New API must be flagged with @FlaggedApi: field android.car.hardware.CarHvacFanDirection.UNKNOWN
UnflaggedApi: android.car.hardware.CarPropertyConfig#newBuilder(Class<T>, int, int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarPropertyConfig.newBuilder(Class<T>,int,int,int)
UnflaggedApi: android.car.hardware.CarPropertyConfig.Builder:
    New API must be flagged with @FlaggedApi: class android.car.hardware.CarPropertyConfig.Builder
UnflaggedApi: android.car.hardware.CarPropertyConfig.Builder#addAreaIdConfig(android.car.hardware.property.AreaIdConfig<T>):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarPropertyConfig.Builder.addAreaIdConfig(android.car.hardware.property.AreaIdConfig<T>)
UnflaggedApi: android.car.hardware.CarPropertyConfig.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarPropertyConfig.Builder.build()
UnflaggedApi: android.car.hardware.CarPropertyConfig.Builder#setAccess(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarPropertyConfig.Builder.setAccess(int)
UnflaggedApi: android.car.hardware.CarPropertyConfig.Builder#setChangeMode(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarPropertyConfig.Builder.setChangeMode(int)
UnflaggedApi: android.car.hardware.CarPropertyConfig.Builder#setConfigArray(java.util.ArrayList<java.lang.Integer>):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarPropertyConfig.Builder.setConfigArray(java.util.ArrayList<java.lang.Integer>)
UnflaggedApi: android.car.hardware.CarPropertyConfig.Builder#setConfigString(String):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarPropertyConfig.Builder.setConfigString(String)
UnflaggedApi: android.car.hardware.CarPropertyConfig.Builder#setMaxSampleRate(float):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarPropertyConfig.Builder.setMaxSampleRate(float)
UnflaggedApi: android.car.hardware.CarPropertyConfig.Builder#setMinSampleRate(float):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarPropertyConfig.Builder.setMinSampleRate(float)
UnflaggedApi: android.car.hardware.CarVendorExtensionManager#getGlobalProperty(Class<E>, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarVendorExtensionManager.getGlobalProperty(Class<E>,int)
UnflaggedApi: android.car.hardware.CarVendorExtensionManager#getProperties():
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarVendorExtensionManager.getProperties()
UnflaggedApi: android.car.hardware.CarVendorExtensionManager#getProperty(Class<E>, int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarVendorExtensionManager.getProperty(Class<E>,int,int)
UnflaggedApi: android.car.hardware.CarVendorExtensionManager#isPropertyAvailable(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarVendorExtensionManager.isPropertyAvailable(int,int)
UnflaggedApi: android.car.hardware.CarVendorExtensionManager#registerCallback(android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarVendorExtensionManager.registerCallback(android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback)
UnflaggedApi: android.car.hardware.CarVendorExtensionManager#setGlobalProperty(Class<E>, int, E):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarVendorExtensionManager.setGlobalProperty(Class<E>,int,E)
UnflaggedApi: android.car.hardware.CarVendorExtensionManager#setProperty(Class<E>, int, int, E):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarVendorExtensionManager.setProperty(Class<E>,int,int,E)
UnflaggedApi: android.car.hardware.CarVendorExtensionManager#unregisterCallback(android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarVendorExtensionManager.unregisterCallback(android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback)
UnflaggedApi: android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback:
    New API must be flagged with @FlaggedApi: class android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback
UnflaggedApi: android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback#onChangeEvent(android.car.hardware.CarPropertyValue):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback.onChangeEvent(android.car.hardware.CarPropertyValue)
UnflaggedApi: android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback#onErrorEvent(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback.onErrorEvent(int,int)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_DOOR_LOCK:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_DOOR_LOCK
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_DOOR_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_DOOR_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_DOOR_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_DOOR_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_MIRROR_FOLD:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_MIRROR_FOLD
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_MIRROR_LOCK:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_MIRROR_LOCK
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_MIRROR_Y_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_MIRROR_Y_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_MIRROR_Y_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_MIRROR_Y_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_MIRROR_Z_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_MIRROR_Z_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_MIRROR_Z_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_MIRROR_Z_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_BACKREST_ANGLE_1_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_BACKREST_ANGLE_1_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_BACKREST_ANGLE_1_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_BACKREST_ANGLE_1_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_BACKREST_ANGLE_2_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_BACKREST_ANGLE_2_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_BACKREST_ANGLE_2_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_BACKREST_ANGLE_2_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_BELT_BUCKLED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_BELT_BUCKLED
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_BELT_HEIGHT_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_BELT_HEIGHT_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_BELT_HEIGHT_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_BELT_HEIGHT_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_DEPTH_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_DEPTH_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_DEPTH_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_DEPTH_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_FORE_AFT_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_FORE_AFT_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_FORE_AFT_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_FORE_AFT_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_HEADREST_ANGLE_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_HEADREST_ANGLE_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_HEADREST_ANGLE_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_HEADREST_ANGLE_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_HEADREST_FORE_AFT_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_HEADREST_FORE_AFT_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_HEADREST_FORE_AFT_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_HEADREST_FORE_AFT_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_HEADREST_HEIGHT_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_HEADREST_HEIGHT_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_HEADREST_HEIGHT_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_HEADREST_HEIGHT_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_HEIGHT_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_HEIGHT_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_HEIGHT_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_HEIGHT_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_LUMBAR_FORE_AFT_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_LUMBAR_FORE_AFT_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_LUMBAR_FORE_AFT_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_LUMBAR_FORE_AFT_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_LUMBAR_SIDE_SUPPORT_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_LUMBAR_SIDE_SUPPORT_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_LUMBAR_SIDE_SUPPORT_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_LUMBAR_SIDE_SUPPORT_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_MEMORY_SELECT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_MEMORY_SELECT
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_MEMORY_SET:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_MEMORY_SET
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_TILT_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_TILT_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_SEAT_TILT_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_SEAT_TILT_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_WINDOW_LOCK:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_WINDOW_LOCK
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_WINDOW_MOVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_WINDOW_MOVE
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#ID_WINDOW_POS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.cabin.CarCabinManager.ID_WINDOW_POS
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#getBooleanProperty(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.getBooleanProperty(int,int)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#getFloatProperty(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.getFloatProperty(int,int)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#getIntProperty(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.getIntProperty(int,int)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#getPropertyList():
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.getPropertyList()
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#isZonedProperty(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.isZonedProperty(int)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#registerCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.registerCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#setBooleanProperty(int, int, boolean):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.setBooleanProperty(int,int,boolean)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#setFloatProperty(int, int, float):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.setFloatProperty(int,int,float)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#setIntProperty(int, int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.setIntProperty(int,int,int)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager#unregisterCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.unregisterCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback:
    New API must be flagged with @FlaggedApi: class android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback
UnflaggedApi: android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback#onChangeEvent(android.car.hardware.CarPropertyValue):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback.onChangeEvent(android.car.hardware.CarPropertyValue)
UnflaggedApi: android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback#onErrorEvent(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback.onErrorEvent(int,int)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#FAN_DIRECTION_DEFROST:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.FAN_DIRECTION_DEFROST
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#FAN_DIRECTION_FACE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.FAN_DIRECTION_FACE
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#FAN_DIRECTION_FLOOR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.FAN_DIRECTION_FLOOR
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_MIRROR_DEFROSTER_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_MIRROR_DEFROSTER_ON
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_OUTSIDE_AIR_TEMP:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_OUTSIDE_AIR_TEMP
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_STEERING_WHEEL_HEAT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_STEERING_WHEEL_HEAT
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_TEMPERATURE_DISPLAY_UNITS:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_TEMPERATURE_DISPLAY_UNITS
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_WINDOW_DEFROSTER_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_WINDOW_DEFROSTER_ON
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_AC_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_AC_ON
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_AIR_RECIRCULATION_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_AIR_RECIRCULATION_ON
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_AUTOMATIC_MODE_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_AUTOMATIC_MODE_ON
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_DUAL_ZONE_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_DUAL_ZONE_ON
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_FAN_DIRECTION:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_FAN_DIRECTION
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_FAN_DIRECTION_AVAILABLE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_FAN_DIRECTION_AVAILABLE
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_FAN_SPEED_RPM:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_FAN_SPEED_RPM
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_FAN_SPEED_SETPOINT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_FAN_SPEED_SETPOINT
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_HVAC_AUTO_RECIRC_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_HVAC_AUTO_RECIRC_ON
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_HVAC_POWER_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_HVAC_POWER_ON
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_MAX_AC_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_MAX_AC_ON
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_MAX_DEFROST_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_MAX_DEFROST_ON
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_SEAT_TEMP:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_SEAT_TEMP
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_TEMP_ACTUAL:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_TEMP_ACTUAL
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#ID_ZONED_TEMP_SETPOINT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.hvac.CarHvacManager.ID_ZONED_TEMP_SETPOINT
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#getBooleanProperty(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.getBooleanProperty(int,int)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#getFloatProperty(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.getFloatProperty(int,int)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#getIntProperty(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.getIntProperty(int,int)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#getPropertyList():
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.getPropertyList()
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#isPropertyAvailable(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.isPropertyAvailable(int,int)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#registerCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.registerCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#setBooleanProperty(int, int, boolean):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.setBooleanProperty(int,int,boolean)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#setFloatProperty(int, int, float):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.setFloatProperty(int,int,float)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#setIntProperty(int, int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.setIntProperty(int,int,int)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager#unregisterCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.unregisterCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback:
    New API must be flagged with @FlaggedApi: class android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback
UnflaggedApi: android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback#onChangeEvent(android.car.hardware.CarPropertyValue):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback.onChangeEvent(android.car.hardware.CarPropertyValue)
UnflaggedApi: android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback#onErrorEvent(int, int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback.onErrorEvent(int,int)
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_HIBERNATION_ENTER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_HIBERNATION_ENTER
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_HIBERNATION_EXIT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_HIBERNATION_EXIT
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_INVALID:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_INVALID
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_ON
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_POST_HIBERNATION_ENTER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_POST_HIBERNATION_ENTER
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_POST_SHUTDOWN_ENTER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_POST_SHUTDOWN_ENTER
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_POST_SUSPEND_ENTER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_POST_SUSPEND_ENTER
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_PRE_SHUTDOWN_PREPARE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_PRE_SHUTDOWN_PREPARE
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_SHUTDOWN_CANCELLED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_SHUTDOWN_CANCELLED
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_SHUTDOWN_ENTER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_SHUTDOWN_ENTER
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_SHUTDOWN_PREPARE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_SHUTDOWN_PREPARE
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_SUSPEND_ENTER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_SUSPEND_ENTER
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_SUSPEND_EXIT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_SUSPEND_EXIT
UnflaggedApi: android.car.hardware.power.CarPowerManager#STATE_WAIT_FOR_VHAL:
    New API must be flagged with @FlaggedApi: field android.car.hardware.power.CarPowerManager.STATE_WAIT_FOR_VHAL
UnflaggedApi: android.car.hardware.power.CarPowerManager#applyPowerPolicy(String):
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.applyPowerPolicy(String)
UnflaggedApi: android.car.hardware.power.CarPowerManager#clearListener():
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.clearListener()
UnflaggedApi: android.car.hardware.power.CarPowerManager#getPowerState():
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.getPowerState()
UnflaggedApi: android.car.hardware.power.CarPowerManager#setDisplayPowerState(int, boolean):
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.setDisplayPowerState(int,boolean)
UnflaggedApi: android.car.hardware.power.CarPowerManager#setListener(java.util.concurrent.Executor, android.car.hardware.power.CarPowerManager.CarPowerStateListener):
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.setListener(java.util.concurrent.Executor,android.car.hardware.power.CarPowerManager.CarPowerStateListener)
UnflaggedApi: android.car.hardware.power.CarPowerManager#setListenerWithCompletion(java.util.concurrent.Executor, android.car.hardware.power.CarPowerManager.CarPowerStateListenerWithCompletion):
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.setListenerWithCompletion(java.util.concurrent.Executor,android.car.hardware.power.CarPowerManager.CarPowerStateListenerWithCompletion)
UnflaggedApi: android.car.hardware.power.CarPowerManager#setPowerPolicyGroup(String):
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.setPowerPolicyGroup(String)
UnflaggedApi: android.car.hardware.power.CarPowerManager.CarPowerStateListener:
    New API must be flagged with @FlaggedApi: class android.car.hardware.power.CarPowerManager.CarPowerStateListener
UnflaggedApi: android.car.hardware.power.CarPowerManager.CarPowerStateListener#onStateChanged(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.CarPowerStateListener.onStateChanged(int)
UnflaggedApi: android.car.hardware.power.CarPowerManager.CarPowerStateListenerWithCompletion:
    New API must be flagged with @FlaggedApi: class android.car.hardware.power.CarPowerManager.CarPowerStateListenerWithCompletion
UnflaggedApi: android.car.hardware.power.CarPowerManager.CarPowerStateListenerWithCompletion#onStateChanged(int, android.car.hardware.power.CarPowerManager.CompletablePowerStateChangeFuture):
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.CarPowerStateListenerWithCompletion.onStateChanged(int,android.car.hardware.power.CarPowerManager.CompletablePowerStateChangeFuture)
UnflaggedApi: android.car.hardware.power.CarPowerManager.CompletablePowerStateChangeFuture:
    New API must be flagged with @FlaggedApi: class android.car.hardware.power.CarPowerManager.CompletablePowerStateChangeFuture
UnflaggedApi: android.car.hardware.power.CarPowerManager.CompletablePowerStateChangeFuture#complete():
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.CompletablePowerStateChangeFuture.complete()
UnflaggedApi: android.car.hardware.power.CarPowerManager.CompletablePowerStateChangeFuture#getExpirationTime():
    New API must be flagged with @FlaggedApi: method android.car.hardware.power.CarPowerManager.CompletablePowerStateChangeFuture.getExpirationTime()
UnflaggedApi: android.car.hardware.property.AreaIdConfig.Builder:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.AreaIdConfig.Builder
UnflaggedApi: android.car.hardware.property.AreaIdConfig.Builder#Builder(int):
    New API must be flagged with @FlaggedApi: constructor android.car.hardware.property.AreaIdConfig.Builder(int)
UnflaggedApi: android.car.hardware.property.AreaIdConfig.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.AreaIdConfig.Builder.build()
UnflaggedApi: android.car.hardware.property.AreaIdConfig.Builder#setMaxValue(T):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.AreaIdConfig.Builder.setMaxValue(T)
UnflaggedApi: android.car.hardware.property.AreaIdConfig.Builder#setMinValue(T):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.AreaIdConfig.Builder.setMinValue(T)
UnflaggedApi: android.car.hardware.property.AreaIdConfig.Builder#setSupportedEnumValues(java.util.List<T>):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.AreaIdConfig.Builder.setSupportedEnumValues(java.util.List<T>)
UnflaggedApi: android.car.hardware.property.AutomaticEmergencyBrakingState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.AutomaticEmergencyBrakingState
UnflaggedApi: android.car.hardware.property.AutomaticEmergencyBrakingState#ACTIVATED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.AutomaticEmergencyBrakingState.ACTIVATED
UnflaggedApi: android.car.hardware.property.AutomaticEmergencyBrakingState#ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.AutomaticEmergencyBrakingState.ENABLED
UnflaggedApi: android.car.hardware.property.AutomaticEmergencyBrakingState#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.AutomaticEmergencyBrakingState.OTHER
UnflaggedApi: android.car.hardware.property.AutomaticEmergencyBrakingState#USER_OVERRIDE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.AutomaticEmergencyBrakingState.USER_OVERRIDE
UnflaggedApi: android.car.hardware.property.AutomaticEmergencyBrakingState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.AutomaticEmergencyBrakingState.toString(int)
UnflaggedApi: android.car.hardware.property.BlindSpotWarningState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.BlindSpotWarningState
UnflaggedApi: android.car.hardware.property.BlindSpotWarningState#NO_WARNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.BlindSpotWarningState.NO_WARNING
UnflaggedApi: android.car.hardware.property.BlindSpotWarningState#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.BlindSpotWarningState.OTHER
UnflaggedApi: android.car.hardware.property.BlindSpotWarningState#WARNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.BlindSpotWarningState.WARNING
UnflaggedApi: android.car.hardware.property.BlindSpotWarningState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.BlindSpotWarningState.toString(int)
UnflaggedApi: android.car.hardware.property.CarInternalErrorException#getVendorErrorCode():
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.CarInternalErrorException.getVendorErrorCode()
UnflaggedApi: android.car.hardware.property.CarPropertyManager.PropertyAsyncError#getVendorErrorCode():
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.CarPropertyManager.PropertyAsyncError.getVendorErrorCode()
UnflaggedApi: android.car.hardware.property.CruiseControlCommand:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.CruiseControlCommand
UnflaggedApi: android.car.hardware.property.CruiseControlCommand#ACTIVATE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlCommand.ACTIVATE
UnflaggedApi: android.car.hardware.property.CruiseControlCommand#DECREASE_TARGET_SPEED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlCommand.DECREASE_TARGET_SPEED
UnflaggedApi: android.car.hardware.property.CruiseControlCommand#DECREASE_TARGET_TIME_GAP:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlCommand.DECREASE_TARGET_TIME_GAP
UnflaggedApi: android.car.hardware.property.CruiseControlCommand#INCREASE_TARGET_SPEED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlCommand.INCREASE_TARGET_SPEED
UnflaggedApi: android.car.hardware.property.CruiseControlCommand#INCREASE_TARGET_TIME_GAP:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlCommand.INCREASE_TARGET_TIME_GAP
UnflaggedApi: android.car.hardware.property.CruiseControlCommand#SUSPEND:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlCommand.SUSPEND
UnflaggedApi: android.car.hardware.property.CruiseControlCommand#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.CruiseControlCommand.toString(int)
UnflaggedApi: android.car.hardware.property.CruiseControlState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.CruiseControlState
UnflaggedApi: android.car.hardware.property.CruiseControlState#ACTIVATED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlState.ACTIVATED
UnflaggedApi: android.car.hardware.property.CruiseControlState#ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlState.ENABLED
UnflaggedApi: android.car.hardware.property.CruiseControlState#FORCED_DEACTIVATION_WARNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlState.FORCED_DEACTIVATION_WARNING
UnflaggedApi: android.car.hardware.property.CruiseControlState#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlState.OTHER
UnflaggedApi: android.car.hardware.property.CruiseControlState#SUSPENDED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlState.SUSPENDED
UnflaggedApi: android.car.hardware.property.CruiseControlState#USER_OVERRIDE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlState.USER_OVERRIDE
UnflaggedApi: android.car.hardware.property.CruiseControlState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.CruiseControlState.toString(int)
UnflaggedApi: android.car.hardware.property.CruiseControlType:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.CruiseControlType
UnflaggedApi: android.car.hardware.property.CruiseControlType#ADAPTIVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlType.ADAPTIVE
UnflaggedApi: android.car.hardware.property.CruiseControlType#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlType.OTHER
UnflaggedApi: android.car.hardware.property.CruiseControlType#PREDICTIVE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlType.PREDICTIVE
UnflaggedApi: android.car.hardware.property.CruiseControlType#STANDARD:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.CruiseControlType.STANDARD
UnflaggedApi: android.car.hardware.property.CruiseControlType#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.CruiseControlType.toString(int)
UnflaggedApi: android.car.hardware.property.EmergencyLaneKeepAssistState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.EmergencyLaneKeepAssistState
UnflaggedApi: android.car.hardware.property.EmergencyLaneKeepAssistState#ACTIVATED_STEER_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EmergencyLaneKeepAssistState.ACTIVATED_STEER_LEFT
UnflaggedApi: android.car.hardware.property.EmergencyLaneKeepAssistState#ACTIVATED_STEER_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EmergencyLaneKeepAssistState.ACTIVATED_STEER_RIGHT
UnflaggedApi: android.car.hardware.property.EmergencyLaneKeepAssistState#ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EmergencyLaneKeepAssistState.ENABLED
UnflaggedApi: android.car.hardware.property.EmergencyLaneKeepAssistState#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EmergencyLaneKeepAssistState.OTHER
UnflaggedApi: android.car.hardware.property.EmergencyLaneKeepAssistState#USER_OVERRIDE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EmergencyLaneKeepAssistState.USER_OVERRIDE
UnflaggedApi: android.car.hardware.property.EmergencyLaneKeepAssistState#WARNING_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EmergencyLaneKeepAssistState.WARNING_LEFT
UnflaggedApi: android.car.hardware.property.EmergencyLaneKeepAssistState#WARNING_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EmergencyLaneKeepAssistState.WARNING_RIGHT
UnflaggedApi: android.car.hardware.property.EmergencyLaneKeepAssistState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.EmergencyLaneKeepAssistState.toString(int)
UnflaggedApi: android.car.hardware.property.ErrorState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.ErrorState
UnflaggedApi: android.car.hardware.property.ErrorState#NOT_AVAILABLE_DISABLED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.ErrorState.NOT_AVAILABLE_DISABLED
UnflaggedApi: android.car.hardware.property.ErrorState#NOT_AVAILABLE_POOR_VISIBILITY:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.ErrorState.NOT_AVAILABLE_POOR_VISIBILITY
UnflaggedApi: android.car.hardware.property.ErrorState#NOT_AVAILABLE_SAFETY:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.ErrorState.NOT_AVAILABLE_SAFETY
UnflaggedApi: android.car.hardware.property.ErrorState#NOT_AVAILABLE_SPEED_HIGH:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.ErrorState.NOT_AVAILABLE_SPEED_HIGH
UnflaggedApi: android.car.hardware.property.ErrorState#NOT_AVAILABLE_SPEED_LOW:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.ErrorState.NOT_AVAILABLE_SPEED_LOW
UnflaggedApi: android.car.hardware.property.ErrorState#OTHER_ERROR_STATE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.ErrorState.OTHER_ERROR_STATE
UnflaggedApi: android.car.hardware.property.ErrorState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.ErrorState.toString(int)
UnflaggedApi: android.car.hardware.property.EvStoppingMode:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.EvStoppingMode
UnflaggedApi: android.car.hardware.property.EvStoppingMode#STATE_CREEP:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EvStoppingMode.STATE_CREEP
UnflaggedApi: android.car.hardware.property.EvStoppingMode#STATE_HOLD:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EvStoppingMode.STATE_HOLD
UnflaggedApi: android.car.hardware.property.EvStoppingMode#STATE_OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EvStoppingMode.STATE_OTHER
UnflaggedApi: android.car.hardware.property.EvStoppingMode#STATE_ROLL:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.EvStoppingMode.STATE_ROLL
UnflaggedApi: android.car.hardware.property.EvStoppingMode#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.EvStoppingMode.toString(int)
UnflaggedApi: android.car.hardware.property.ForwardCollisionWarningState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.ForwardCollisionWarningState
UnflaggedApi: android.car.hardware.property.ForwardCollisionWarningState#NO_WARNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.ForwardCollisionWarningState.NO_WARNING
UnflaggedApi: android.car.hardware.property.ForwardCollisionWarningState#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.ForwardCollisionWarningState.OTHER
UnflaggedApi: android.car.hardware.property.ForwardCollisionWarningState#WARNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.ForwardCollisionWarningState.WARNING
UnflaggedApi: android.car.hardware.property.ForwardCollisionWarningState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.ForwardCollisionWarningState.toString(int)
UnflaggedApi: android.car.hardware.property.HandsOnDetectionDriverState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.HandsOnDetectionDriverState
UnflaggedApi: android.car.hardware.property.HandsOnDetectionDriverState#HANDS_OFF:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.HandsOnDetectionDriverState.HANDS_OFF
UnflaggedApi: android.car.hardware.property.HandsOnDetectionDriverState#HANDS_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.HandsOnDetectionDriverState.HANDS_ON
UnflaggedApi: android.car.hardware.property.HandsOnDetectionDriverState#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.HandsOnDetectionDriverState.OTHER
UnflaggedApi: android.car.hardware.property.HandsOnDetectionDriverState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.HandsOnDetectionDriverState.toString(int)
UnflaggedApi: android.car.hardware.property.HandsOnDetectionWarning:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.HandsOnDetectionWarning
UnflaggedApi: android.car.hardware.property.HandsOnDetectionWarning#NO_WARNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.HandsOnDetectionWarning.NO_WARNING
UnflaggedApi: android.car.hardware.property.HandsOnDetectionWarning#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.HandsOnDetectionWarning.OTHER
UnflaggedApi: android.car.hardware.property.HandsOnDetectionWarning#WARNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.HandsOnDetectionWarning.WARNING
UnflaggedApi: android.car.hardware.property.HandsOnDetectionWarning#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.HandsOnDetectionWarning.toString(int)
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistCommand:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.LaneCenteringAssistCommand
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistCommand#ACTIVATE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneCenteringAssistCommand.ACTIVATE
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistCommand#DEACTIVATE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneCenteringAssistCommand.DEACTIVATE
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistCommand#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.LaneCenteringAssistCommand.toString(int)
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.LaneCenteringAssistState
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistState#ACTIVATED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneCenteringAssistState.ACTIVATED
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistState#ACTIVATION_REQUESTED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneCenteringAssistState.ACTIVATION_REQUESTED
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistState#ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneCenteringAssistState.ENABLED
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistState#FORCED_DEACTIVATION_WARNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneCenteringAssistState.FORCED_DEACTIVATION_WARNING
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistState#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneCenteringAssistState.OTHER
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistState#USER_OVERRIDE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneCenteringAssistState.USER_OVERRIDE
UnflaggedApi: android.car.hardware.property.LaneCenteringAssistState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.LaneCenteringAssistState.toString(int)
UnflaggedApi: android.car.hardware.property.LaneDepartureWarningState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.LaneDepartureWarningState
UnflaggedApi: android.car.hardware.property.LaneDepartureWarningState#NO_WARNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneDepartureWarningState.NO_WARNING
UnflaggedApi: android.car.hardware.property.LaneDepartureWarningState#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneDepartureWarningState.OTHER
UnflaggedApi: android.car.hardware.property.LaneDepartureWarningState#WARNING_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneDepartureWarningState.WARNING_LEFT
UnflaggedApi: android.car.hardware.property.LaneDepartureWarningState#WARNING_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneDepartureWarningState.WARNING_RIGHT
UnflaggedApi: android.car.hardware.property.LaneDepartureWarningState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.LaneDepartureWarningState.toString(int)
UnflaggedApi: android.car.hardware.property.LaneKeepAssistState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.LaneKeepAssistState
UnflaggedApi: android.car.hardware.property.LaneKeepAssistState#ACTIVATED_STEER_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneKeepAssistState.ACTIVATED_STEER_LEFT
UnflaggedApi: android.car.hardware.property.LaneKeepAssistState#ACTIVATED_STEER_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneKeepAssistState.ACTIVATED_STEER_RIGHT
UnflaggedApi: android.car.hardware.property.LaneKeepAssistState#ENABLED:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneKeepAssistState.ENABLED
UnflaggedApi: android.car.hardware.property.LaneKeepAssistState#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneKeepAssistState.OTHER
UnflaggedApi: android.car.hardware.property.LaneKeepAssistState#USER_OVERRIDE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.LaneKeepAssistState.USER_OVERRIDE
UnflaggedApi: android.car.hardware.property.LaneKeepAssistState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.LaneKeepAssistState.toString(int)
UnflaggedApi: android.car.hardware.property.PropertyNotAvailableException#getVendorErrorCode():
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.PropertyNotAvailableException.getVendorErrorCode()
UnflaggedApi: android.car.hardware.property.TrailerState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.TrailerState
UnflaggedApi: android.car.hardware.property.TrailerState#STATE_ERROR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.TrailerState.STATE_ERROR
UnflaggedApi: android.car.hardware.property.TrailerState#STATE_NOT_PRESENT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.TrailerState.STATE_NOT_PRESENT
UnflaggedApi: android.car.hardware.property.TrailerState#STATE_PRESENT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.TrailerState.STATE_PRESENT
UnflaggedApi: android.car.hardware.property.TrailerState#STATE_UNKNOWN:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.TrailerState.STATE_UNKNOWN
UnflaggedApi: android.car.hardware.property.TrailerState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.TrailerState.toString(int)
UnflaggedApi: android.car.hardware.property.VehicleLightState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.VehicleLightState
UnflaggedApi: android.car.hardware.property.VehicleLightState#STATE_DAYTIME_RUNNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleLightState.STATE_DAYTIME_RUNNING
UnflaggedApi: android.car.hardware.property.VehicleLightState#STATE_OFF:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleLightState.STATE_OFF
UnflaggedApi: android.car.hardware.property.VehicleLightState#STATE_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleLightState.STATE_ON
UnflaggedApi: android.car.hardware.property.VehicleLightState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.VehicleLightState.toString(int)
UnflaggedApi: android.car.hardware.property.VehicleLightSwitch:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.VehicleLightSwitch
UnflaggedApi: android.car.hardware.property.VehicleLightSwitch#STATE_AUTOMATIC:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleLightSwitch.STATE_AUTOMATIC
UnflaggedApi: android.car.hardware.property.VehicleLightSwitch#STATE_DAYTIME_RUNNING:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleLightSwitch.STATE_DAYTIME_RUNNING
UnflaggedApi: android.car.hardware.property.VehicleLightSwitch#STATE_OFF:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleLightSwitch.STATE_OFF
UnflaggedApi: android.car.hardware.property.VehicleLightSwitch#STATE_ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleLightSwitch.STATE_ON
UnflaggedApi: android.car.hardware.property.VehicleLightSwitch#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.VehicleLightSwitch.toString(int)
UnflaggedApi: android.car.hardware.property.VehicleOilLevel:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.VehicleOilLevel
UnflaggedApi: android.car.hardware.property.VehicleOilLevel#LEVEL_CRITICALLY_LOW:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleOilLevel.LEVEL_CRITICALLY_LOW
UnflaggedApi: android.car.hardware.property.VehicleOilLevel#LEVEL_ERROR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleOilLevel.LEVEL_ERROR
UnflaggedApi: android.car.hardware.property.VehicleOilLevel#LEVEL_HIGH:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleOilLevel.LEVEL_HIGH
UnflaggedApi: android.car.hardware.property.VehicleOilLevel#LEVEL_LOW:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleOilLevel.LEVEL_LOW
UnflaggedApi: android.car.hardware.property.VehicleOilLevel#LEVEL_NORMAL:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleOilLevel.LEVEL_NORMAL
UnflaggedApi: android.car.hardware.property.VehicleOilLevel#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.VehicleOilLevel.toString(int)
UnflaggedApi: android.car.hardware.property.VehicleTurnSignal:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.VehicleTurnSignal
UnflaggedApi: android.car.hardware.property.VehicleTurnSignal#STATE_LEFT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleTurnSignal.STATE_LEFT
UnflaggedApi: android.car.hardware.property.VehicleTurnSignal#STATE_NONE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleTurnSignal.STATE_NONE
UnflaggedApi: android.car.hardware.property.VehicleTurnSignal#STATE_RIGHT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleTurnSignal.STATE_RIGHT
UnflaggedApi: android.car.hardware.property.VehicleTurnSignal#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.VehicleTurnSignal.toString(int)
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.VehicleVendorPermission
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_1:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_1
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_10:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_10
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_2:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_2
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_3:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_3
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_4:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_4
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_5:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_5
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_6:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_6
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_7:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_7
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_8:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_8
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_9:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_9
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_DOOR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_DOOR
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_ENGINE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_ENGINE
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_HVAC:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_HVAC
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_INFO:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_INFO
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_LIGHT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_LIGHT
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_MIRROR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_MIRROR
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_SEAT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_SEAT
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_GET_CAR_VENDOR_CATEGORY_WINDOW:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_GET_CAR_VENDOR_CATEGORY_WINDOW
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_1:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_1
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_10:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_10
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_2:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_2
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_3:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_3
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_4:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_4
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_5:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_5
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_6:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_6
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_7:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_7
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_8:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_8
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_9:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_9
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_DOOR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_DOOR
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_ENGINE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_ENGINE
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_HVAC:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_HVAC
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_INFO:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_INFO
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_LIGHT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_LIGHT
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_MIRROR:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_MIRROR
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_SEAT:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_SEAT
UnflaggedApi: android.car.hardware.property.VehicleVendorPermission#PERMISSION_SET_CAR_VENDOR_CATEGORY_WINDOW:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.VehicleVendorPermission.PERMISSION_SET_CAR_VENDOR_CATEGORY_WINDOW
UnflaggedApi: android.car.hardware.property.WindshieldWipersState:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.WindshieldWipersState
UnflaggedApi: android.car.hardware.property.WindshieldWipersState#OFF:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersState.OFF
UnflaggedApi: android.car.hardware.property.WindshieldWipersState#ON:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersState.ON
UnflaggedApi: android.car.hardware.property.WindshieldWipersState#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersState.OTHER
UnflaggedApi: android.car.hardware.property.WindshieldWipersState#SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersState.SERVICE
UnflaggedApi: android.car.hardware.property.WindshieldWipersState#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.WindshieldWipersState.toString(int)
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch:
    New API must be flagged with @FlaggedApi: class android.car.hardware.property.WindshieldWipersSwitch
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#AUTO:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.AUTO
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#CONTINUOUS_LEVEL_1:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.CONTINUOUS_LEVEL_1
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#CONTINUOUS_LEVEL_2:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.CONTINUOUS_LEVEL_2
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#CONTINUOUS_LEVEL_3:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.CONTINUOUS_LEVEL_3
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#CONTINUOUS_LEVEL_4:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.CONTINUOUS_LEVEL_4
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#CONTINUOUS_LEVEL_5:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.CONTINUOUS_LEVEL_5
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#INTERMITTENT_LEVEL_1:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.INTERMITTENT_LEVEL_1
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#INTERMITTENT_LEVEL_2:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.INTERMITTENT_LEVEL_2
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#INTERMITTENT_LEVEL_3:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.INTERMITTENT_LEVEL_3
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#INTERMITTENT_LEVEL_4:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.INTERMITTENT_LEVEL_4
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#INTERMITTENT_LEVEL_5:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.INTERMITTENT_LEVEL_5
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#MIST:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.MIST
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#OFF:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.OFF
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#OTHER:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.OTHER
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#SERVICE:
    New API must be flagged with @FlaggedApi: field android.car.hardware.property.WindshieldWipersSwitch.SERVICE
UnflaggedApi: android.car.hardware.property.WindshieldWipersSwitch#toString(int):
    New API must be flagged with @FlaggedApi: method android.car.hardware.property.WindshieldWipersSwitch.toString(int)
UnflaggedApi: android.car.input.CarInputManager#CAPTURE_REQ_FLAGS_ALLOW_DELAYED_GRANT:
    New API must be flagged with @FlaggedApi: field android.car.input.CarInputManager.CAPTURE_REQ_FLAGS_ALLOW_DELAYED_GRANT
UnflaggedApi: android.car.input.CarInputManager#CAPTURE_REQ_FLAGS_TAKE_ALL_EVENTS_FOR_DISPLAY:
    New API must be flagged with @FlaggedApi: field android.car.input.CarInputManager.CAPTURE_REQ_FLAGS_TAKE_ALL_EVENTS_FOR_DISPLAY
UnflaggedApi: android.car.input.CarInputManager#INPUT_CAPTURE_RESPONSE_DELAYED:
    New API must be flagged with @FlaggedApi: field android.car.input.CarInputManager.INPUT_CAPTURE_RESPONSE_DELAYED
UnflaggedApi: android.car.input.CarInputManager#INPUT_CAPTURE_RESPONSE_FAILED:
    New API must be flagged with @FlaggedApi: field android.car.input.CarInputManager.INPUT_CAPTURE_RESPONSE_FAILED
UnflaggedApi: android.car.input.CarInputManager#INPUT_CAPTURE_RESPONSE_SUCCEEDED:
    New API must be flagged with @FlaggedApi: field android.car.input.CarInputManager.INPUT_CAPTURE_RESPONSE_SUCCEEDED
UnflaggedApi: android.car.input.CarInputManager#INPUT_TYPE_ALL_INPUTS:
    New API must be flagged with @FlaggedApi: field android.car.input.CarInputManager.INPUT_TYPE_ALL_INPUTS
UnflaggedApi: android.car.input.CarInputManager#injectKeyEvent(android.view.KeyEvent, int):
    New API must be flagged with @FlaggedApi: method android.car.input.CarInputManager.injectKeyEvent(android.view.KeyEvent,int)
UnflaggedApi: android.car.input.CarInputManager#releaseInputEventCapture(int):
    New API must be flagged with @FlaggedApi: method android.car.input.CarInputManager.releaseInputEventCapture(int)
UnflaggedApi: android.car.input.CarInputManager#requestInputEventCapture(int, int[], int, android.car.input.CarInputManager.CarInputCaptureCallback):
    New API must be flagged with @FlaggedApi: method android.car.input.CarInputManager.requestInputEventCapture(int,int[],int,android.car.input.CarInputManager.CarInputCaptureCallback)
UnflaggedApi: android.car.input.CarInputManager#requestInputEventCapture(int, int[], int, java.util.concurrent.Executor, android.car.input.CarInputManager.CarInputCaptureCallback):
    New API must be flagged with @FlaggedApi: method android.car.input.CarInputManager.requestInputEventCapture(int,int[],int,java.util.concurrent.Executor,android.car.input.CarInputManager.CarInputCaptureCallback)
UnflaggedApi: android.car.input.CarInputManager.CarInputCaptureCallback:
    New API must be flagged with @FlaggedApi: class android.car.input.CarInputManager.CarInputCaptureCallback
UnflaggedApi: android.car.input.CarInputManager.CarInputCaptureCallback#onCaptureStateChanged(int, int[]):
    New API must be flagged with @FlaggedApi: method android.car.input.CarInputManager.CarInputCaptureCallback.onCaptureStateChanged(int,int[])
UnflaggedApi: android.car.input.CarInputManager.CarInputCaptureCallback#onCustomInputEvents(int, java.util.List<android.car.input.CustomInputEvent>):
    New API must be flagged with @FlaggedApi: method android.car.input.CarInputManager.CarInputCaptureCallback.onCustomInputEvents(int,java.util.List<android.car.input.CustomInputEvent>)
UnflaggedApi: android.car.input.CarInputManager.CarInputCaptureCallback#onKeyEvents(int, java.util.List<android.view.KeyEvent>):
    New API must be flagged with @FlaggedApi: method android.car.input.CarInputManager.CarInputCaptureCallback.onKeyEvents(int,java.util.List<android.view.KeyEvent>)
UnflaggedApi: android.car.input.CarInputManager.CarInputCaptureCallback#onRotaryEvents(int, java.util.List<android.car.input.RotaryEvent>):
    New API must be flagged with @FlaggedApi: method android.car.input.CarInputManager.CarInputCaptureCallback.onRotaryEvents(int,java.util.List<android.car.input.RotaryEvent>)
UnflaggedApi: android.car.input.CustomInputEvent:
    New API must be flagged with @FlaggedApi: class android.car.input.CustomInputEvent
UnflaggedApi: android.car.input.CustomInputEvent#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.CREATOR
UnflaggedApi: android.car.input.CustomInputEvent#CustomInputEvent(int, int, int):
    New API must be flagged with @FlaggedApi: constructor android.car.input.CustomInputEvent(int,int,int)
UnflaggedApi: android.car.input.CustomInputEvent#INPUT_CODE_F1:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.INPUT_CODE_F1
UnflaggedApi: android.car.input.CustomInputEvent#INPUT_CODE_F10:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.INPUT_CODE_F10
UnflaggedApi: android.car.input.CustomInputEvent#INPUT_CODE_F2:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.INPUT_CODE_F2
UnflaggedApi: android.car.input.CustomInputEvent#INPUT_CODE_F3:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.INPUT_CODE_F3
UnflaggedApi: android.car.input.CustomInputEvent#INPUT_CODE_F4:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.INPUT_CODE_F4
UnflaggedApi: android.car.input.CustomInputEvent#INPUT_CODE_F5:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.INPUT_CODE_F5
UnflaggedApi: android.car.input.CustomInputEvent#INPUT_CODE_F6:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.INPUT_CODE_F6
UnflaggedApi: android.car.input.CustomInputEvent#INPUT_CODE_F7:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.INPUT_CODE_F7
UnflaggedApi: android.car.input.CustomInputEvent#INPUT_CODE_F8:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.INPUT_CODE_F8
UnflaggedApi: android.car.input.CustomInputEvent#INPUT_CODE_F9:
    New API must be flagged with @FlaggedApi: field android.car.input.CustomInputEvent.INPUT_CODE_F9
UnflaggedApi: android.car.input.CustomInputEvent#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.input.CustomInputEvent.describeContents()
UnflaggedApi: android.car.input.CustomInputEvent#getInputCode():
    New API must be flagged with @FlaggedApi: method android.car.input.CustomInputEvent.getInputCode()
UnflaggedApi: android.car.input.CustomInputEvent#getRepeatCounter():
    New API must be flagged with @FlaggedApi: method android.car.input.CustomInputEvent.getRepeatCounter()
UnflaggedApi: android.car.input.CustomInputEvent#getTargetDisplayType():
    New API must be flagged with @FlaggedApi: method android.car.input.CustomInputEvent.getTargetDisplayType()
UnflaggedApi: android.car.input.CustomInputEvent#inputCodeToString(int):
    New API must be flagged with @FlaggedApi: method android.car.input.CustomInputEvent.inputCodeToString(int)
UnflaggedApi: android.car.input.CustomInputEvent#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.input.CustomInputEvent.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.input.RotaryEvent:
    New API must be flagged with @FlaggedApi: class android.car.input.RotaryEvent
UnflaggedApi: android.car.input.RotaryEvent#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.input.RotaryEvent.CREATOR
UnflaggedApi: android.car.input.RotaryEvent#RotaryEvent(int, boolean, long[]):
    New API must be flagged with @FlaggedApi: constructor android.car.input.RotaryEvent(int,boolean,long[])
UnflaggedApi: android.car.input.RotaryEvent#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.input.RotaryEvent.describeContents()
UnflaggedApi: android.car.input.RotaryEvent#getInputType():
    New API must be flagged with @FlaggedApi: method android.car.input.RotaryEvent.getInputType()
UnflaggedApi: android.car.input.RotaryEvent#getNumberOfClicks():
    New API must be flagged with @FlaggedApi: method android.car.input.RotaryEvent.getNumberOfClicks()
UnflaggedApi: android.car.input.RotaryEvent#getUptimeMillisForClick(int):
    New API must be flagged with @FlaggedApi: method android.car.input.RotaryEvent.getUptimeMillisForClick(int)
UnflaggedApi: android.car.input.RotaryEvent#getUptimeMillisForClicks():
    New API must be flagged with @FlaggedApi: method android.car.input.RotaryEvent.getUptimeMillisForClicks()
UnflaggedApi: android.car.input.RotaryEvent#isClockwise():
    New API must be flagged with @FlaggedApi: method android.car.input.RotaryEvent.isClockwise()
UnflaggedApi: android.car.input.RotaryEvent#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.input.RotaryEvent.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.media.AudioZonesMirrorStatusCallback:
    New API must be flagged with @FlaggedApi: class android.car.media.AudioZonesMirrorStatusCallback
UnflaggedApi: android.car.media.AudioZonesMirrorStatusCallback#onAudioZonesMirrorStatusChanged(java.util.List<java.lang.Integer>, int):
    New API must be flagged with @FlaggedApi: method android.car.media.AudioZonesMirrorStatusCallback.onAudioZonesMirrorStatusChanged(java.util.List<java.lang.Integer>,int)
UnflaggedApi: android.car.media.CarAudioManager#AUDIOFOCUS_EXTRA_RECEIVE_DUCKING_EVENTS:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.AUDIOFOCUS_EXTRA_RECEIVE_DUCKING_EVENTS
UnflaggedApi: android.car.media.CarAudioManager#AUDIO_MIRROR_CAN_ENABLE:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.AUDIO_MIRROR_CAN_ENABLE
UnflaggedApi: android.car.media.CarAudioManager#AUDIO_MIRROR_INTERNAL_ERROR:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.AUDIO_MIRROR_INTERNAL_ERROR
UnflaggedApi: android.car.media.CarAudioManager#AUDIO_MIRROR_OUT_OF_OUTPUT_DEVICES:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.AUDIO_MIRROR_OUT_OF_OUTPUT_DEVICES
UnflaggedApi: android.car.media.CarAudioManager#AUDIO_REQUEST_STATUS_APPROVED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.AUDIO_REQUEST_STATUS_APPROVED
UnflaggedApi: android.car.media.CarAudioManager#AUDIO_REQUEST_STATUS_CANCELLED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.AUDIO_REQUEST_STATUS_CANCELLED
UnflaggedApi: android.car.media.CarAudioManager#AUDIO_REQUEST_STATUS_REJECTED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.AUDIO_REQUEST_STATUS_REJECTED
UnflaggedApi: android.car.media.CarAudioManager#AUDIO_REQUEST_STATUS_STOPPED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.AUDIO_REQUEST_STATUS_STOPPED
UnflaggedApi: android.car.media.CarAudioManager#INVALID_AUDIO_ZONE:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.INVALID_AUDIO_ZONE
UnflaggedApi: android.car.media.CarAudioManager#INVALID_REQUEST_ID:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.INVALID_REQUEST_ID
UnflaggedApi: android.car.media.CarAudioManager#PRIMARY_AUDIO_ZONE:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioManager.PRIMARY_AUDIO_ZONE
UnflaggedApi: android.car.media.CarAudioManager#allowMediaAudioOnPrimaryZone(long, boolean):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.allowMediaAudioOnPrimaryZone(long,boolean)
UnflaggedApi: android.car.media.CarAudioManager#canEnableAudioMirror():
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.canEnableAudioMirror()
UnflaggedApi: android.car.media.CarAudioManager#cancelMediaAudioOnPrimaryZone(long):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.cancelMediaAudioOnPrimaryZone(long)
UnflaggedApi: android.car.media.CarAudioManager#clearAudioZonesMirrorStatusCallback():
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.clearAudioZonesMirrorStatusCallback()
UnflaggedApi: android.car.media.CarAudioManager#clearPrimaryZoneMediaAudioRequestCallback():
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.clearPrimaryZoneMediaAudioRequestCallback()
UnflaggedApi: android.car.media.CarAudioManager#disableAudioMirror(long):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.disableAudioMirror(long)
UnflaggedApi: android.car.media.CarAudioManager#disableAudioMirrorForZone(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.disableAudioMirrorForZone(int)
UnflaggedApi: android.car.media.CarAudioManager#enableMirrorForAudioZones(java.util.List<java.lang.Integer>):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.enableMirrorForAudioZones(java.util.List<java.lang.Integer>)
UnflaggedApi: android.car.media.CarAudioManager#extendAudioMirrorRequest(long, java.util.List<java.lang.Integer>):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.extendAudioMirrorRequest(long,java.util.List<java.lang.Integer>)
UnflaggedApi: android.car.media.CarAudioManager#getAudioAttributesForVolumeGroup(android.car.media.CarVolumeGroupInfo):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getAudioAttributesForVolumeGroup(android.car.media.CarVolumeGroupInfo)
UnflaggedApi: android.car.media.CarAudioManager#getAudioZoneConfigInfos(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getAudioZoneConfigInfos(int)
UnflaggedApi: android.car.media.CarAudioManager#getAudioZoneIds():
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getAudioZoneIds()
UnflaggedApi: android.car.media.CarAudioManager#getCurrentAudioZoneConfigInfo(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getCurrentAudioZoneConfigInfo(int)
UnflaggedApi: android.car.media.CarAudioManager#getGroupMaxVolume(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getGroupMaxVolume(int)
UnflaggedApi: android.car.media.CarAudioManager#getGroupMaxVolume(int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getGroupMaxVolume(int,int)
UnflaggedApi: android.car.media.CarAudioManager#getGroupMinVolume(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getGroupMinVolume(int)
UnflaggedApi: android.car.media.CarAudioManager#getGroupMinVolume(int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getGroupMinVolume(int,int)
UnflaggedApi: android.car.media.CarAudioManager#getGroupVolume(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getGroupVolume(int)
UnflaggedApi: android.car.media.CarAudioManager#getGroupVolume(int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getGroupVolume(int,int)
UnflaggedApi: android.car.media.CarAudioManager#getInputDevicesForZoneId(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getInputDevicesForZoneId(int)
UnflaggedApi: android.car.media.CarAudioManager#getMirrorAudioZonesForAudioZone(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getMirrorAudioZonesForAudioZone(int)
UnflaggedApi: android.car.media.CarAudioManager#getMirrorAudioZonesForMirrorRequest(long):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getMirrorAudioZonesForMirrorRequest(long)
UnflaggedApi: android.car.media.CarAudioManager#getOutputDeviceForUsage(int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getOutputDeviceForUsage(int,int)
UnflaggedApi: android.car.media.CarAudioManager#getUsagesForVolumeGroupId(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getUsagesForVolumeGroupId(int)
UnflaggedApi: android.car.media.CarAudioManager#getUsagesForVolumeGroupId(int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getUsagesForVolumeGroupId(int,int)
UnflaggedApi: android.car.media.CarAudioManager#getVolumeGroupCount():
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getVolumeGroupCount()
UnflaggedApi: android.car.media.CarAudioManager#getVolumeGroupCount(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getVolumeGroupCount(int)
UnflaggedApi: android.car.media.CarAudioManager#getVolumeGroupIdForUsage(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getVolumeGroupIdForUsage(int)
UnflaggedApi: android.car.media.CarAudioManager#getVolumeGroupIdForUsage(int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getVolumeGroupIdForUsage(int,int)
UnflaggedApi: android.car.media.CarAudioManager#getVolumeGroupInfo(int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getVolumeGroupInfo(int,int)
UnflaggedApi: android.car.media.CarAudioManager#getVolumeGroupInfosForZone(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.getVolumeGroupInfosForZone(int)
UnflaggedApi: android.car.media.CarAudioManager#isMediaAudioAllowedInPrimaryZone(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.isMediaAudioAllowedInPrimaryZone(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.media.CarAudioManager#isPlaybackOnVolumeGroupActive(int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.isPlaybackOnVolumeGroupActive(int,int)
UnflaggedApi: android.car.media.CarAudioManager#isVolumeGroupMuted(int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.isVolumeGroupMuted(int,int)
UnflaggedApi: android.car.media.CarAudioManager#registerCarVolumeGroupEventCallback(java.util.concurrent.Executor, android.car.media.CarVolumeGroupEventCallback):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.registerCarVolumeGroupEventCallback(java.util.concurrent.Executor,android.car.media.CarVolumeGroupEventCallback)
UnflaggedApi: android.car.media.CarAudioManager#requestMediaAudioOnPrimaryZone(android.car.CarOccupantZoneManager.OccupantZoneInfo, java.util.concurrent.Executor, android.car.media.MediaAudioRequestStatusCallback):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.requestMediaAudioOnPrimaryZone(android.car.CarOccupantZoneManager.OccupantZoneInfo,java.util.concurrent.Executor,android.car.media.MediaAudioRequestStatusCallback)
UnflaggedApi: android.car.media.CarAudioManager#resetMediaAudioOnPrimaryZone(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.resetMediaAudioOnPrimaryZone(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.media.CarAudioManager#setAudioZoneMirrorStatusCallback(java.util.concurrent.Executor, android.car.media.AudioZonesMirrorStatusCallback):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.setAudioZoneMirrorStatusCallback(java.util.concurrent.Executor,android.car.media.AudioZonesMirrorStatusCallback)
UnflaggedApi: android.car.media.CarAudioManager#setBalanceTowardRight(float):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.setBalanceTowardRight(float)
UnflaggedApi: android.car.media.CarAudioManager#setFadeTowardFront(float):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.setFadeTowardFront(float)
UnflaggedApi: android.car.media.CarAudioManager#setGroupVolume(int, int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.setGroupVolume(int,int,int)
UnflaggedApi: android.car.media.CarAudioManager#setGroupVolume(int, int, int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.setGroupVolume(int,int,int,int)
UnflaggedApi: android.car.media.CarAudioManager#setPrimaryZoneMediaAudioRequestCallback(java.util.concurrent.Executor, android.car.media.PrimaryZoneMediaAudioRequestCallback):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.setPrimaryZoneMediaAudioRequestCallback(java.util.concurrent.Executor,android.car.media.PrimaryZoneMediaAudioRequestCallback)
UnflaggedApi: android.car.media.CarAudioManager#setVolumeGroupMute(int, int, boolean, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.setVolumeGroupMute(int,int,boolean,int)
UnflaggedApi: android.car.media.CarAudioManager#switchAudioZoneToConfig(android.car.media.CarAudioZoneConfigInfo, java.util.concurrent.Executor, android.car.media.SwitchAudioZoneConfigCallback):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.switchAudioZoneToConfig(android.car.media.CarAudioZoneConfigInfo,java.util.concurrent.Executor,android.car.media.SwitchAudioZoneConfigCallback)
UnflaggedApi: android.car.media.CarAudioManager#unregisterCarVolumeGroupEventCallback(android.car.media.CarVolumeGroupEventCallback):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioManager.unregisterCarVolumeGroupEventCallback(android.car.media.CarVolumeGroupEventCallback)
UnflaggedApi: android.car.media.CarAudioPatchHandle:
    New API must be flagged with @FlaggedApi: class android.car.media.CarAudioPatchHandle
UnflaggedApi: android.car.media.CarAudioPatchHandle#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioPatchHandle.CREATOR
UnflaggedApi: android.car.media.CarAudioPatchHandle#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioPatchHandle.describeContents()
UnflaggedApi: android.car.media.CarAudioPatchHandle#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioPatchHandle.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.media.CarAudioZoneConfigInfo:
    New API must be flagged with @FlaggedApi: class android.car.media.CarAudioZoneConfigInfo
UnflaggedApi: android.car.media.CarAudioZoneConfigInfo#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.media.CarAudioZoneConfigInfo.CREATOR
UnflaggedApi: android.car.media.CarAudioZoneConfigInfo#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioZoneConfigInfo.describeContents()
UnflaggedApi: android.car.media.CarAudioZoneConfigInfo#getConfigId():
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioZoneConfigInfo.getConfigId()
UnflaggedApi: android.car.media.CarAudioZoneConfigInfo#getName():
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioZoneConfigInfo.getName()
UnflaggedApi: android.car.media.CarAudioZoneConfigInfo#getZoneId():
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioZoneConfigInfo.getZoneId()
UnflaggedApi: android.car.media.CarAudioZoneConfigInfo#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarAudioZoneConfigInfo.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.media.CarMediaManager:
    New API must be flagged with @FlaggedApi: class android.car.media.CarMediaManager
UnflaggedApi: android.car.media.CarMediaManager#MEDIA_SOURCE_MODE_BROWSE:
    New API must be flagged with @FlaggedApi: field android.car.media.CarMediaManager.MEDIA_SOURCE_MODE_BROWSE
UnflaggedApi: android.car.media.CarMediaManager#MEDIA_SOURCE_MODE_PLAYBACK:
    New API must be flagged with @FlaggedApi: field android.car.media.CarMediaManager.MEDIA_SOURCE_MODE_PLAYBACK
UnflaggedApi: android.car.media.CarMediaManager#addMediaSourceListener(android.car.media.CarMediaManager.MediaSourceChangedListener, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarMediaManager.addMediaSourceListener(android.car.media.CarMediaManager.MediaSourceChangedListener,int)
UnflaggedApi: android.car.media.CarMediaManager#getLastMediaSources(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarMediaManager.getLastMediaSources(int)
UnflaggedApi: android.car.media.CarMediaManager#getMediaSource(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarMediaManager.getMediaSource(int)
UnflaggedApi: android.car.media.CarMediaManager#removeMediaSourceListener(android.car.media.CarMediaManager.MediaSourceChangedListener, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarMediaManager.removeMediaSourceListener(android.car.media.CarMediaManager.MediaSourceChangedListener,int)
UnflaggedApi: android.car.media.CarMediaManager#setMediaSource(android.content.ComponentName, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarMediaManager.setMediaSource(android.content.ComponentName,int)
UnflaggedApi: android.car.media.CarMediaManager.MediaSourceChangedListener:
    New API must be flagged with @FlaggedApi: class android.car.media.CarMediaManager.MediaSourceChangedListener
UnflaggedApi: android.car.media.CarMediaManager.MediaSourceChangedListener#onMediaSourceChanged(android.content.ComponentName):
    New API must be flagged with @FlaggedApi: method android.car.media.CarMediaManager.MediaSourceChangedListener.onMediaSourceChanged(android.content.ComponentName)
UnflaggedApi: android.car.media.CarVolumeGroupEvent:
    New API must be flagged with @FlaggedApi: class android.car.media.CarVolumeGroupEvent
UnflaggedApi: android.car.media.CarVolumeGroupEvent#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.CREATOR
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EVENT_TYPE_ATTENUATION_CHANGED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EVENT_TYPE_ATTENUATION_CHANGED
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EVENT_TYPE_MUTE_CHANGED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EVENT_TYPE_MUTE_CHANGED
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EVENT_TYPE_VOLUME_BLOCKED_CHANGED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EVENT_TYPE_VOLUME_BLOCKED_CHANGED
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EVENT_TYPE_VOLUME_GAIN_INDEX_CHANGED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EVENT_TYPE_VOLUME_GAIN_INDEX_CHANGED
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EVENT_TYPE_VOLUME_MAX_INDEX_CHANGED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EVENT_TYPE_VOLUME_MAX_INDEX_CHANGED
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EVENT_TYPE_VOLUME_MIN_INDEX_CHANGED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EVENT_TYPE_VOLUME_MIN_INDEX_CHANGED
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EVENT_TYPE_ZONE_CONFIGURATION_CHANGED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EVENT_TYPE_ZONE_CONFIGURATION_CHANGED
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_ATTENUATION_ACTIVATION:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_ATTENUATION_ACTIVATION
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_MUTE_LOCKED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_MUTE_LOCKED
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_MUTE_TOGGLED_BY_AUDIO_SYSTEM:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_MUTE_TOGGLED_BY_AUDIO_SYSTEM
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_MUTE_TOGGLED_BY_EMERGENCY:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_MUTE_TOGGLED_BY_EMERGENCY
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_MUTE_TOGGLED_BY_KEYEVENT:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_MUTE_TOGGLED_BY_KEYEVENT
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_MUTE_TOGGLED_BY_UI:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_MUTE_TOGGLED_BY_UI
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_NONE:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_NONE
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_PLAY_SOUND:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_PLAY_SOUND
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_SHOW_UI:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_SHOW_UI
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_TRANSIENT_ATTENUATION_DUCKED:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_TRANSIENT_ATTENUATION_DUCKED
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_TRANSIENT_ATTENUATION_EXTERNAL:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_TRANSIENT_ATTENUATION_EXTERNAL
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_TRANSIENT_ATTENUATION_NAVIGATION:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_TRANSIENT_ATTENUATION_NAVIGATION
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_TRANSIENT_ATTENUATION_PROJECTION:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_TRANSIENT_ATTENUATION_PROJECTION
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_TRANSIENT_ATTENUATION_THERMAL:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_TRANSIENT_ATTENUATION_THERMAL
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_VOLUME_INDEX_CHANGED_BY_AUDIO_SYSTEM:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_VOLUME_INDEX_CHANGED_BY_AUDIO_SYSTEM
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_VOLUME_INDEX_CHANGED_BY_KEYEVENT:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_VOLUME_INDEX_CHANGED_BY_KEYEVENT
UnflaggedApi: android.car.media.CarVolumeGroupEvent#EXTRA_INFO_VOLUME_INDEX_CHANGED_BY_UI:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupEvent.EXTRA_INFO_VOLUME_INDEX_CHANGED_BY_UI
UnflaggedApi: android.car.media.CarVolumeGroupEvent#convertExtraInfoToFlags(java.util.List<java.lang.Integer>):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.convertExtraInfoToFlags(java.util.List<java.lang.Integer>)
UnflaggedApi: android.car.media.CarVolumeGroupEvent#convertFlagsToExtraInfo(int, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.convertFlagsToExtraInfo(int,int)
UnflaggedApi: android.car.media.CarVolumeGroupEvent#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.describeContents()
UnflaggedApi: android.car.media.CarVolumeGroupEvent#eventTypeToString(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.eventTypeToString(int)
UnflaggedApi: android.car.media.CarVolumeGroupEvent#extraInfosToString(java.util.List<java.lang.Integer>):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.extraInfosToString(java.util.List<java.lang.Integer>)
UnflaggedApi: android.car.media.CarVolumeGroupEvent#getCarVolumeGroupInfos():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.getCarVolumeGroupInfos()
UnflaggedApi: android.car.media.CarVolumeGroupEvent#getEventTypes():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.getEventTypes()
UnflaggedApi: android.car.media.CarVolumeGroupEvent#getExtraInfos():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.getExtraInfos()
UnflaggedApi: android.car.media.CarVolumeGroupEvent#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.media.CarVolumeGroupEvent.Builder:
    New API must be flagged with @FlaggedApi: class android.car.media.CarVolumeGroupEvent.Builder
UnflaggedApi: android.car.media.CarVolumeGroupEvent.Builder#Builder(java.util.List<android.car.media.CarVolumeGroupInfo>, int):
    New API must be flagged with @FlaggedApi: constructor android.car.media.CarVolumeGroupEvent.Builder(java.util.List<android.car.media.CarVolumeGroupInfo>,int)
UnflaggedApi: android.car.media.CarVolumeGroupEvent.Builder#Builder(java.util.List<android.car.media.CarVolumeGroupInfo>, int, java.util.List<java.lang.Integer>):
    New API must be flagged with @FlaggedApi: constructor android.car.media.CarVolumeGroupEvent.Builder(java.util.List<android.car.media.CarVolumeGroupInfo>,int,java.util.List<java.lang.Integer>)
UnflaggedApi: android.car.media.CarVolumeGroupEvent.Builder#addCarVolumeGroupInfo(android.car.media.CarVolumeGroupInfo):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.Builder.addCarVolumeGroupInfo(android.car.media.CarVolumeGroupInfo)
UnflaggedApi: android.car.media.CarVolumeGroupEvent.Builder#addEventType(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.Builder.addEventType(int)
UnflaggedApi: android.car.media.CarVolumeGroupEvent.Builder#addExtraInfo(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.Builder.addExtraInfo(int)
UnflaggedApi: android.car.media.CarVolumeGroupEvent.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.Builder.build()
UnflaggedApi: android.car.media.CarVolumeGroupEvent.Builder#setExtraInfos(java.util.List<java.lang.Integer>):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEvent.Builder.setExtraInfos(java.util.List<java.lang.Integer>)
UnflaggedApi: android.car.media.CarVolumeGroupEventCallback:
    New API must be flagged with @FlaggedApi: class android.car.media.CarVolumeGroupEventCallback
UnflaggedApi: android.car.media.CarVolumeGroupEventCallback#onVolumeGroupEvent(java.util.List<android.car.media.CarVolumeGroupEvent>):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupEventCallback.onVolumeGroupEvent(java.util.List<android.car.media.CarVolumeGroupEvent>)
UnflaggedApi: android.car.media.CarVolumeGroupInfo:
    New API must be flagged with @FlaggedApi: class android.car.media.CarVolumeGroupInfo
UnflaggedApi: android.car.media.CarVolumeGroupInfo#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.media.CarVolumeGroupInfo.CREATOR
UnflaggedApi: android.car.media.CarVolumeGroupInfo#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.describeContents()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#getAudioAttributes():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.getAudioAttributes()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#getId():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.getId()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#getMaxVolumeGainIndex():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.getMaxVolumeGainIndex()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#getMinVolumeGainIndex():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.getMinVolumeGainIndex()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#getName():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.getName()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#getVolumeGainIndex():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.getVolumeGainIndex()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#getZoneId():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.getZoneId()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#isAttenuated():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.isAttenuated()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#isBlocked():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.isBlocked()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#isMuted():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.isMuted()
UnflaggedApi: android.car.media.CarVolumeGroupInfo#isSameVolumeGroup(android.car.media.CarVolumeGroupInfo):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.isSameVolumeGroup(android.car.media.CarVolumeGroupInfo)
UnflaggedApi: android.car.media.CarVolumeGroupInfo#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder:
    New API must be flagged with @FlaggedApi: class android.car.media.CarVolumeGroupInfo.Builder
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder#Builder(String, int, int):
    New API must be flagged with @FlaggedApi: constructor android.car.media.CarVolumeGroupInfo.Builder(String,int,int)
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder#Builder(android.car.media.CarVolumeGroupInfo):
    New API must be flagged with @FlaggedApi: constructor android.car.media.CarVolumeGroupInfo.Builder(android.car.media.CarVolumeGroupInfo)
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.Builder.build()
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder#setAttenuated(boolean):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.Builder.setAttenuated(boolean)
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder#setAudioAttributes(java.util.List<android.media.AudioAttributes>):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.Builder.setAudioAttributes(java.util.List<android.media.AudioAttributes>)
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder#setBlocked(boolean):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.Builder.setBlocked(boolean)
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder#setMaxVolumeGainIndex(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.Builder.setMaxVolumeGainIndex(int)
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder#setMinVolumeGainIndex(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.Builder.setMinVolumeGainIndex(int)
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder#setMuted(boolean):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.Builder.setMuted(boolean)
UnflaggedApi: android.car.media.CarVolumeGroupInfo.Builder#setVolumeGainIndex(int):
    New API must be flagged with @FlaggedApi: method android.car.media.CarVolumeGroupInfo.Builder.setVolumeGainIndex(int)
UnflaggedApi: android.car.media.MediaAudioRequestStatusCallback:
    New API must be flagged with @FlaggedApi: class android.car.media.MediaAudioRequestStatusCallback
UnflaggedApi: android.car.media.MediaAudioRequestStatusCallback#onMediaAudioRequestStatusChanged(android.car.CarOccupantZoneManager.OccupantZoneInfo, long, int):
    New API must be flagged with @FlaggedApi: method android.car.media.MediaAudioRequestStatusCallback.onMediaAudioRequestStatusChanged(android.car.CarOccupantZoneManager.OccupantZoneInfo,long,int)
UnflaggedApi: android.car.media.PrimaryZoneMediaAudioRequestCallback:
    New API must be flagged with @FlaggedApi: class android.car.media.PrimaryZoneMediaAudioRequestCallback
UnflaggedApi: android.car.media.PrimaryZoneMediaAudioRequestCallback#onMediaAudioRequestStatusChanged(android.car.CarOccupantZoneManager.OccupantZoneInfo, long, int):
    New API must be flagged with @FlaggedApi: method android.car.media.PrimaryZoneMediaAudioRequestCallback.onMediaAudioRequestStatusChanged(android.car.CarOccupantZoneManager.OccupantZoneInfo,long,int)
UnflaggedApi: android.car.media.PrimaryZoneMediaAudioRequestCallback#onRequestMediaOnPrimaryZone(android.car.CarOccupantZoneManager.OccupantZoneInfo, long):
    New API must be flagged with @FlaggedApi: method android.car.media.PrimaryZoneMediaAudioRequestCallback.onRequestMediaOnPrimaryZone(android.car.CarOccupantZoneManager.OccupantZoneInfo,long)
UnflaggedApi: android.car.media.SwitchAudioZoneConfigCallback:
    New API must be flagged with @FlaggedApi: class android.car.media.SwitchAudioZoneConfigCallback
UnflaggedApi: android.car.media.SwitchAudioZoneConfigCallback#onAudioZoneConfigSwitched(android.car.media.CarAudioZoneConfigInfo, boolean):
    New API must be flagged with @FlaggedApi: method android.car.media.SwitchAudioZoneConfigCallback.onAudioZoneConfigSwitched(android.car.media.CarAudioZoneConfigInfo,boolean)
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster:
    New API must be flagged with @FlaggedApi: class android.car.navigation.CarNavigationInstrumentCluster
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#CLUSTER_TYPE_CUSTOM_IMAGES_SUPPORTED:
    New API must be flagged with @FlaggedApi: field android.car.navigation.CarNavigationInstrumentCluster.CLUSTER_TYPE_CUSTOM_IMAGES_SUPPORTED
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#CLUSTER_TYPE_IMAGE_CODES_ONLY:
    New API must be flagged with @FlaggedApi: field android.car.navigation.CarNavigationInstrumentCluster.CLUSTER_TYPE_IMAGE_CODES_ONLY
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.navigation.CarNavigationInstrumentCluster.CREATOR
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#CarNavigationInstrumentCluster(android.car.navigation.CarNavigationInstrumentCluster):
    New API must be flagged with @FlaggedApi: constructor android.car.navigation.CarNavigationInstrumentCluster(android.car.navigation.CarNavigationInstrumentCluster)
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#createCluster(int):
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationInstrumentCluster.createCluster(int)
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#createCustomImageCluster(int, int, int, int):
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationInstrumentCluster.createCustomImageCluster(int,int,int,int)
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationInstrumentCluster.describeContents()
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#getImageColorDepthBits():
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationInstrumentCluster.getImageColorDepthBits()
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#getImageHeight():
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationInstrumentCluster.getImageHeight()
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#getImageWidth():
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationInstrumentCluster.getImageWidth()
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#getMinIntervalMillis():
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationInstrumentCluster.getMinIntervalMillis()
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#getType():
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationInstrumentCluster.getType()
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#supportsCustomImages():
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationInstrumentCluster.supportsCustomImages()
UnflaggedApi: android.car.navigation.CarNavigationInstrumentCluster#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationInstrumentCluster.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.navigation.CarNavigationStatusManager:
    New API must be flagged with @FlaggedApi: class android.car.navigation.CarNavigationStatusManager
UnflaggedApi: android.car.navigation.CarNavigationStatusManager#getInstrumentClusterInfo():
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationStatusManager.getInstrumentClusterInfo()
UnflaggedApi: android.car.navigation.CarNavigationStatusManager#sendNavigationStateChange(android.os.Bundle):
    New API must be flagged with @FlaggedApi: method android.car.navigation.CarNavigationStatusManager.sendNavigationStateChange(android.os.Bundle)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService:
    New API must be flagged with @FlaggedApi: class android.car.occupantconnection.AbstractReceiverService
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#AbstractReceiverService():
    New API must be flagged with @FlaggedApi: constructor android.car.occupantconnection.AbstractReceiverService()
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#acceptConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.acceptConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.dump(java.io.FileDescriptor,java.io.PrintWriter,String[])
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#forwardPayload(android.car.CarOccupantZoneManager.OccupantZoneInfo, String, android.car.occupantconnection.Payload):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.forwardPayload(android.car.CarOccupantZoneManager.OccupantZoneInfo,String,android.car.occupantconnection.Payload)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#getAllReceiverEndpoints():
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.getAllReceiverEndpoints()
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#isSenderAuthorized(android.content.pm.SigningInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.isSenderAuthorized(android.content.pm.SigningInfo)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#isSenderCompatible(long):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.isSenderCompatible(long)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#onBind(android.content.Intent):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.onBind(android.content.Intent)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#onConnected(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.onConnected(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#onConnectionCanceled(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.onConnectionCanceled(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#onConnectionInitiated(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.onConnectionInitiated(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#onDisconnected(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.onDisconnected(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#onLocalServiceBind(android.content.Intent):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.onLocalServiceBind(android.content.Intent)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#onPayloadReceived(android.car.CarOccupantZoneManager.OccupantZoneInfo, android.car.occupantconnection.Payload):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.onPayloadReceived(android.car.CarOccupantZoneManager.OccupantZoneInfo,android.car.occupantconnection.Payload)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#onReceiverRegistered(String):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.onReceiverRegistered(String)
UnflaggedApi: android.car.occupantconnection.AbstractReceiverService#rejectConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo, int):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.AbstractReceiverService.rejectConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo,int)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager:
    New API must be flagged with @FlaggedApi: class android.car.occupantconnection.CarOccupantConnectionManager
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#CONNECTION_ERROR_LONG_VERSION_NOT_MATCH:
    New API must be flagged with @FlaggedApi: field android.car.occupantconnection.CarOccupantConnectionManager.CONNECTION_ERROR_LONG_VERSION_NOT_MATCH
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#CONNECTION_ERROR_NONE:
    New API must be flagged with @FlaggedApi: field android.car.occupantconnection.CarOccupantConnectionManager.CONNECTION_ERROR_NONE
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#CONNECTION_ERROR_NOT_READY:
    New API must be flagged with @FlaggedApi: field android.car.occupantconnection.CarOccupantConnectionManager.CONNECTION_ERROR_NOT_READY
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#CONNECTION_ERROR_PEER_APP_NOT_INSTALLED:
    New API must be flagged with @FlaggedApi: field android.car.occupantconnection.CarOccupantConnectionManager.CONNECTION_ERROR_PEER_APP_NOT_INSTALLED
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#CONNECTION_ERROR_PREDEFINED_MAXIMUM_VALUE:
    New API must be flagged with @FlaggedApi: field android.car.occupantconnection.CarOccupantConnectionManager.CONNECTION_ERROR_PREDEFINED_MAXIMUM_VALUE
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#CONNECTION_ERROR_SIGNATURE_NOT_MATCH:
    New API must be flagged with @FlaggedApi: field android.car.occupantconnection.CarOccupantConnectionManager.CONNECTION_ERROR_SIGNATURE_NOT_MATCH
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#CONNECTION_ERROR_UNKNOWN:
    New API must be flagged with @FlaggedApi: field android.car.occupantconnection.CarOccupantConnectionManager.CONNECTION_ERROR_UNKNOWN
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#CONNECTION_ERROR_USER_REJECTED:
    New API must be flagged with @FlaggedApi: field android.car.occupantconnection.CarOccupantConnectionManager.CONNECTION_ERROR_USER_REJECTED
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#cancelConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.cancelConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#disconnect(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.disconnect(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#isConnected(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.isConnected(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#registerReceiver(String, java.util.concurrent.Executor, android.car.occupantconnection.CarOccupantConnectionManager.PayloadCallback):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.registerReceiver(String,java.util.concurrent.Executor,android.car.occupantconnection.CarOccupantConnectionManager.PayloadCallback)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#requestConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo, java.util.concurrent.Executor, android.car.occupantconnection.CarOccupantConnectionManager.ConnectionRequestCallback):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.requestConnection(android.car.CarOccupantZoneManager.OccupantZoneInfo,java.util.concurrent.Executor,android.car.occupantconnection.CarOccupantConnectionManager.ConnectionRequestCallback)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#sendPayload(android.car.CarOccupantZoneManager.OccupantZoneInfo, android.car.occupantconnection.Payload):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.sendPayload(android.car.CarOccupantZoneManager.OccupantZoneInfo,android.car.occupantconnection.Payload)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager#unregisterReceiver(String):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.unregisterReceiver(String)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager.ConnectionRequestCallback:
    New API must be flagged with @FlaggedApi: class android.car.occupantconnection.CarOccupantConnectionManager.ConnectionRequestCallback
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager.ConnectionRequestCallback#onConnected(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.ConnectionRequestCallback.onConnected(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager.ConnectionRequestCallback#onDisconnected(android.car.CarOccupantZoneManager.OccupantZoneInfo):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.ConnectionRequestCallback.onDisconnected(android.car.CarOccupantZoneManager.OccupantZoneInfo)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager.ConnectionRequestCallback#onFailed(android.car.CarOccupantZoneManager.OccupantZoneInfo, int):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.ConnectionRequestCallback.onFailed(android.car.CarOccupantZoneManager.OccupantZoneInfo,int)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager.PayloadCallback:
    New API must be flagged with @FlaggedApi: class android.car.occupantconnection.CarOccupantConnectionManager.PayloadCallback
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager.PayloadCallback#onPayloadReceived(android.car.CarOccupantZoneManager.OccupantZoneInfo, android.car.occupantconnection.Payload):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.CarOccupantConnectionManager.PayloadCallback.onPayloadReceived(android.car.CarOccupantZoneManager.OccupantZoneInfo,android.car.occupantconnection.Payload)
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager.PayloadTransferException:
    New API must be flagged with @FlaggedApi: class android.car.occupantconnection.CarOccupantConnectionManager.PayloadTransferException
UnflaggedApi: android.car.occupantconnection.CarOccupantConnectionManager.PayloadTransferException#PayloadTransferException():
    New API must be flagged with @FlaggedApi: constructor android.car.occupantconnection.CarOccupantConnectionManager.PayloadTransferException()
UnflaggedApi: android.car.occupantconnection.Payload:
    New API must be flagged with @FlaggedApi: class android.car.occupantconnection.Payload
UnflaggedApi: android.car.occupantconnection.Payload#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.occupantconnection.Payload.CREATOR
UnflaggedApi: android.car.occupantconnection.Payload#MAX_DIRECT_PAYLOAD_SIZE:
    New API must be flagged with @FlaggedApi: field android.car.occupantconnection.Payload.MAX_DIRECT_PAYLOAD_SIZE
UnflaggedApi: android.car.occupantconnection.Payload#Payload(android.os.IBinder):
    New API must be flagged with @FlaggedApi: constructor android.car.occupantconnection.Payload(android.os.IBinder)
UnflaggedApi: android.car.occupantconnection.Payload#Payload(byte[]):
    New API must be flagged with @FlaggedApi: constructor android.car.occupantconnection.Payload(byte[])
UnflaggedApi: android.car.occupantconnection.Payload#close():
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.Payload.close()
UnflaggedApi: android.car.occupantconnection.Payload#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.Payload.describeContents()
UnflaggedApi: android.car.occupantconnection.Payload#deserialize(android.os.Parcel):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.Payload.deserialize(android.os.Parcel)
UnflaggedApi: android.car.occupantconnection.Payload#getBinder():
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.Payload.getBinder()
UnflaggedApi: android.car.occupantconnection.Payload#getBytes():
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.Payload.getBytes()
UnflaggedApi: android.car.occupantconnection.Payload#serialize(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.Payload.serialize(android.os.Parcel,int)
UnflaggedApi: android.car.occupantconnection.Payload#serializeNullPayload(android.os.Parcel):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.Payload.serializeNullPayload(android.os.Parcel)
UnflaggedApi: android.car.occupantconnection.Payload#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.occupantconnection.Payload.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.oem.AudioFocusEntry:
    New API must be flagged with @FlaggedApi: class android.car.oem.AudioFocusEntry
UnflaggedApi: android.car.oem.AudioFocusEntry#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.oem.AudioFocusEntry.CREATOR
UnflaggedApi: android.car.oem.AudioFocusEntry#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.describeContents()
UnflaggedApi: android.car.oem.AudioFocusEntry#getAudioContextId():
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.getAudioContextId()
UnflaggedApi: android.car.oem.AudioFocusEntry#getAudioFocusInfo():
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.getAudioFocusInfo()
UnflaggedApi: android.car.oem.AudioFocusEntry#getAudioFocusResult():
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.getAudioFocusResult()
UnflaggedApi: android.car.oem.AudioFocusEntry#getAudioVolumeGroupId():
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.getAudioVolumeGroupId()
UnflaggedApi: android.car.oem.AudioFocusEntry#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.oem.AudioFocusEntry.Builder:
    New API must be flagged with @FlaggedApi: class android.car.oem.AudioFocusEntry.Builder
UnflaggedApi: android.car.oem.AudioFocusEntry.Builder#Builder(android.car.oem.AudioFocusEntry):
    New API must be flagged with @FlaggedApi: constructor android.car.oem.AudioFocusEntry.Builder(android.car.oem.AudioFocusEntry)
UnflaggedApi: android.car.oem.AudioFocusEntry.Builder#Builder(android.media.AudioFocusInfo, int, int, int):
    New API must be flagged with @FlaggedApi: constructor android.car.oem.AudioFocusEntry.Builder(android.media.AudioFocusInfo,int,int,int)
UnflaggedApi: android.car.oem.AudioFocusEntry.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.Builder.build()
UnflaggedApi: android.car.oem.AudioFocusEntry.Builder#setAudioContextId(int):
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.Builder.setAudioContextId(int)
UnflaggedApi: android.car.oem.AudioFocusEntry.Builder#setAudioFocusInfo(android.media.AudioFocusInfo):
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.Builder.setAudioFocusInfo(android.media.AudioFocusInfo)
UnflaggedApi: android.car.oem.AudioFocusEntry.Builder#setAudioFocusResult(int):
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.Builder.setAudioFocusResult(int)
UnflaggedApi: android.car.oem.AudioFocusEntry.Builder#setAudioVolumeGroupId(int):
    New API must be flagged with @FlaggedApi: method android.car.oem.AudioFocusEntry.Builder.setAudioVolumeGroupId(int)
UnflaggedApi: android.car.oem.OemCarAudioDuckingService:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarAudioDuckingService
UnflaggedApi: android.car.oem.OemCarAudioDuckingService#evaluateAttributesToDuck(android.car.oem.OemCarAudioVolumeRequest):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioDuckingService.evaluateAttributesToDuck(android.car.oem.OemCarAudioVolumeRequest)
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarAudioFocusEvaluationRequest
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.oem.OemCarAudioFocusEvaluationRequest.CREATOR
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.describeContents()
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest#getAudioFocusRequest():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.getAudioFocusRequest()
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest#getAudioZoneId():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.getAudioZoneId()
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest#getFocusHolders():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.getFocusHolders()
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest#getFocusLosers():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.getFocusLosers()
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest#getMutedVolumeGroups():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.getMutedVolumeGroups()
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarAudioFocusEvaluationRequest.Builder
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder#Builder(java.util.List<android.car.media.CarVolumeGroupInfo>, java.util.List<android.car.oem.AudioFocusEntry>, java.util.List<android.car.oem.AudioFocusEntry>, int):
    New API must be flagged with @FlaggedApi: constructor android.car.oem.OemCarAudioFocusEvaluationRequest.Builder(java.util.List<android.car.media.CarVolumeGroupInfo>,java.util.List<android.car.oem.AudioFocusEntry>,java.util.List<android.car.oem.AudioFocusEntry>,int)
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder#addFocusHolders(android.car.oem.AudioFocusEntry):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.Builder.addFocusHolders(android.car.oem.AudioFocusEntry)
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder#addFocusLosers(android.car.oem.AudioFocusEntry):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.Builder.addFocusLosers(android.car.oem.AudioFocusEntry)
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder#addMutedVolumeGroups(android.car.media.CarVolumeGroupInfo):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.Builder.addMutedVolumeGroups(android.car.media.CarVolumeGroupInfo)
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.Builder.build()
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder#setAudioFocusRequest(android.car.oem.AudioFocusEntry):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.Builder.setAudioFocusRequest(android.car.oem.AudioFocusEntry)
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder#setAudioZoneId(int):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.Builder.setAudioZoneId(int)
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder#setFocusHolders(java.util.List<android.car.oem.AudioFocusEntry>):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.Builder.setFocusHolders(java.util.List<android.car.oem.AudioFocusEntry>)
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder#setFocusLosers(java.util.List<android.car.oem.AudioFocusEntry>):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.Builder.setFocusLosers(java.util.List<android.car.oem.AudioFocusEntry>)
UnflaggedApi: android.car.oem.OemCarAudioFocusEvaluationRequest.Builder#setMutedVolumeGroups(java.util.List<android.car.media.CarVolumeGroupInfo>):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusEvaluationRequest.Builder.setMutedVolumeGroups(java.util.List<android.car.media.CarVolumeGroupInfo>)
UnflaggedApi: android.car.oem.OemCarAudioFocusResult:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarAudioFocusResult
UnflaggedApi: android.car.oem.OemCarAudioFocusResult#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.oem.OemCarAudioFocusResult.CREATOR
UnflaggedApi: android.car.oem.OemCarAudioFocusResult#EMPTY_OEM_CAR_AUDIO_FOCUS_RESULTS:
    New API must be flagged with @FlaggedApi: field android.car.oem.OemCarAudioFocusResult.EMPTY_OEM_CAR_AUDIO_FOCUS_RESULTS
UnflaggedApi: android.car.oem.OemCarAudioFocusResult#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.describeContents()
UnflaggedApi: android.car.oem.OemCarAudioFocusResult#getAudioFocusEntry():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.getAudioFocusEntry()
UnflaggedApi: android.car.oem.OemCarAudioFocusResult#getAudioFocusResult():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.getAudioFocusResult()
UnflaggedApi: android.car.oem.OemCarAudioFocusResult#getNewlyBlockedAudioFocusEntries():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.getNewlyBlockedAudioFocusEntries()
UnflaggedApi: android.car.oem.OemCarAudioFocusResult#getNewlyLostAudioFocusEntries():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.getNewlyLostAudioFocusEntries()
UnflaggedApi: android.car.oem.OemCarAudioFocusResult#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.oem.OemCarAudioFocusResult.Builder:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarAudioFocusResult.Builder
UnflaggedApi: android.car.oem.OemCarAudioFocusResult.Builder#Builder(java.util.List<android.car.oem.AudioFocusEntry>, java.util.List<android.car.oem.AudioFocusEntry>, int):
    New API must be flagged with @FlaggedApi: constructor android.car.oem.OemCarAudioFocusResult.Builder(java.util.List<android.car.oem.AudioFocusEntry>,java.util.List<android.car.oem.AudioFocusEntry>,int)
UnflaggedApi: android.car.oem.OemCarAudioFocusResult.Builder#addNewlyBlockedAudioFocusEntry(android.car.oem.AudioFocusEntry):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.Builder.addNewlyBlockedAudioFocusEntry(android.car.oem.AudioFocusEntry)
UnflaggedApi: android.car.oem.OemCarAudioFocusResult.Builder#addNewlyLostAudioFocusEntry(android.car.oem.AudioFocusEntry):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.Builder.addNewlyLostAudioFocusEntry(android.car.oem.AudioFocusEntry)
UnflaggedApi: android.car.oem.OemCarAudioFocusResult.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.Builder.build()
UnflaggedApi: android.car.oem.OemCarAudioFocusResult.Builder#setAudioFocusEntry(android.car.oem.AudioFocusEntry):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.Builder.setAudioFocusEntry(android.car.oem.AudioFocusEntry)
UnflaggedApi: android.car.oem.OemCarAudioFocusResult.Builder#setAudioFocusResult(int):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.Builder.setAudioFocusResult(int)
UnflaggedApi: android.car.oem.OemCarAudioFocusResult.Builder#setNewlyBlockedAudioFocusEntries(java.util.List<android.car.oem.AudioFocusEntry>):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.Builder.setNewlyBlockedAudioFocusEntries(java.util.List<android.car.oem.AudioFocusEntry>)
UnflaggedApi: android.car.oem.OemCarAudioFocusResult.Builder#setNewlyLostAudioFocusEntries(java.util.List<android.car.oem.AudioFocusEntry>):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusResult.Builder.setNewlyLostAudioFocusEntries(java.util.List<android.car.oem.AudioFocusEntry>)
UnflaggedApi: android.car.oem.OemCarAudioFocusService:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarAudioFocusService
UnflaggedApi: android.car.oem.OemCarAudioFocusService#evaluateAudioFocusRequest(android.car.oem.OemCarAudioFocusEvaluationRequest):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusService.evaluateAudioFocusRequest(android.car.oem.OemCarAudioFocusEvaluationRequest)
UnflaggedApi: android.car.oem.OemCarAudioFocusService#notifyAudioFocusChange(java.util.List<android.media.AudioFocusInfo>, java.util.List<android.media.AudioFocusInfo>, int):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioFocusService.notifyAudioFocusChange(java.util.List<android.media.AudioFocusInfo>,java.util.List<android.media.AudioFocusInfo>,int)
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarAudioVolumeRequest
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.oem.OemCarAudioVolumeRequest.CREATOR
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.describeContents()
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest#getActivePlaybackAttributes():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.getActivePlaybackAttributes()
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest#getAudioZoneId():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.getAudioZoneId()
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest#getCallState():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.getCallState()
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest#getCarVolumeGroupInfos():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.getCarVolumeGroupInfos()
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest#getDuckedAudioAttributes():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.getDuckedAudioAttributes()
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest.Builder:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarAudioVolumeRequest.Builder
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest.Builder#addActivePlaybackAttributes(android.media.AudioAttributes):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.Builder.addActivePlaybackAttributes(android.media.AudioAttributes)
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest.Builder#addCarVolumeGroupInfos(android.car.media.CarVolumeGroupInfo):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.Builder.addCarVolumeGroupInfos(android.car.media.CarVolumeGroupInfo)
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest.Builder#addDuckedAudioAttributes(android.media.AudioAttributes):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.Builder.addDuckedAudioAttributes(android.media.AudioAttributes)
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.Builder.build()
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest.Builder#setActivePlaybackAttributes(java.util.List<android.media.AudioAttributes>):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.Builder.setActivePlaybackAttributes(java.util.List<android.media.AudioAttributes>)
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest.Builder#setCallState(int):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.Builder.setCallState(int)
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest.Builder#setCarVolumeGroupInfos(java.util.List<android.car.media.CarVolumeGroupInfo>):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.Builder.setCarVolumeGroupInfos(java.util.List<android.car.media.CarVolumeGroupInfo>)
UnflaggedApi: android.car.oem.OemCarAudioVolumeRequest.Builder#setDuckedAudioAttributes(java.util.List<android.media.AudioAttributes>):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeRequest.Builder.setDuckedAudioAttributes(java.util.List<android.media.AudioAttributes>)
UnflaggedApi: android.car.oem.OemCarAudioVolumeService:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarAudioVolumeService
UnflaggedApi: android.car.oem.OemCarAudioVolumeService#getSuggestedGroupForVolumeChange(android.car.oem.OemCarAudioVolumeRequest, int):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarAudioVolumeService.getSuggestedGroupForVolumeChange(android.car.oem.OemCarAudioVolumeRequest,int)
UnflaggedApi: android.car.oem.OemCarService:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarService
UnflaggedApi: android.car.oem.OemCarService#OemCarService():
    New API must be flagged with @FlaggedApi: constructor android.car.oem.OemCarService()
UnflaggedApi: android.car.oem.OemCarService#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarService.dump(java.io.FileDescriptor,java.io.PrintWriter,String[])
UnflaggedApi: android.car.oem.OemCarService#getOemAudioDuckingService():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarService.getOemAudioDuckingService()
UnflaggedApi: android.car.oem.OemCarService#getOemAudioFocusService():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarService.getOemAudioFocusService()
UnflaggedApi: android.car.oem.OemCarService#getOemAudioVolumeService():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarService.getOemAudioVolumeService()
UnflaggedApi: android.car.oem.OemCarService#getSupportedCarVersion():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarService.getSupportedCarVersion()
UnflaggedApi: android.car.oem.OemCarService#onBind(android.content.Intent):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarService.onBind(android.content.Intent)
UnflaggedApi: android.car.oem.OemCarService#onCarServiceReady():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarService.onCarServiceReady()
UnflaggedApi: android.car.oem.OemCarService#onStartCommand(android.content.Intent, int, int):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarService.onStartCommand(android.content.Intent,int,int)
UnflaggedApi: android.car.oem.OemCarServiceComponent:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarServiceComponent
UnflaggedApi: android.car.oem.OemCarServiceComponent#dump(java.io.PrintWriter, String[]):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarServiceComponent.dump(java.io.PrintWriter,String[])
UnflaggedApi: android.car.oem.OemCarServiceComponent#init():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarServiceComponent.init()
UnflaggedApi: android.car.oem.OemCarServiceComponent#onCarServiceReady():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarServiceComponent.onCarServiceReady()
UnflaggedApi: android.car.oem.OemCarServiceComponent#release():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarServiceComponent.release()
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarVolumeChangeInfo
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.oem.OemCarVolumeChangeInfo.CREATOR
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo#EMPTY_OEM_VOLUME_CHANGE:
    New API must be flagged with @FlaggedApi: field android.car.oem.OemCarVolumeChangeInfo.EMPTY_OEM_VOLUME_CHANGE
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarVolumeChangeInfo.describeContents()
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo#getChangedVolumeGroup():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarVolumeChangeInfo.getChangedVolumeGroup()
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo#isVolumeChanged():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarVolumeChangeInfo.isVolumeChanged()
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarVolumeChangeInfo.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo.Builder:
    New API must be flagged with @FlaggedApi: class android.car.oem.OemCarVolumeChangeInfo.Builder
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo.Builder#Builder(boolean):
    New API must be flagged with @FlaggedApi: constructor android.car.oem.OemCarVolumeChangeInfo.Builder(boolean)
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarVolumeChangeInfo.Builder.build()
UnflaggedApi: android.car.oem.OemCarVolumeChangeInfo.Builder#setChangedVolumeGroup(android.car.media.CarVolumeGroupInfo):
    New API must be flagged with @FlaggedApi: method android.car.oem.OemCarVolumeChangeInfo.Builder.setChangedVolumeGroup(android.car.media.CarVolumeGroupInfo)
UnflaggedApi: android.car.os.CarPerformanceManager:
    New API must be flagged with @FlaggedApi: class android.car.os.CarPerformanceManager
UnflaggedApi: android.car.os.CarPerformanceManager#getThreadPriority():
    New API must be flagged with @FlaggedApi: method android.car.os.CarPerformanceManager.getThreadPriority()
UnflaggedApi: android.car.os.CarPerformanceManager#setThreadPriority(android.car.os.ThreadPolicyWithPriority):
    New API must be flagged with @FlaggedApi: method android.car.os.CarPerformanceManager.setThreadPriority(android.car.os.ThreadPolicyWithPriority)
UnflaggedApi: android.car.os.CarPerformanceManager.SetSchedulerFailedException:
    New API must be flagged with @FlaggedApi: class android.car.os.CarPerformanceManager.SetSchedulerFailedException
UnflaggedApi: android.car.os.ThreadPolicyWithPriority:
    New API must be flagged with @FlaggedApi: class android.car.os.ThreadPolicyWithPriority
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.os.ThreadPolicyWithPriority.CREATOR
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#PRIORITY_MAX:
    New API must be flagged with @FlaggedApi: field android.car.os.ThreadPolicyWithPriority.PRIORITY_MAX
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#PRIORITY_MIN:
    New API must be flagged with @FlaggedApi: field android.car.os.ThreadPolicyWithPriority.PRIORITY_MIN
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#SCHED_DEFAULT:
    New API must be flagged with @FlaggedApi: field android.car.os.ThreadPolicyWithPriority.SCHED_DEFAULT
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#SCHED_FIFO:
    New API must be flagged with @FlaggedApi: field android.car.os.ThreadPolicyWithPriority.SCHED_FIFO
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#SCHED_RR:
    New API must be flagged with @FlaggedApi: field android.car.os.ThreadPolicyWithPriority.SCHED_RR
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#ThreadPolicyWithPriority(int, int):
    New API must be flagged with @FlaggedApi: constructor android.car.os.ThreadPolicyWithPriority(int,int)
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.os.ThreadPolicyWithPriority.describeContents()
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#getPolicy():
    New API must be flagged with @FlaggedApi: method android.car.os.ThreadPolicyWithPriority.getPolicy()
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#getPriority():
    New API must be flagged with @FlaggedApi: method android.car.os.ThreadPolicyWithPriority.getPriority()
UnflaggedApi: android.car.os.ThreadPolicyWithPriority#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.os.ThreadPolicyWithPriority.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.projection.ProjectionOptions:
    New API must be flagged with @FlaggedApi: class android.car.projection.ProjectionOptions
UnflaggedApi: android.car.projection.ProjectionOptions#AP_MODE_LOHS_DYNAMIC_CREDENTIALS:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionOptions.AP_MODE_LOHS_DYNAMIC_CREDENTIALS
UnflaggedApi: android.car.projection.ProjectionOptions#AP_MODE_LOHS_STATIC_CREDENTIALS:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionOptions.AP_MODE_LOHS_STATIC_CREDENTIALS
UnflaggedApi: android.car.projection.ProjectionOptions#AP_MODE_NOT_SPECIFIED:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionOptions.AP_MODE_NOT_SPECIFIED
UnflaggedApi: android.car.projection.ProjectionOptions#AP_MODE_TETHERED:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionOptions.AP_MODE_TETHERED
UnflaggedApi: android.car.projection.ProjectionOptions#ProjectionOptions(android.os.Bundle):
    New API must be flagged with @FlaggedApi: constructor android.car.projection.ProjectionOptions(android.os.Bundle)
UnflaggedApi: android.car.projection.ProjectionOptions#UI_MODE_BLENDED:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionOptions.UI_MODE_BLENDED
UnflaggedApi: android.car.projection.ProjectionOptions#UI_MODE_FULL_SCREEN:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionOptions.UI_MODE_FULL_SCREEN
UnflaggedApi: android.car.projection.ProjectionOptions#getActivityOptions():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionOptions.getActivityOptions()
UnflaggedApi: android.car.projection.ProjectionOptions#getConsentActivity():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionOptions.getConsentActivity()
UnflaggedApi: android.car.projection.ProjectionOptions#getProjectionAccessPointMode():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionOptions.getProjectionAccessPointMode()
UnflaggedApi: android.car.projection.ProjectionOptions#getUiMode():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionOptions.getUiMode()
UnflaggedApi: android.car.projection.ProjectionOptions#toBundle():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionOptions.toBundle()
UnflaggedApi: android.car.projection.ProjectionStatus:
    New API must be flagged with @FlaggedApi: class android.car.projection.ProjectionStatus
UnflaggedApi: android.car.projection.ProjectionStatus#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.CREATOR
UnflaggedApi: android.car.projection.ProjectionStatus#PROJECTION_STATE_ACTIVE_BACKGROUND:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.PROJECTION_STATE_ACTIVE_BACKGROUND
UnflaggedApi: android.car.projection.ProjectionStatus#PROJECTION_STATE_ACTIVE_FOREGROUND:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.PROJECTION_STATE_ACTIVE_FOREGROUND
UnflaggedApi: android.car.projection.ProjectionStatus#PROJECTION_STATE_ATTEMPTING:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.PROJECTION_STATE_ATTEMPTING
UnflaggedApi: android.car.projection.ProjectionStatus#PROJECTION_STATE_FINISHING:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.PROJECTION_STATE_FINISHING
UnflaggedApi: android.car.projection.ProjectionStatus#PROJECTION_STATE_INACTIVE:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.PROJECTION_STATE_INACTIVE
UnflaggedApi: android.car.projection.ProjectionStatus#PROJECTION_STATE_READY_TO_PROJECT:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.PROJECTION_STATE_READY_TO_PROJECT
UnflaggedApi: android.car.projection.ProjectionStatus#PROJECTION_TRANSPORT_NONE:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.PROJECTION_TRANSPORT_NONE
UnflaggedApi: android.car.projection.ProjectionStatus#PROJECTION_TRANSPORT_USB:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.PROJECTION_TRANSPORT_USB
UnflaggedApi: android.car.projection.ProjectionStatus#PROJECTION_TRANSPORT_WIFI:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.PROJECTION_TRANSPORT_WIFI
UnflaggedApi: android.car.projection.ProjectionStatus#builder(String, int):
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.builder(String,int)
UnflaggedApi: android.car.projection.ProjectionStatus#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.describeContents()
UnflaggedApi: android.car.projection.ProjectionStatus#getConnectedMobileDevices():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.getConnectedMobileDevices()
UnflaggedApi: android.car.projection.ProjectionStatus#getExtras():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.getExtras()
UnflaggedApi: android.car.projection.ProjectionStatus#getPackageName():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.getPackageName()
UnflaggedApi: android.car.projection.ProjectionStatus#getState():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.getState()
UnflaggedApi: android.car.projection.ProjectionStatus#getTransport():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.getTransport()
UnflaggedApi: android.car.projection.ProjectionStatus#isActive():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.isActive()
UnflaggedApi: android.car.projection.ProjectionStatus#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.projection.ProjectionStatus.Builder:
    New API must be flagged with @FlaggedApi: class android.car.projection.ProjectionStatus.Builder
UnflaggedApi: android.car.projection.ProjectionStatus.Builder#addMobileDevice(android.car.projection.ProjectionStatus.MobileDevice):
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.Builder.addMobileDevice(android.car.projection.ProjectionStatus.MobileDevice)
UnflaggedApi: android.car.projection.ProjectionStatus.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.Builder.build()
UnflaggedApi: android.car.projection.ProjectionStatus.Builder#setExtras(android.os.Bundle):
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.Builder.setExtras(android.os.Bundle)
UnflaggedApi: android.car.projection.ProjectionStatus.Builder#setProjectionTransport(int):
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.Builder.setProjectionTransport(int)
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice:
    New API must be flagged with @FlaggedApi: class android.car.projection.ProjectionStatus.MobileDevice
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.projection.ProjectionStatus.MobileDevice.CREATOR
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice#builder(int, String):
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.builder(int,String)
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.describeContents()
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice#getAvailableTransports():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.getAvailableTransports()
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice#getExtras():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.getExtras()
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice#getId():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.getId()
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice#getName():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.getName()
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice#isProjecting():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.isProjecting()
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice.Builder:
    New API must be flagged with @FlaggedApi: class android.car.projection.ProjectionStatus.MobileDevice.Builder
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice.Builder#addTransport(int):
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.Builder.addTransport(int)
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.Builder.build()
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice.Builder#setExtras(android.os.Bundle):
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.Builder.setExtras(android.os.Bundle)
UnflaggedApi: android.car.projection.ProjectionStatus.MobileDevice.Builder#setProjecting(boolean):
    New API must be flagged with @FlaggedApi: method android.car.projection.ProjectionStatus.MobileDevice.Builder.setProjecting(boolean)
UnflaggedApi: android.car.remoteaccess.CarRemoteAccessManager#NEXT_POWER_STATE_OFF:
    New API must be flagged with @FlaggedApi: field android.car.remoteaccess.CarRemoteAccessManager.NEXT_POWER_STATE_OFF
UnflaggedApi: android.car.remoteaccess.CarRemoteAccessManager#NEXT_POWER_STATE_ON:
    New API must be flagged with @FlaggedApi: field android.car.remoteaccess.CarRemoteAccessManager.NEXT_POWER_STATE_ON
UnflaggedApi: android.car.remoteaccess.CarRemoteAccessManager#NEXT_POWER_STATE_SUSPEND_TO_DISK:
    New API must be flagged with @FlaggedApi: field android.car.remoteaccess.CarRemoteAccessManager.NEXT_POWER_STATE_SUSPEND_TO_DISK
UnflaggedApi: android.car.remoteaccess.CarRemoteAccessManager#NEXT_POWER_STATE_SUSPEND_TO_RAM:
    New API must be flagged with @FlaggedApi: field android.car.remoteaccess.CarRemoteAccessManager.NEXT_POWER_STATE_SUSPEND_TO_RAM
UnflaggedApi: android.car.remoteaccess.CarRemoteAccessManager#setPowerStatePostTaskExecution(int, boolean):
    New API must be flagged with @FlaggedApi: method android.car.remoteaccess.CarRemoteAccessManager.setPowerStatePostTaskExecution(int,boolean)
UnflaggedApi: android.car.remoteaccess.CarRemoteAccessManager.ScheduleInfo#PERIODIC_DAILY:
    New API must be flagged with @FlaggedApi: field android.car.remoteaccess.CarRemoteAccessManager.ScheduleInfo.PERIODIC_DAILY
UnflaggedApi: android.car.remoteaccess.CarRemoteAccessManager.ScheduleInfo#PERIODIC_WEEKLY:
    New API must be flagged with @FlaggedApi: field android.car.remoteaccess.CarRemoteAccessManager.ScheduleInfo.PERIODIC_WEEKLY
UnflaggedApi: android.car.settings.CarSettings:
    New API must be flagged with @FlaggedApi: class android.car.settings.CarSettings
UnflaggedApi: android.car.settings.CarSettings.Global:
    New API must be flagged with @FlaggedApi: class android.car.settings.CarSettings.Global
UnflaggedApi: android.car.settings.CarSettings.Global#DISPLAY_INPUT_LOCK:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Global.DISPLAY_INPUT_LOCK
UnflaggedApi: android.car.settings.CarSettings.Global#DISPLAY_POWER_MODE:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Global.DISPLAY_POWER_MODE
UnflaggedApi: android.car.settings.CarSettings.Global#GLOBAL_VISIBLE_USER_ALLOCATION_PER_ZONE:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Global.GLOBAL_VISIBLE_USER_ALLOCATION_PER_ZONE
UnflaggedApi: android.car.settings.CarSettings.Secure:
    New API must be flagged with @FlaggedApi: class android.car.settings.CarSettings.Secure
UnflaggedApi: android.car.settings.CarSettings.Secure#KEY_AUDIO_FOCUS_NAVIGATION_REJECTED_DURING_CALL:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Secure.KEY_AUDIO_FOCUS_NAVIGATION_REJECTED_DURING_CALL
UnflaggedApi: android.car.settings.CarSettings.Secure#KEY_AUDIO_PERSIST_VOLUME_GROUP_MUTE_STATES:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Secure.KEY_AUDIO_PERSIST_VOLUME_GROUP_MUTE_STATES
UnflaggedApi: android.car.settings.CarSettings.Secure#KEY_DRIVER_ALLOWED_TO_CONTROL_MEDIA:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Secure.KEY_DRIVER_ALLOWED_TO_CONTROL_MEDIA
UnflaggedApi: android.car.settings.CarSettings.Secure#KEY_ENABLE_INITIAL_NOTICE_SCREEN_TO_USER:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Secure.KEY_ENABLE_INITIAL_NOTICE_SCREEN_TO_USER
UnflaggedApi: android.car.settings.CarSettings.Secure#KEY_PACKAGES_DISABLED_ON_RESOURCE_OVERUSE:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Secure.KEY_PACKAGES_DISABLED_ON_RESOURCE_OVERUSE
UnflaggedApi: android.car.settings.CarSettings.Secure#KEY_ROTARY_KEY_EVENT_FILTER:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Secure.KEY_ROTARY_KEY_EVENT_FILTER
UnflaggedApi: android.car.settings.CarSettings.Secure#KEY_SETUP_WIZARD_IN_PROGRESS:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Secure.KEY_SETUP_WIZARD_IN_PROGRESS
UnflaggedApi: android.car.settings.CarSettings.Secure#KEY_UNACCEPTED_TOS_DISABLED_APPS:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Secure.KEY_UNACCEPTED_TOS_DISABLED_APPS
UnflaggedApi: android.car.settings.CarSettings.Secure#KEY_USER_TOS_ACCEPTED:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Secure.KEY_USER_TOS_ACCEPTED
UnflaggedApi: android.car.settings.CarSettings.Secure#VISIBLE_USER_ALLOCATION_PER_ZONE:
    New API must be flagged with @FlaggedApi: field android.car.settings.CarSettings.Secure.VISIBLE_USER_ALLOCATION_PER_ZONE
UnflaggedApi: android.car.storagemonitoring.CarStorageMonitoringManager:
    New API must be flagged with @FlaggedApi: class android.car.storagemonitoring.CarStorageMonitoringManager
UnflaggedApi: android.car.storagemonitoring.CarStorageMonitoringManager#INTENT_EXCESSIVE_IO:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.CarStorageMonitoringManager.INTENT_EXCESSIVE_IO
UnflaggedApi: android.car.storagemonitoring.CarStorageMonitoringManager#PRE_EOL_INFO_NORMAL:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.CarStorageMonitoringManager.PRE_EOL_INFO_NORMAL
UnflaggedApi: android.car.storagemonitoring.CarStorageMonitoringManager#PRE_EOL_INFO_UNKNOWN:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.CarStorageMonitoringManager.PRE_EOL_INFO_UNKNOWN
UnflaggedApi: android.car.storagemonitoring.CarStorageMonitoringManager#PRE_EOL_INFO_URGENT:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.CarStorageMonitoringManager.PRE_EOL_INFO_URGENT
UnflaggedApi: android.car.storagemonitoring.CarStorageMonitoringManager#PRE_EOL_INFO_WARNING:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.CarStorageMonitoringManager.PRE_EOL_INFO_WARNING
UnflaggedApi: android.car.storagemonitoring.CarStorageMonitoringManager#SHUTDOWN_COST_INFO_MISSING:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.CarStorageMonitoringManager.SHUTDOWN_COST_INFO_MISSING
UnflaggedApi: android.car.storagemonitoring.CarStorageMonitoringManager#getPreEolIndicatorStatus():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.CarStorageMonitoringManager.getPreEolIndicatorStatus()
UnflaggedApi: android.car.storagemonitoring.CarStorageMonitoringManager.IoStatsListener#onSnapshot(android.car.storagemonitoring.IoStats):
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.CarStorageMonitoringManager.IoStatsListener.onSnapshot(android.car.storagemonitoring.IoStats)
UnflaggedApi: android.car.storagemonitoring.IoStats#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStats.CREATOR
UnflaggedApi: android.car.storagemonitoring.IoStats#IoStats(android.os.Parcel):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.IoStats(android.os.Parcel)
UnflaggedApi: android.car.storagemonitoring.IoStats#IoStats(java.util.List<android.car.storagemonitoring.IoStatsEntry>, long):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.IoStats(java.util.List<android.car.storagemonitoring.IoStatsEntry>,long)
UnflaggedApi: android.car.storagemonitoring.IoStats#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStats.describeContents()
UnflaggedApi: android.car.storagemonitoring.IoStats#getBackgroundTotals():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStats.getBackgroundTotals()
UnflaggedApi: android.car.storagemonitoring.IoStats#getForegroundTotals():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStats.getForegroundTotals()
UnflaggedApi: android.car.storagemonitoring.IoStats#getStats():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStats.getStats()
UnflaggedApi: android.car.storagemonitoring.IoStats#getTimestamp():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStats.getTimestamp()
UnflaggedApi: android.car.storagemonitoring.IoStats#getTotals():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStats.getTotals()
UnflaggedApi: android.car.storagemonitoring.IoStats#getUserIdStats(int):
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStats.getUserIdStats(int)
UnflaggedApi: android.car.storagemonitoring.IoStats#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStats.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.CREATOR
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry#IoStatsEntry(android.car.storagemonitoring.UidIoRecord, long):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.IoStatsEntry(android.car.storagemonitoring.UidIoRecord,long)
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry#IoStatsEntry(android.os.Parcel):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.IoStatsEntry(android.os.Parcel)
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry#IoStatsEntry(int, long, android.car.storagemonitoring.IoStatsEntry.Metrics, android.car.storagemonitoring.IoStatsEntry.Metrics):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.IoStatsEntry(int,long,android.car.storagemonitoring.IoStatsEntry.Metrics,android.car.storagemonitoring.IoStatsEntry.Metrics)
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry#background:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.background
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStatsEntry.describeContents()
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry#foreground:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.foreground
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry#runtimeMillis:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.runtimeMillis
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry#uid:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.uid
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStatsEntry.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics:
    New API must be flagged with @FlaggedApi: class android.car.storagemonitoring.IoStatsEntry.Metrics
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.Metrics.CREATOR
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics#Metrics(android.os.Parcel):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.IoStatsEntry.Metrics(android.os.Parcel)
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics#Metrics(long, long, long, long, long):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.IoStatsEntry.Metrics(long,long,long,long,long)
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics#bytesRead:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.Metrics.bytesRead
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics#bytesReadFromStorage:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.Metrics.bytesReadFromStorage
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics#bytesWritten:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.Metrics.bytesWritten
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics#bytesWrittenToStorage:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.Metrics.bytesWrittenToStorage
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStatsEntry.Metrics.describeContents()
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics#fsyncCalls:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.IoStatsEntry.Metrics.fsyncCalls
UnflaggedApi: android.car.storagemonitoring.IoStatsEntry.Metrics#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.IoStatsEntry.Metrics.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.storagemonitoring.LifetimeWriteInfo:
    New API must be flagged with @FlaggedApi: class android.car.storagemonitoring.LifetimeWriteInfo
UnflaggedApi: android.car.storagemonitoring.LifetimeWriteInfo#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.LifetimeWriteInfo.CREATOR
UnflaggedApi: android.car.storagemonitoring.LifetimeWriteInfo#LifetimeWriteInfo(String, String, long):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.LifetimeWriteInfo(String,String,long)
UnflaggedApi: android.car.storagemonitoring.LifetimeWriteInfo#LifetimeWriteInfo(android.os.Parcel):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.LifetimeWriteInfo(android.os.Parcel)
UnflaggedApi: android.car.storagemonitoring.LifetimeWriteInfo#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.LifetimeWriteInfo.describeContents()
UnflaggedApi: android.car.storagemonitoring.LifetimeWriteInfo#fstype:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.LifetimeWriteInfo.fstype
UnflaggedApi: android.car.storagemonitoring.LifetimeWriteInfo#partition:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.LifetimeWriteInfo.partition
UnflaggedApi: android.car.storagemonitoring.LifetimeWriteInfo#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.LifetimeWriteInfo.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.storagemonitoring.LifetimeWriteInfo#writtenBytes:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.LifetimeWriteInfo.writtenBytes
UnflaggedApi: android.car.storagemonitoring.UidIoRecord:
    New API must be flagged with @FlaggedApi: class android.car.storagemonitoring.UidIoRecord
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#UidIoRecord(int, long, long, long, long, long, long, long, long, long, long):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.UidIoRecord(int,long,long,long,long,long,long,long,long,long,long)
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#background_fsync:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.background_fsync
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#background_rchar:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.background_rchar
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#background_read_bytes:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.background_read_bytes
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#background_wchar:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.background_wchar
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#background_write_bytes:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.background_write_bytes
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#foreground_fsync:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.foreground_fsync
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#foreground_rchar:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.foreground_rchar
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#foreground_read_bytes:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.foreground_read_bytes
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#foreground_wchar:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.foreground_wchar
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#foreground_write_bytes:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.foreground_write_bytes
UnflaggedApi: android.car.storagemonitoring.UidIoRecord#uid:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.UidIoRecord.uid
UnflaggedApi: android.car.storagemonitoring.WearEstimate:
    New API must be flagged with @FlaggedApi: class android.car.storagemonitoring.WearEstimate
UnflaggedApi: android.car.storagemonitoring.WearEstimate#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.WearEstimate.CREATOR
UnflaggedApi: android.car.storagemonitoring.WearEstimate#UNKNOWN:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.WearEstimate.UNKNOWN
UnflaggedApi: android.car.storagemonitoring.WearEstimate#WearEstimate(android.os.Parcel):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.WearEstimate(android.os.Parcel)
UnflaggedApi: android.car.storagemonitoring.WearEstimate#WearEstimate(int, int):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.WearEstimate(int,int)
UnflaggedApi: android.car.storagemonitoring.WearEstimate#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.WearEstimate.describeContents()
UnflaggedApi: android.car.storagemonitoring.WearEstimate#typeA:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.WearEstimate.typeA
UnflaggedApi: android.car.storagemonitoring.WearEstimate#typeB:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.WearEstimate.typeB
UnflaggedApi: android.car.storagemonitoring.WearEstimate#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.WearEstimate.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange:
    New API must be flagged with @FlaggedApi: class android.car.storagemonitoring.WearEstimateChange
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.WearEstimateChange.CREATOR
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange#WearEstimateChange(android.car.storagemonitoring.WearEstimate, android.car.storagemonitoring.WearEstimate, long, java.time.Instant, boolean):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.WearEstimateChange(android.car.storagemonitoring.WearEstimate,android.car.storagemonitoring.WearEstimate,long,java.time.Instant,boolean)
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange#WearEstimateChange(android.os.Parcel):
    New API must be flagged with @FlaggedApi: constructor android.car.storagemonitoring.WearEstimateChange(android.os.Parcel)
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange#dateAtChange:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.WearEstimateChange.dateAtChange
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.WearEstimateChange.describeContents()
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange#isAcceptableDegradation:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.WearEstimateChange.isAcceptableDegradation
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange#newEstimate:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.WearEstimateChange.newEstimate
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange#oldEstimate:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.WearEstimateChange.oldEstimate
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange#uptimeAtChange:
    New API must be flagged with @FlaggedApi: field android.car.storagemonitoring.WearEstimateChange.uptimeAtChange
UnflaggedApi: android.car.storagemonitoring.WearEstimateChange#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.storagemonitoring.WearEstimateChange.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.telemetry.CarTelemetryManager:
    New API must be flagged with @FlaggedApi: class android.car.telemetry.CarTelemetryManager
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_ADD_METRICS_CONFIG_ALREADY_EXISTS:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_ADD_METRICS_CONFIG_ALREADY_EXISTS
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_ADD_METRICS_CONFIG_PARSE_FAILED:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_ADD_METRICS_CONFIG_PARSE_FAILED
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_ADD_METRICS_CONFIG_SIGNATURE_VERIFICATION_FAILED:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_ADD_METRICS_CONFIG_SIGNATURE_VERIFICATION_FAILED
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_ADD_METRICS_CONFIG_SUCCEEDED:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_ADD_METRICS_CONFIG_SUCCEEDED
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_ADD_METRICS_CONFIG_UNKNOWN:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_ADD_METRICS_CONFIG_UNKNOWN
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_ADD_METRICS_CONFIG_VERSION_TOO_OLD:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_ADD_METRICS_CONFIG_VERSION_TOO_OLD
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_GET_METRICS_CONFIG_DOES_NOT_EXIST:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_GET_METRICS_CONFIG_DOES_NOT_EXIST
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_GET_METRICS_CONFIG_FINISHED:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_GET_METRICS_CONFIG_FINISHED
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_GET_METRICS_CONFIG_INTERIM_RESULTS:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_GET_METRICS_CONFIG_INTERIM_RESULTS
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_GET_METRICS_CONFIG_PENDING:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_GET_METRICS_CONFIG_PENDING
UnflaggedApi: android.car.telemetry.CarTelemetryManager#STATUS_GET_METRICS_CONFIG_RUNTIME_ERROR:
    New API must be flagged with @FlaggedApi: field android.car.telemetry.CarTelemetryManager.STATUS_GET_METRICS_CONFIG_RUNTIME_ERROR
UnflaggedApi: android.car.telemetry.CarTelemetryManager#addMetricsConfig(String, byte[], java.util.concurrent.Executor, android.car.telemetry.CarTelemetryManager.AddMetricsConfigCallback):
    New API must be flagged with @FlaggedApi: method android.car.telemetry.CarTelemetryManager.addMetricsConfig(String,byte[],java.util.concurrent.Executor,android.car.telemetry.CarTelemetryManager.AddMetricsConfigCallback)
UnflaggedApi: android.car.telemetry.CarTelemetryManager#clearReportReadyListener():
    New API must be flagged with @FlaggedApi: method android.car.telemetry.CarTelemetryManager.clearReportReadyListener()
UnflaggedApi: android.car.telemetry.CarTelemetryManager#getAllFinishedReports(java.util.concurrent.Executor, android.car.telemetry.CarTelemetryManager.MetricsReportCallback):
    New API must be flagged with @FlaggedApi: method android.car.telemetry.CarTelemetryManager.getAllFinishedReports(java.util.concurrent.Executor,android.car.telemetry.CarTelemetryManager.MetricsReportCallback)
UnflaggedApi: android.car.telemetry.CarTelemetryManager#getFinishedReport(String, java.util.concurrent.Executor, android.car.telemetry.CarTelemetryManager.MetricsReportCallback):
    New API must be flagged with @FlaggedApi: method android.car.telemetry.CarTelemetryManager.getFinishedReport(String,java.util.concurrent.Executor,android.car.telemetry.CarTelemetryManager.MetricsReportCallback)
UnflaggedApi: android.car.telemetry.CarTelemetryManager#removeAllMetricsConfigs():
    New API must be flagged with @FlaggedApi: method android.car.telemetry.CarTelemetryManager.removeAllMetricsConfigs()
UnflaggedApi: android.car.telemetry.CarTelemetryManager#removeMetricsConfig(String):
    New API must be flagged with @FlaggedApi: method android.car.telemetry.CarTelemetryManager.removeMetricsConfig(String)
UnflaggedApi: android.car.telemetry.CarTelemetryManager#setReportReadyListener(java.util.concurrent.Executor, android.car.telemetry.CarTelemetryManager.ReportReadyListener):
    New API must be flagged with @FlaggedApi: method android.car.telemetry.CarTelemetryManager.setReportReadyListener(java.util.concurrent.Executor,android.car.telemetry.CarTelemetryManager.ReportReadyListener)
UnflaggedApi: android.car.telemetry.CarTelemetryManager.AddMetricsConfigCallback:
    New API must be flagged with @FlaggedApi: class android.car.telemetry.CarTelemetryManager.AddMetricsConfigCallback
UnflaggedApi: android.car.telemetry.CarTelemetryManager.AddMetricsConfigCallback#onAddMetricsConfigStatus(String, int):
    New API must be flagged with @FlaggedApi: method android.car.telemetry.CarTelemetryManager.AddMetricsConfigCallback.onAddMetricsConfigStatus(String,int)
UnflaggedApi: android.car.telemetry.CarTelemetryManager.MetricsReportCallback:
    New API must be flagged with @FlaggedApi: class android.car.telemetry.CarTelemetryManager.MetricsReportCallback
UnflaggedApi: android.car.telemetry.CarTelemetryManager.MetricsReportCallback#onResult(String, android.os.PersistableBundle, byte[], int):
    New API must be flagged with @FlaggedApi: method android.car.telemetry.CarTelemetryManager.MetricsReportCallback.onResult(String,android.os.PersistableBundle,byte[],int)
UnflaggedApi: android.car.telemetry.CarTelemetryManager.ReportReadyListener:
    New API must be flagged with @FlaggedApi: class android.car.telemetry.CarTelemetryManager.ReportReadyListener
UnflaggedApi: android.car.telemetry.CarTelemetryManager.ReportReadyListener#onReady(String):
    New API must be flagged with @FlaggedApi: method android.car.telemetry.CarTelemetryManager.ReportReadyListener.onReady(String)
UnflaggedApi: android.car.user.CarUserManager:
    New API must be flagged with @FlaggedApi: class android.car.user.CarUserManager
UnflaggedApi: android.car.user.CarUserManager#USER_LIFECYCLE_EVENT_TYPE_CREATED:
    New API must be flagged with @FlaggedApi: field android.car.user.CarUserManager.USER_LIFECYCLE_EVENT_TYPE_CREATED
UnflaggedApi: android.car.user.CarUserManager#USER_LIFECYCLE_EVENT_TYPE_INVISIBLE:
    New API must be flagged with @FlaggedApi: field android.car.user.CarUserManager.USER_LIFECYCLE_EVENT_TYPE_INVISIBLE
UnflaggedApi: android.car.user.CarUserManager#USER_LIFECYCLE_EVENT_TYPE_REMOVED:
    New API must be flagged with @FlaggedApi: field android.car.user.CarUserManager.USER_LIFECYCLE_EVENT_TYPE_REMOVED
UnflaggedApi: android.car.user.CarUserManager#USER_LIFECYCLE_EVENT_TYPE_STARTING:
    New API must be flagged with @FlaggedApi: field android.car.user.CarUserManager.USER_LIFECYCLE_EVENT_TYPE_STARTING
UnflaggedApi: android.car.user.CarUserManager#USER_LIFECYCLE_EVENT_TYPE_STOPPED:
    New API must be flagged with @FlaggedApi: field android.car.user.CarUserManager.USER_LIFECYCLE_EVENT_TYPE_STOPPED
UnflaggedApi: android.car.user.CarUserManager#USER_LIFECYCLE_EVENT_TYPE_STOPPING:
    New API must be flagged with @FlaggedApi: field android.car.user.CarUserManager.USER_LIFECYCLE_EVENT_TYPE_STOPPING
UnflaggedApi: android.car.user.CarUserManager#USER_LIFECYCLE_EVENT_TYPE_SWITCHING:
    New API must be flagged with @FlaggedApi: field android.car.user.CarUserManager.USER_LIFECYCLE_EVENT_TYPE_SWITCHING
UnflaggedApi: android.car.user.CarUserManager#USER_LIFECYCLE_EVENT_TYPE_UNLOCKED:
    New API must be flagged with @FlaggedApi: field android.car.user.CarUserManager.USER_LIFECYCLE_EVENT_TYPE_UNLOCKED
UnflaggedApi: android.car.user.CarUserManager#USER_LIFECYCLE_EVENT_TYPE_UNLOCKING:
    New API must be flagged with @FlaggedApi: field android.car.user.CarUserManager.USER_LIFECYCLE_EVENT_TYPE_UNLOCKING
UnflaggedApi: android.car.user.CarUserManager#USER_LIFECYCLE_EVENT_TYPE_VISIBLE:
    New API must be flagged with @FlaggedApi: field android.car.user.CarUserManager.USER_LIFECYCLE_EVENT_TYPE_VISIBLE
UnflaggedApi: android.car.user.CarUserManager#addListener(java.util.concurrent.Executor, android.car.user.CarUserManager.UserLifecycleListener):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.addListener(java.util.concurrent.Executor,android.car.user.CarUserManager.UserLifecycleListener)
UnflaggedApi: android.car.user.CarUserManager#addListener(java.util.concurrent.Executor, android.car.user.UserLifecycleEventFilter, android.car.user.CarUserManager.UserLifecycleListener):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.addListener(java.util.concurrent.Executor,android.car.user.UserLifecycleEventFilter,android.car.user.CarUserManager.UserLifecycleListener)
UnflaggedApi: android.car.user.CarUserManager#createUser(android.car.user.UserCreationRequest, java.util.concurrent.Executor, android.car.ResultCallback<android.car.user.UserCreationResult>):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.createUser(android.car.user.UserCreationRequest,java.util.concurrent.Executor,android.car.ResultCallback<android.car.user.UserCreationResult>)
UnflaggedApi: android.car.user.CarUserManager#isValidUser(android.os.UserHandle):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.isValidUser(android.os.UserHandle)
UnflaggedApi: android.car.user.CarUserManager#lifecycleEventTypeToString(int):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.lifecycleEventTypeToString(int)
UnflaggedApi: android.car.user.CarUserManager#removeListener(android.car.user.CarUserManager.UserLifecycleListener):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.removeListener(android.car.user.CarUserManager.UserLifecycleListener)
UnflaggedApi: android.car.user.CarUserManager#removeUser(android.car.user.UserRemovalRequest, java.util.concurrent.Executor, android.car.ResultCallback<android.car.user.UserRemovalResult>):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.removeUser(android.car.user.UserRemovalRequest,java.util.concurrent.Executor,android.car.ResultCallback<android.car.user.UserRemovalResult>)
UnflaggedApi: android.car.user.CarUserManager#setUserSwitchUiCallback(java.util.concurrent.Executor, android.car.user.CarUserManager.UserHandleSwitchUiCallback):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.setUserSwitchUiCallback(java.util.concurrent.Executor,android.car.user.CarUserManager.UserHandleSwitchUiCallback)
UnflaggedApi: android.car.user.CarUserManager#startUser(android.car.user.UserStartRequest, java.util.concurrent.Executor, android.car.ResultCallback<android.car.user.UserStartResponse>):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.startUser(android.car.user.UserStartRequest,java.util.concurrent.Executor,android.car.ResultCallback<android.car.user.UserStartResponse>)
UnflaggedApi: android.car.user.CarUserManager#stopUser(android.car.user.UserStopRequest, java.util.concurrent.Executor, android.car.ResultCallback<android.car.user.UserStopResponse>):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.stopUser(android.car.user.UserStopRequest,java.util.concurrent.Executor,android.car.ResultCallback<android.car.user.UserStopResponse>)
UnflaggedApi: android.car.user.CarUserManager#switchUser(android.car.user.UserSwitchRequest, java.util.concurrent.Executor, android.car.ResultCallback<android.car.user.UserSwitchResult>):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.switchUser(android.car.user.UserSwitchRequest,java.util.concurrent.Executor,android.car.ResultCallback<android.car.user.UserSwitchResult>)
UnflaggedApi: android.car.user.CarUserManager.UserHandleSwitchUiCallback:
    New API must be flagged with @FlaggedApi: class android.car.user.CarUserManager.UserHandleSwitchUiCallback
UnflaggedApi: android.car.user.CarUserManager.UserHandleSwitchUiCallback#onUserSwitchStart(android.os.UserHandle):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.UserHandleSwitchUiCallback.onUserSwitchStart(android.os.UserHandle)
UnflaggedApi: android.car.user.CarUserManager.UserLifecycleEvent:
    New API must be flagged with @FlaggedApi: class android.car.user.CarUserManager.UserLifecycleEvent
UnflaggedApi: android.car.user.CarUserManager.UserLifecycleEvent#getEventType():
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.UserLifecycleEvent.getEventType()
UnflaggedApi: android.car.user.CarUserManager.UserLifecycleEvent#getPreviousUserHandle():
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.UserLifecycleEvent.getPreviousUserHandle()
UnflaggedApi: android.car.user.CarUserManager.UserLifecycleEvent#getUserHandle():
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.UserLifecycleEvent.getUserHandle()
UnflaggedApi: android.car.user.CarUserManager.UserLifecycleListener:
    New API must be flagged with @FlaggedApi: class android.car.user.CarUserManager.UserLifecycleListener
UnflaggedApi: android.car.user.CarUserManager.UserLifecycleListener#onEvent(android.car.user.CarUserManager.UserLifecycleEvent):
    New API must be flagged with @FlaggedApi: method android.car.user.CarUserManager.UserLifecycleListener.onEvent(android.car.user.CarUserManager.UserLifecycleEvent)
UnflaggedApi: android.car.user.UserCreationRequest:
    New API must be flagged with @FlaggedApi: class android.car.user.UserCreationRequest
UnflaggedApi: android.car.user.UserCreationRequest#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserCreationRequest.CREATOR
UnflaggedApi: android.car.user.UserCreationRequest#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.describeContents()
UnflaggedApi: android.car.user.UserCreationRequest#getName():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.getName()
UnflaggedApi: android.car.user.UserCreationRequest#isAdmin():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.isAdmin()
UnflaggedApi: android.car.user.UserCreationRequest#isEphemeral():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.isEphemeral()
UnflaggedApi: android.car.user.UserCreationRequest#isGuest():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.isGuest()
UnflaggedApi: android.car.user.UserCreationRequest#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.user.UserCreationRequest.Builder:
    New API must be flagged with @FlaggedApi: class android.car.user.UserCreationRequest.Builder
UnflaggedApi: android.car.user.UserCreationRequest.Builder#Builder():
    New API must be flagged with @FlaggedApi: constructor android.car.user.UserCreationRequest.Builder()
UnflaggedApi: android.car.user.UserCreationRequest.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.Builder.build()
UnflaggedApi: android.car.user.UserCreationRequest.Builder#setAdmin():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.Builder.setAdmin()
UnflaggedApi: android.car.user.UserCreationRequest.Builder#setEphemeral():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.Builder.setEphemeral()
UnflaggedApi: android.car.user.UserCreationRequest.Builder#setGuest():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.Builder.setGuest()
UnflaggedApi: android.car.user.UserCreationRequest.Builder#setName(String):
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationRequest.Builder.setName(String)
UnflaggedApi: android.car.user.UserCreationResult:
    New API must be flagged with @FlaggedApi: class android.car.user.UserCreationResult
UnflaggedApi: android.car.user.UserCreationResult#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserCreationResult.CREATOR
UnflaggedApi: android.car.user.UserCreationResult#STATUS_ANDROID_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserCreationResult.STATUS_ANDROID_FAILURE
UnflaggedApi: android.car.user.UserCreationResult#STATUS_HAL_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserCreationResult.STATUS_HAL_FAILURE
UnflaggedApi: android.car.user.UserCreationResult#STATUS_HAL_INTERNAL_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserCreationResult.STATUS_HAL_INTERNAL_FAILURE
UnflaggedApi: android.car.user.UserCreationResult#STATUS_INVALID_REQUEST:
    New API must be flagged with @FlaggedApi: field android.car.user.UserCreationResult.STATUS_INVALID_REQUEST
UnflaggedApi: android.car.user.UserCreationResult#STATUS_SUCCESSFUL:
    New API must be flagged with @FlaggedApi: field android.car.user.UserCreationResult.STATUS_SUCCESSFUL
UnflaggedApi: android.car.user.UserCreationResult#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationResult.describeContents()
UnflaggedApi: android.car.user.UserCreationResult#getAndroidFailureStatus():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationResult.getAndroidFailureStatus()
UnflaggedApi: android.car.user.UserCreationResult#getErrorMessage():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationResult.getErrorMessage()
UnflaggedApi: android.car.user.UserCreationResult#getInternalErrorMessage():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationResult.getInternalErrorMessage()
UnflaggedApi: android.car.user.UserCreationResult#getStatus():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationResult.getStatus()
UnflaggedApi: android.car.user.UserCreationResult#getUser():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationResult.getUser()
UnflaggedApi: android.car.user.UserCreationResult#isSuccess():
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationResult.isSuccess()
UnflaggedApi: android.car.user.UserCreationResult#statusToString(int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationResult.statusToString(int)
UnflaggedApi: android.car.user.UserCreationResult#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserCreationResult.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.user.UserLifecycleEventFilter:
    New API must be flagged with @FlaggedApi: class android.car.user.UserLifecycleEventFilter
UnflaggedApi: android.car.user.UserLifecycleEventFilter#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserLifecycleEventFilter.CREATOR
UnflaggedApi: android.car.user.UserLifecycleEventFilter#apply(android.car.user.CarUserManager.UserLifecycleEvent):
    New API must be flagged with @FlaggedApi: method android.car.user.UserLifecycleEventFilter.apply(android.car.user.CarUserManager.UserLifecycleEvent)
UnflaggedApi: android.car.user.UserLifecycleEventFilter#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserLifecycleEventFilter.describeContents()
UnflaggedApi: android.car.user.UserLifecycleEventFilter#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserLifecycleEventFilter.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.user.UserLifecycleEventFilter.Builder:
    New API must be flagged with @FlaggedApi: class android.car.user.UserLifecycleEventFilter.Builder
UnflaggedApi: android.car.user.UserLifecycleEventFilter.Builder#Builder():
    New API must be flagged with @FlaggedApi: constructor android.car.user.UserLifecycleEventFilter.Builder()
UnflaggedApi: android.car.user.UserLifecycleEventFilter.Builder#addEventType(int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserLifecycleEventFilter.Builder.addEventType(int)
UnflaggedApi: android.car.user.UserLifecycleEventFilter.Builder#addUser(android.os.UserHandle):
    New API must be flagged with @FlaggedApi: method android.car.user.UserLifecycleEventFilter.Builder.addUser(android.os.UserHandle)
UnflaggedApi: android.car.user.UserLifecycleEventFilter.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.user.UserLifecycleEventFilter.Builder.build()
UnflaggedApi: android.car.user.UserRemovalRequest:
    New API must be flagged with @FlaggedApi: class android.car.user.UserRemovalRequest
UnflaggedApi: android.car.user.UserRemovalRequest#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserRemovalRequest.CREATOR
UnflaggedApi: android.car.user.UserRemovalRequest#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserRemovalRequest.describeContents()
UnflaggedApi: android.car.user.UserRemovalRequest#getUserHandle():
    New API must be flagged with @FlaggedApi: method android.car.user.UserRemovalRequest.getUserHandle()
UnflaggedApi: android.car.user.UserRemovalRequest#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserRemovalRequest.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.user.UserRemovalRequest.Builder:
    New API must be flagged with @FlaggedApi: class android.car.user.UserRemovalRequest.Builder
UnflaggedApi: android.car.user.UserRemovalRequest.Builder#Builder(android.os.UserHandle):
    New API must be flagged with @FlaggedApi: constructor android.car.user.UserRemovalRequest.Builder(android.os.UserHandle)
UnflaggedApi: android.car.user.UserRemovalRequest.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.user.UserRemovalRequest.Builder.build()
UnflaggedApi: android.car.user.UserRemovalResult:
    New API must be flagged with @FlaggedApi: class android.car.user.UserRemovalResult
UnflaggedApi: android.car.user.UserRemovalResult#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserRemovalResult.CREATOR
UnflaggedApi: android.car.user.UserRemovalResult#STATUS_ANDROID_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserRemovalResult.STATUS_ANDROID_FAILURE
UnflaggedApi: android.car.user.UserRemovalResult#STATUS_INVALID_REQUEST:
    New API must be flagged with @FlaggedApi: field android.car.user.UserRemovalResult.STATUS_INVALID_REQUEST
UnflaggedApi: android.car.user.UserRemovalResult#STATUS_SUCCESSFUL:
    New API must be flagged with @FlaggedApi: field android.car.user.UserRemovalResult.STATUS_SUCCESSFUL
UnflaggedApi: android.car.user.UserRemovalResult#STATUS_SUCCESSFUL_LAST_ADMIN_REMOVED:
    New API must be flagged with @FlaggedApi: field android.car.user.UserRemovalResult.STATUS_SUCCESSFUL_LAST_ADMIN_REMOVED
UnflaggedApi: android.car.user.UserRemovalResult#STATUS_SUCCESSFUL_LAST_ADMIN_SET_EPHEMERAL:
    New API must be flagged with @FlaggedApi: field android.car.user.UserRemovalResult.STATUS_SUCCESSFUL_LAST_ADMIN_SET_EPHEMERAL
UnflaggedApi: android.car.user.UserRemovalResult#STATUS_SUCCESSFUL_SET_EPHEMERAL:
    New API must be flagged with @FlaggedApi: field android.car.user.UserRemovalResult.STATUS_SUCCESSFUL_SET_EPHEMERAL
UnflaggedApi: android.car.user.UserRemovalResult#STATUS_USER_DOES_NOT_EXIST:
    New API must be flagged with @FlaggedApi: field android.car.user.UserRemovalResult.STATUS_USER_DOES_NOT_EXIST
UnflaggedApi: android.car.user.UserRemovalResult#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserRemovalResult.describeContents()
UnflaggedApi: android.car.user.UserRemovalResult#getStatus():
    New API must be flagged with @FlaggedApi: method android.car.user.UserRemovalResult.getStatus()
UnflaggedApi: android.car.user.UserRemovalResult#isSuccess():
    New API must be flagged with @FlaggedApi: method android.car.user.UserRemovalResult.isSuccess()
UnflaggedApi: android.car.user.UserRemovalResult#statusToString(int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserRemovalResult.statusToString(int)
UnflaggedApi: android.car.user.UserRemovalResult#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserRemovalResult.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.user.UserStartRequest:
    New API must be flagged with @FlaggedApi: class android.car.user.UserStartRequest
UnflaggedApi: android.car.user.UserStartRequest#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartRequest.CREATOR
UnflaggedApi: android.car.user.UserStartRequest#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartRequest.describeContents()
UnflaggedApi: android.car.user.UserStartRequest#getDisplayId():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartRequest.getDisplayId()
UnflaggedApi: android.car.user.UserStartRequest#getUserHandle():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartRequest.getUserHandle()
UnflaggedApi: android.car.user.UserStartRequest#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartRequest.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.user.UserStartRequest.Builder:
    New API must be flagged with @FlaggedApi: class android.car.user.UserStartRequest.Builder
UnflaggedApi: android.car.user.UserStartRequest.Builder#Builder(android.os.UserHandle):
    New API must be flagged with @FlaggedApi: constructor android.car.user.UserStartRequest.Builder(android.os.UserHandle)
UnflaggedApi: android.car.user.UserStartRequest.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartRequest.Builder.build()
UnflaggedApi: android.car.user.UserStartRequest.Builder#setDisplayId(int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartRequest.Builder.setDisplayId(int)
UnflaggedApi: android.car.user.UserStartResponse:
    New API must be flagged with @FlaggedApi: class android.car.user.UserStartResponse
UnflaggedApi: android.car.user.UserStartResponse#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.CREATOR
UnflaggedApi: android.car.user.UserStartResponse#STATUS_ANDROID_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.STATUS_ANDROID_FAILURE
UnflaggedApi: android.car.user.UserStartResponse#STATUS_DISPLAY_INVALID:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.STATUS_DISPLAY_INVALID
UnflaggedApi: android.car.user.UserStartResponse#STATUS_DISPLAY_UNAVAILABLE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.STATUS_DISPLAY_UNAVAILABLE
UnflaggedApi: android.car.user.UserStartResponse#STATUS_SUCCESSFUL:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.STATUS_SUCCESSFUL
UnflaggedApi: android.car.user.UserStartResponse#STATUS_SUCCESSFUL_USER_ALREADY_VISIBLE_ON_DISPLAY:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.STATUS_SUCCESSFUL_USER_ALREADY_VISIBLE_ON_DISPLAY
UnflaggedApi: android.car.user.UserStartResponse#STATUS_SUCCESSFUL_USER_IS_CURRENT_USER:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.STATUS_SUCCESSFUL_USER_IS_CURRENT_USER
UnflaggedApi: android.car.user.UserStartResponse#STATUS_UNSUPPORTED_PLATFORM_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.STATUS_UNSUPPORTED_PLATFORM_FAILURE
UnflaggedApi: android.car.user.UserStartResponse#STATUS_USER_ASSIGNED_TO_ANOTHER_DISPLAY:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.STATUS_USER_ASSIGNED_TO_ANOTHER_DISPLAY
UnflaggedApi: android.car.user.UserStartResponse#STATUS_USER_DOES_NOT_EXIST:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.STATUS_USER_DOES_NOT_EXIST
UnflaggedApi: android.car.user.UserStartResponse#STATUS_USER_INVALID:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStartResponse.STATUS_USER_INVALID
UnflaggedApi: android.car.user.UserStartResponse#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartResponse.describeContents()
UnflaggedApi: android.car.user.UserStartResponse#getStatus():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartResponse.getStatus()
UnflaggedApi: android.car.user.UserStartResponse#isSuccess():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartResponse.isSuccess()
UnflaggedApi: android.car.user.UserStartResponse#statusToString(int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartResponse.statusToString(int)
UnflaggedApi: android.car.user.UserStartResponse#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserStartResponse.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.user.UserStopRequest:
    New API must be flagged with @FlaggedApi: class android.car.user.UserStopRequest
UnflaggedApi: android.car.user.UserStopRequest#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStopRequest.CREATOR
UnflaggedApi: android.car.user.UserStopRequest#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopRequest.describeContents()
UnflaggedApi: android.car.user.UserStopRequest#getUserHandle():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopRequest.getUserHandle()
UnflaggedApi: android.car.user.UserStopRequest#isForce():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopRequest.isForce()
UnflaggedApi: android.car.user.UserStopRequest#isWithDelayedLocking():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopRequest.isWithDelayedLocking()
UnflaggedApi: android.car.user.UserStopRequest#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopRequest.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.user.UserStopRequest.Builder:
    New API must be flagged with @FlaggedApi: class android.car.user.UserStopRequest.Builder
UnflaggedApi: android.car.user.UserStopRequest.Builder#Builder(android.os.UserHandle):
    New API must be flagged with @FlaggedApi: constructor android.car.user.UserStopRequest.Builder(android.os.UserHandle)
UnflaggedApi: android.car.user.UserStopRequest.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopRequest.Builder.build()
UnflaggedApi: android.car.user.UserStopRequest.Builder#setForce():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopRequest.Builder.setForce()
UnflaggedApi: android.car.user.UserStopRequest.Builder#withDelayedLocking(boolean):
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopRequest.Builder.withDelayedLocking(boolean)
UnflaggedApi: android.car.user.UserStopResponse:
    New API must be flagged with @FlaggedApi: class android.car.user.UserStopResponse
UnflaggedApi: android.car.user.UserStopResponse#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStopResponse.CREATOR
UnflaggedApi: android.car.user.UserStopResponse#STATUS_ANDROID_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStopResponse.STATUS_ANDROID_FAILURE
UnflaggedApi: android.car.user.UserStopResponse#STATUS_FAILURE_CURRENT_USER:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStopResponse.STATUS_FAILURE_CURRENT_USER
UnflaggedApi: android.car.user.UserStopResponse#STATUS_FAILURE_SYSTEM_USER:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStopResponse.STATUS_FAILURE_SYSTEM_USER
UnflaggedApi: android.car.user.UserStopResponse#STATUS_SUCCESSFUL:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStopResponse.STATUS_SUCCESSFUL
UnflaggedApi: android.car.user.UserStopResponse#STATUS_USER_DOES_NOT_EXIST:
    New API must be flagged with @FlaggedApi: field android.car.user.UserStopResponse.STATUS_USER_DOES_NOT_EXIST
UnflaggedApi: android.car.user.UserStopResponse#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopResponse.describeContents()
UnflaggedApi: android.car.user.UserStopResponse#getStatus():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopResponse.getStatus()
UnflaggedApi: android.car.user.UserStopResponse#isSuccess():
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopResponse.isSuccess()
UnflaggedApi: android.car.user.UserStopResponse#isSuccess(int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopResponse.isSuccess(int)
UnflaggedApi: android.car.user.UserStopResponse#statusToString(int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopResponse.statusToString(int)
UnflaggedApi: android.car.user.UserStopResponse#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserStopResponse.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.user.UserSwitchRequest:
    New API must be flagged with @FlaggedApi: class android.car.user.UserSwitchRequest
UnflaggedApi: android.car.user.UserSwitchRequest#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchRequest.CREATOR
UnflaggedApi: android.car.user.UserSwitchRequest#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchRequest.describeContents()
UnflaggedApi: android.car.user.UserSwitchRequest#getUserHandle():
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchRequest.getUserHandle()
UnflaggedApi: android.car.user.UserSwitchRequest#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchRequest.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.user.UserSwitchRequest.Builder:
    New API must be flagged with @FlaggedApi: class android.car.user.UserSwitchRequest.Builder
UnflaggedApi: android.car.user.UserSwitchRequest.Builder#Builder(android.os.UserHandle):
    New API must be flagged with @FlaggedApi: constructor android.car.user.UserSwitchRequest.Builder(android.os.UserHandle)
UnflaggedApi: android.car.user.UserSwitchRequest.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchRequest.Builder.build()
UnflaggedApi: android.car.user.UserSwitchResult:
    New API must be flagged with @FlaggedApi: class android.car.user.UserSwitchResult
UnflaggedApi: android.car.user.UserSwitchResult#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.CREATOR
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_ANDROID_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_ANDROID_FAILURE
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_HAL_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_HAL_FAILURE
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_HAL_INTERNAL_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_HAL_INTERNAL_FAILURE
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_INVALID_REQUEST:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_INVALID_REQUEST
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_NOT_LOGGED_IN:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_NOT_LOGGED_IN
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_NOT_SWITCHABLE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_NOT_SWITCHABLE
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_OK_USER_ALREADY_IN_FOREGROUND:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_OK_USER_ALREADY_IN_FOREGROUND
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_SUCCESSFUL:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_SUCCESSFUL
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_TARGET_USER_ABANDONED_DUE_TO_A_NEW_REQUEST:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_TARGET_USER_ABANDONED_DUE_TO_A_NEW_REQUEST
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_TARGET_USER_ALREADY_BEING_SWITCHED_TO:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_TARGET_USER_ALREADY_BEING_SWITCHED_TO
UnflaggedApi: android.car.user.UserSwitchResult#STATUS_UX_RESTRICTION_FAILURE:
    New API must be flagged with @FlaggedApi: field android.car.user.UserSwitchResult.STATUS_UX_RESTRICTION_FAILURE
UnflaggedApi: android.car.user.UserSwitchResult#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchResult.describeContents()
UnflaggedApi: android.car.user.UserSwitchResult#getAndroidFailureStatus():
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchResult.getAndroidFailureStatus()
UnflaggedApi: android.car.user.UserSwitchResult#getErrorMessage():
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchResult.getErrorMessage()
UnflaggedApi: android.car.user.UserSwitchResult#getStatus():
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchResult.getStatus()
UnflaggedApi: android.car.user.UserSwitchResult#isSuccess():
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchResult.isSuccess()
UnflaggedApi: android.car.user.UserSwitchResult#statusToString(int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchResult.statusToString(int)
UnflaggedApi: android.car.user.UserSwitchResult#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.user.UserSwitchResult.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.view.DisplayHelper:
    New API must be flagged with @FlaggedApi: class android.car.view.DisplayHelper
UnflaggedApi: android.car.view.DisplayHelper#INVALID_PORT:
    New API must be flagged with @FlaggedApi: field android.car.view.DisplayHelper.INVALID_PORT
UnflaggedApi: android.car.view.DisplayHelper#getPhysicalPort(android.view.Display):
    New API must be flagged with @FlaggedApi: method android.car.view.DisplayHelper.getPhysicalPort(android.view.Display)
UnflaggedApi: android.car.view.DisplayHelper#getUniqueId(android.view.Display):
    New API must be flagged with @FlaggedApi: method android.car.view.DisplayHelper.getUniqueId(android.view.Display)
UnflaggedApi: android.car.view.MirroredSurfaceView:
    New API must be flagged with @FlaggedApi: class android.car.view.MirroredSurfaceView
UnflaggedApi: android.car.view.MirroredSurfaceView#MirroredSurfaceView(android.content.Context):
    New API must be flagged with @FlaggedApi: constructor android.car.view.MirroredSurfaceView(android.content.Context)
UnflaggedApi: android.car.view.MirroredSurfaceView#MirroredSurfaceView(android.content.Context, android.util.AttributeSet):
    New API must be flagged with @FlaggedApi: constructor android.car.view.MirroredSurfaceView(android.content.Context,android.util.AttributeSet)
UnflaggedApi: android.car.view.MirroredSurfaceView#MirroredSurfaceView(android.content.Context, android.util.AttributeSet, int):
    New API must be flagged with @FlaggedApi: constructor android.car.view.MirroredSurfaceView(android.content.Context,android.util.AttributeSet,int)
UnflaggedApi: android.car.view.MirroredSurfaceView#MirroredSurfaceView(android.content.Context, android.util.AttributeSet, int, int):
    New API must be flagged with @FlaggedApi: constructor android.car.view.MirroredSurfaceView(android.content.Context,android.util.AttributeSet,int,int)
UnflaggedApi: android.car.view.MirroredSurfaceView#mirrorSurface(android.os.IBinder):
    New API must be flagged with @FlaggedApi: method android.car.view.MirroredSurfaceView.mirrorSurface(android.os.IBinder)
UnflaggedApi: android.car.view.MirroredSurfaceView#release():
    New API must be flagged with @FlaggedApi: method android.car.view.MirroredSurfaceView.release()
UnflaggedApi: android.car.view.MirroredSurfaceView#setObscuredTouchRegion(android.graphics.Region):
    New API must be flagged with @FlaggedApi: method android.car.view.MirroredSurfaceView.setObscuredTouchRegion(android.graphics.Region)
UnflaggedApi: android.car.view.WindowManagerHelper:
    New API must be flagged with @FlaggedApi: class android.car.view.WindowManagerHelper
UnflaggedApi: android.car.view.WindowManagerHelper#setInputFeatureSpy(android.view.WindowManager.LayoutParams):
    New API must be flagged with @FlaggedApi: method android.car.view.WindowManagerHelper.setInputFeatureSpy(android.view.WindowManager.LayoutParams)
UnflaggedApi: android.car.view.WindowManagerHelper#setTrustedOverlay(android.view.WindowManager.LayoutParams):
    New API must be flagged with @FlaggedApi: method android.car.view.WindowManagerHelper.setTrustedOverlay(android.view.WindowManager.LayoutParams)
UnflaggedApi: android.car.vms.VmsAssociatedLayer:
    New API must be flagged with @FlaggedApi: class android.car.vms.VmsAssociatedLayer
UnflaggedApi: android.car.vms.VmsAssociatedLayer#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.vms.VmsAssociatedLayer.CREATOR
UnflaggedApi: android.car.vms.VmsAssociatedLayer#VmsAssociatedLayer(android.car.vms.VmsLayer, java.util.Set<java.lang.Integer>):
    New API must be flagged with @FlaggedApi: constructor android.car.vms.VmsAssociatedLayer(android.car.vms.VmsLayer,java.util.Set<java.lang.Integer>)
UnflaggedApi: android.car.vms.VmsAssociatedLayer#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsAssociatedLayer.describeContents()
UnflaggedApi: android.car.vms.VmsAssociatedLayer#getProviderIds():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsAssociatedLayer.getProviderIds()
UnflaggedApi: android.car.vms.VmsAssociatedLayer#getVmsLayer():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsAssociatedLayer.getVmsLayer()
UnflaggedApi: android.car.vms.VmsAssociatedLayer#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsAssociatedLayer.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.vms.VmsAvailableLayers:
    New API must be flagged with @FlaggedApi: class android.car.vms.VmsAvailableLayers
UnflaggedApi: android.car.vms.VmsAvailableLayers#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.vms.VmsAvailableLayers.CREATOR
UnflaggedApi: android.car.vms.VmsAvailableLayers#VmsAvailableLayers(int, java.util.Set<android.car.vms.VmsAssociatedLayer>):
    New API must be flagged with @FlaggedApi: constructor android.car.vms.VmsAvailableLayers(int,java.util.Set<android.car.vms.VmsAssociatedLayer>)
UnflaggedApi: android.car.vms.VmsAvailableLayers#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsAvailableLayers.describeContents()
UnflaggedApi: android.car.vms.VmsAvailableLayers#getAssociatedLayers():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsAvailableLayers.getAssociatedLayers()
UnflaggedApi: android.car.vms.VmsAvailableLayers#getSequenceNumber():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsAvailableLayers.getSequenceNumber()
UnflaggedApi: android.car.vms.VmsAvailableLayers#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsAvailableLayers.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.vms.VmsClient:
    New API must be flagged with @FlaggedApi: class android.car.vms.VmsClient
UnflaggedApi: android.car.vms.VmsClient#getAvailableLayers():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClient.getAvailableLayers()
UnflaggedApi: android.car.vms.VmsClient#getProviderDescription(int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClient.getProviderDescription(int)
UnflaggedApi: android.car.vms.VmsClient#getSubscriptionState():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClient.getSubscriptionState()
UnflaggedApi: android.car.vms.VmsClient#isMonitoringEnabled():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClient.isMonitoringEnabled()
UnflaggedApi: android.car.vms.VmsClient#publishPacket(int, android.car.vms.VmsLayer, byte[]):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClient.publishPacket(int,android.car.vms.VmsLayer,byte[])
UnflaggedApi: android.car.vms.VmsClient#registerProvider(byte[]):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClient.registerProvider(byte[])
UnflaggedApi: android.car.vms.VmsClient#setMonitoringEnabled(boolean):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClient.setMonitoringEnabled(boolean)
UnflaggedApi: android.car.vms.VmsClient#setProviderOfferings(int, java.util.Set<android.car.vms.VmsLayerDependency>):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClient.setProviderOfferings(int,java.util.Set<android.car.vms.VmsLayerDependency>)
UnflaggedApi: android.car.vms.VmsClient#setSubscriptions(java.util.Set<android.car.vms.VmsAssociatedLayer>):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClient.setSubscriptions(java.util.Set<android.car.vms.VmsAssociatedLayer>)
UnflaggedApi: android.car.vms.VmsClient#unregisterProvider(int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClient.unregisterProvider(int)
UnflaggedApi: android.car.vms.VmsClientManager:
    New API must be flagged with @FlaggedApi: class android.car.vms.VmsClientManager
UnflaggedApi: android.car.vms.VmsClientManager#registerVmsClientCallback(java.util.concurrent.Executor, android.car.vms.VmsClientManager.VmsClientCallback):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClientManager.registerVmsClientCallback(java.util.concurrent.Executor,android.car.vms.VmsClientManager.VmsClientCallback)
UnflaggedApi: android.car.vms.VmsClientManager#unregisterVmsClientCallback(android.car.vms.VmsClientManager.VmsClientCallback):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClientManager.unregisterVmsClientCallback(android.car.vms.VmsClientManager.VmsClientCallback)
UnflaggedApi: android.car.vms.VmsClientManager.VmsClientCallback:
    New API must be flagged with @FlaggedApi: class android.car.vms.VmsClientManager.VmsClientCallback
UnflaggedApi: android.car.vms.VmsClientManager.VmsClientCallback#onClientConnected(android.car.vms.VmsClient):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClientManager.VmsClientCallback.onClientConnected(android.car.vms.VmsClient)
UnflaggedApi: android.car.vms.VmsClientManager.VmsClientCallback#onLayerAvailabilityChanged(android.car.vms.VmsAvailableLayers):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClientManager.VmsClientCallback.onLayerAvailabilityChanged(android.car.vms.VmsAvailableLayers)
UnflaggedApi: android.car.vms.VmsClientManager.VmsClientCallback#onPacketReceived(int, android.car.vms.VmsLayer, byte[]):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClientManager.VmsClientCallback.onPacketReceived(int,android.car.vms.VmsLayer,byte[])
UnflaggedApi: android.car.vms.VmsClientManager.VmsClientCallback#onSubscriptionStateChanged(android.car.vms.VmsSubscriptionState):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsClientManager.VmsClientCallback.onSubscriptionStateChanged(android.car.vms.VmsSubscriptionState)
UnflaggedApi: android.car.vms.VmsLayer:
    New API must be flagged with @FlaggedApi: class android.car.vms.VmsLayer
UnflaggedApi: android.car.vms.VmsLayer#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.vms.VmsLayer.CREATOR
UnflaggedApi: android.car.vms.VmsLayer#VmsLayer(int, int, int):
    New API must be flagged with @FlaggedApi: constructor android.car.vms.VmsLayer(int,int,int)
UnflaggedApi: android.car.vms.VmsLayer#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayer.describeContents()
UnflaggedApi: android.car.vms.VmsLayer#getChannel():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayer.getChannel()
UnflaggedApi: android.car.vms.VmsLayer#getType():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayer.getType()
UnflaggedApi: android.car.vms.VmsLayer#getVersion():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayer.getVersion()
UnflaggedApi: android.car.vms.VmsLayer#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayer.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.vms.VmsLayerDependency:
    New API must be flagged with @FlaggedApi: class android.car.vms.VmsLayerDependency
UnflaggedApi: android.car.vms.VmsLayerDependency#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.vms.VmsLayerDependency.CREATOR
UnflaggedApi: android.car.vms.VmsLayerDependency#VmsLayerDependency(android.car.vms.VmsLayer):
    New API must be flagged with @FlaggedApi: constructor android.car.vms.VmsLayerDependency(android.car.vms.VmsLayer)
UnflaggedApi: android.car.vms.VmsLayerDependency#VmsLayerDependency(android.car.vms.VmsLayer, java.util.Set<android.car.vms.VmsLayer>):
    New API must be flagged with @FlaggedApi: constructor android.car.vms.VmsLayerDependency(android.car.vms.VmsLayer,java.util.Set<android.car.vms.VmsLayer>)
UnflaggedApi: android.car.vms.VmsLayerDependency#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayerDependency.describeContents()
UnflaggedApi: android.car.vms.VmsLayerDependency#getDependencies():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayerDependency.getDependencies()
UnflaggedApi: android.car.vms.VmsLayerDependency#getLayer():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayerDependency.getLayer()
UnflaggedApi: android.car.vms.VmsLayerDependency#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayerDependency.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.vms.VmsLayersOffering#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.vms.VmsLayersOffering.CREATOR
UnflaggedApi: android.car.vms.VmsLayersOffering#VmsLayersOffering(java.util.Set<android.car.vms.VmsLayerDependency>, int):
    New API must be flagged with @FlaggedApi: constructor android.car.vms.VmsLayersOffering(java.util.Set<android.car.vms.VmsLayerDependency>,int)
UnflaggedApi: android.car.vms.VmsLayersOffering#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayersOffering.describeContents()
UnflaggedApi: android.car.vms.VmsLayersOffering#getDependencies():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayersOffering.getDependencies()
UnflaggedApi: android.car.vms.VmsLayersOffering#getPublisherId():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayersOffering.getPublisherId()
UnflaggedApi: android.car.vms.VmsLayersOffering#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsLayersOffering.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.vms.VmsOperationRecorder#addHalSubscription(int, android.car.vms.VmsLayer):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.addHalSubscription(int,android.car.vms.VmsLayer)
UnflaggedApi: android.car.vms.VmsOperationRecorder#addPromiscuousSubscription(int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.addPromiscuousSubscription(int)
UnflaggedApi: android.car.vms.VmsOperationRecorder#addSubscription(int, android.car.vms.VmsLayer):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.addSubscription(int,android.car.vms.VmsLayer)
UnflaggedApi: android.car.vms.VmsOperationRecorder#get():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.get()
UnflaggedApi: android.car.vms.VmsOperationRecorder#getPublisherId(int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.getPublisherId(int)
UnflaggedApi: android.car.vms.VmsOperationRecorder#removeHalSubscription(int, android.car.vms.VmsLayer):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.removeHalSubscription(int,android.car.vms.VmsLayer)
UnflaggedApi: android.car.vms.VmsOperationRecorder#removePromiscuousSubscription(int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.removePromiscuousSubscription(int)
UnflaggedApi: android.car.vms.VmsOperationRecorder#removeSubscription(int, android.car.vms.VmsLayer):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.removeSubscription(int,android.car.vms.VmsLayer)
UnflaggedApi: android.car.vms.VmsOperationRecorder#setHalPublisherLayersOffering(android.car.vms.VmsLayersOffering):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.setHalPublisherLayersOffering(android.car.vms.VmsLayersOffering)
UnflaggedApi: android.car.vms.VmsOperationRecorder#setLayersOffering(android.car.vms.VmsLayersOffering):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.setLayersOffering(android.car.vms.VmsLayersOffering)
UnflaggedApi: android.car.vms.VmsOperationRecorder#setPublisherLayersOffering(android.car.vms.VmsLayersOffering):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.setPublisherLayersOffering(android.car.vms.VmsLayersOffering)
UnflaggedApi: android.car.vms.VmsOperationRecorder#startMonitoring():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.startMonitoring()
UnflaggedApi: android.car.vms.VmsOperationRecorder#stopMonitoring():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.stopMonitoring()
UnflaggedApi: android.car.vms.VmsOperationRecorder#subscribe(android.car.vms.VmsLayer):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.subscribe(android.car.vms.VmsLayer)
UnflaggedApi: android.car.vms.VmsOperationRecorder#subscribe(android.car.vms.VmsLayer, int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.subscribe(android.car.vms.VmsLayer,int)
UnflaggedApi: android.car.vms.VmsOperationRecorder#unsubscribe(android.car.vms.VmsLayer):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.unsubscribe(android.car.vms.VmsLayer)
UnflaggedApi: android.car.vms.VmsOperationRecorder#unsubscribe(android.car.vms.VmsLayer, int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsOperationRecorder.unsubscribe(android.car.vms.VmsLayer,int)
UnflaggedApi: android.car.vms.VmsPublisherClientService#VmsPublisherClientService():
    New API must be flagged with @FlaggedApi: constructor android.car.vms.VmsPublisherClientService()
UnflaggedApi: android.car.vms.VmsPublisherClientService#getPublisherId(byte[]):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsPublisherClientService.getPublisherId(byte[])
UnflaggedApi: android.car.vms.VmsPublisherClientService#getSubscriptions():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsPublisherClientService.getSubscriptions()
UnflaggedApi: android.car.vms.VmsPublisherClientService#onBind(android.content.Intent):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsPublisherClientService.onBind(android.content.Intent)
UnflaggedApi: android.car.vms.VmsPublisherClientService#onVmsPublisherServiceReady():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsPublisherClientService.onVmsPublisherServiceReady()
UnflaggedApi: android.car.vms.VmsPublisherClientService#onVmsSubscriptionChange(android.car.vms.VmsSubscriptionState):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsPublisherClientService.onVmsSubscriptionChange(android.car.vms.VmsSubscriptionState)
UnflaggedApi: android.car.vms.VmsPublisherClientService#publish(android.car.vms.VmsLayer, int, byte[]):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsPublisherClientService.publish(android.car.vms.VmsLayer,int,byte[])
UnflaggedApi: android.car.vms.VmsPublisherClientService#setLayersOffering(android.car.vms.VmsLayersOffering):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsPublisherClientService.setLayersOffering(android.car.vms.VmsLayersOffering)
UnflaggedApi: android.car.vms.VmsSubscriberManager#clearVmsSubscriberClientCallback():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.clearVmsSubscriberClientCallback()
UnflaggedApi: android.car.vms.VmsSubscriberManager#getAvailableLayers():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.getAvailableLayers()
UnflaggedApi: android.car.vms.VmsSubscriberManager#getPublisherInfo(int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.getPublisherInfo(int)
UnflaggedApi: android.car.vms.VmsSubscriberManager#setVmsSubscriberClientCallback(java.util.concurrent.Executor, android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.setVmsSubscriberClientCallback(java.util.concurrent.Executor,android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback)
UnflaggedApi: android.car.vms.VmsSubscriberManager#startMonitoring():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.startMonitoring()
UnflaggedApi: android.car.vms.VmsSubscriberManager#stopMonitoring():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.stopMonitoring()
UnflaggedApi: android.car.vms.VmsSubscriberManager#subscribe(android.car.vms.VmsLayer):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.subscribe(android.car.vms.VmsLayer)
UnflaggedApi: android.car.vms.VmsSubscriberManager#subscribe(android.car.vms.VmsLayer, int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.subscribe(android.car.vms.VmsLayer,int)
UnflaggedApi: android.car.vms.VmsSubscriberManager#unsubscribe(android.car.vms.VmsLayer):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.unsubscribe(android.car.vms.VmsLayer)
UnflaggedApi: android.car.vms.VmsSubscriberManager#unsubscribe(android.car.vms.VmsLayer, int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.unsubscribe(android.car.vms.VmsLayer,int)
UnflaggedApi: android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback:
    New API must be flagged with @FlaggedApi: class android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback
UnflaggedApi: android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback#onLayersAvailabilityChanged(android.car.vms.VmsAvailableLayers):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback.onLayersAvailabilityChanged(android.car.vms.VmsAvailableLayers)
UnflaggedApi: android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback#onVmsMessageReceived(android.car.vms.VmsLayer, byte[]):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback.onVmsMessageReceived(android.car.vms.VmsLayer,byte[])
UnflaggedApi: android.car.vms.VmsSubscriptionState:
    New API must be flagged with @FlaggedApi: class android.car.vms.VmsSubscriptionState
UnflaggedApi: android.car.vms.VmsSubscriptionState#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.vms.VmsSubscriptionState.CREATOR
UnflaggedApi: android.car.vms.VmsSubscriptionState#VmsSubscriptionState(int, java.util.Set<android.car.vms.VmsLayer>, java.util.Set<android.car.vms.VmsAssociatedLayer>):
    New API must be flagged with @FlaggedApi: constructor android.car.vms.VmsSubscriptionState(int,java.util.Set<android.car.vms.VmsLayer>,java.util.Set<android.car.vms.VmsAssociatedLayer>)
UnflaggedApi: android.car.vms.VmsSubscriptionState#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriptionState.describeContents()
UnflaggedApi: android.car.vms.VmsSubscriptionState#getAssociatedLayers():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriptionState.getAssociatedLayers()
UnflaggedApi: android.car.vms.VmsSubscriptionState#getLayers():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriptionState.getLayers()
UnflaggedApi: android.car.vms.VmsSubscriptionState#getSequenceNumber():
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriptionState.getSequenceNumber()
UnflaggedApi: android.car.vms.VmsSubscriptionState#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.vms.VmsSubscriptionState.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#FLAG_MINIMUM_STATS_IO_100_MB:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.CarWatchdogManager.FLAG_MINIMUM_STATS_IO_100_MB
UnflaggedApi: android.car.watchdog.CarWatchdogManager#FLAG_MINIMUM_STATS_IO_1_GB:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.CarWatchdogManager.FLAG_MINIMUM_STATS_IO_1_GB
UnflaggedApi: android.car.watchdog.CarWatchdogManager#FLAG_MINIMUM_STATS_IO_1_MB:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.CarWatchdogManager.FLAG_MINIMUM_STATS_IO_1_MB
UnflaggedApi: android.car.watchdog.CarWatchdogManager#RETURN_CODE_ERROR:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.CarWatchdogManager.RETURN_CODE_ERROR
UnflaggedApi: android.car.watchdog.CarWatchdogManager#RETURN_CODE_SUCCESS:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.CarWatchdogManager.RETURN_CODE_SUCCESS
UnflaggedApi: android.car.watchdog.CarWatchdogManager#TIMEOUT_CRITICAL:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.CarWatchdogManager.TIMEOUT_CRITICAL
UnflaggedApi: android.car.watchdog.CarWatchdogManager#TIMEOUT_MODERATE:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.CarWatchdogManager.TIMEOUT_MODERATE
UnflaggedApi: android.car.watchdog.CarWatchdogManager#TIMEOUT_NORMAL:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.CarWatchdogManager.TIMEOUT_NORMAL
UnflaggedApi: android.car.watchdog.CarWatchdogManager#addResourceOveruseListenerForSystem(java.util.concurrent.Executor, int, android.car.watchdog.CarWatchdogManager.ResourceOveruseListener):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.addResourceOveruseListenerForSystem(java.util.concurrent.Executor,int,android.car.watchdog.CarWatchdogManager.ResourceOveruseListener)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#getAllResourceOveruseStats(int, int, int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.getAllResourceOveruseStats(int,int,int)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#getPackageKillableStatesAsUser(android.os.UserHandle):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.getPackageKillableStatesAsUser(android.os.UserHandle)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#getResourceOveruseConfigurations(int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.getResourceOveruseConfigurations(int)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#getResourceOveruseStatsForUserPackage(String, android.os.UserHandle, int, int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.getResourceOveruseStatsForUserPackage(String,android.os.UserHandle,int,int)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#registerClient(java.util.concurrent.Executor, android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback, int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.registerClient(java.util.concurrent.Executor,android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback,int)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#removeResourceOveruseListenerForSystem(android.car.watchdog.CarWatchdogManager.ResourceOveruseListener):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.removeResourceOveruseListenerForSystem(android.car.watchdog.CarWatchdogManager.ResourceOveruseListener)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#setKillablePackageAsUser(String, android.os.UserHandle, boolean):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.setKillablePackageAsUser(String,android.os.UserHandle,boolean)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#setResourceOveruseConfigurations(java.util.List<android.car.watchdog.ResourceOveruseConfiguration>, int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.setResourceOveruseConfigurations(java.util.List<android.car.watchdog.ResourceOveruseConfiguration>,int)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#tellClientAlive(android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback, int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.tellClientAlive(android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback,int)
UnflaggedApi: android.car.watchdog.CarWatchdogManager#unregisterClient(android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.unregisterClient(android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback)
UnflaggedApi: android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback:
    New API must be flagged with @FlaggedApi: class android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback
UnflaggedApi: android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback#CarWatchdogClientCallback():
    New API must be flagged with @FlaggedApi: constructor android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback()
UnflaggedApi: android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback#onCheckHealthStatus(int, int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback.onCheckHealthStatus(int,int)
UnflaggedApi: android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback#onPrepareProcessTermination():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback.onPrepareProcessTermination()
UnflaggedApi: android.car.watchdog.IoOveruseAlertThreshold:
    New API must be flagged with @FlaggedApi: class android.car.watchdog.IoOveruseAlertThreshold
UnflaggedApi: android.car.watchdog.IoOveruseAlertThreshold#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.IoOveruseAlertThreshold.CREATOR
UnflaggedApi: android.car.watchdog.IoOveruseAlertThreshold#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseAlertThreshold.describeContents()
UnflaggedApi: android.car.watchdog.IoOveruseAlertThreshold#getDurationInSeconds():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseAlertThreshold.getDurationInSeconds()
UnflaggedApi: android.car.watchdog.IoOveruseAlertThreshold#getWrittenBytesPerSecond():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseAlertThreshold.getWrittenBytesPerSecond()
UnflaggedApi: android.car.watchdog.IoOveruseAlertThreshold#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseAlertThreshold.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration:
    New API must be flagged with @FlaggedApi: class android.car.watchdog.IoOveruseConfiguration
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.IoOveruseConfiguration.CREATOR
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.describeContents()
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration#getAppCategorySpecificThresholds():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.getAppCategorySpecificThresholds()
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration#getComponentLevelThresholds():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.getComponentLevelThresholds()
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration#getPackageSpecificThresholds():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.getPackageSpecificThresholds()
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration#getSystemWideThresholds():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.getSystemWideThresholds()
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration.Builder:
    New API must be flagged with @FlaggedApi: class android.car.watchdog.IoOveruseConfiguration.Builder
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration.Builder#Builder(android.car.watchdog.PerStateBytes, java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>, java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>, java.util.List<android.car.watchdog.IoOveruseAlertThreshold>):
    New API must be flagged with @FlaggedApi: constructor android.car.watchdog.IoOveruseConfiguration.Builder(android.car.watchdog.PerStateBytes,java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>,java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>,java.util.List<android.car.watchdog.IoOveruseAlertThreshold>)
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration.Builder#addAppCategorySpecificThresholds(String, android.car.watchdog.PerStateBytes):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.Builder.addAppCategorySpecificThresholds(String,android.car.watchdog.PerStateBytes)
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration.Builder#addPackageSpecificThresholds(String, android.car.watchdog.PerStateBytes):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.Builder.addPackageSpecificThresholds(String,android.car.watchdog.PerStateBytes)
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration.Builder#addSystemWideThresholds(android.car.watchdog.IoOveruseAlertThreshold):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.Builder.addSystemWideThresholds(android.car.watchdog.IoOveruseAlertThreshold)
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.Builder.build()
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration.Builder#setAppCategorySpecificThresholds(java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.Builder.setAppCategorySpecificThresholds(java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>)
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration.Builder#setComponentLevelThresholds(android.car.watchdog.PerStateBytes):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.Builder.setComponentLevelThresholds(android.car.watchdog.PerStateBytes)
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration.Builder#setPackageSpecificThresholds(java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.Builder.setPackageSpecificThresholds(java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>)
UnflaggedApi: android.car.watchdog.IoOveruseConfiguration.Builder#setSystemWideThresholds(java.util.List<android.car.watchdog.IoOveruseAlertThreshold>):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.IoOveruseConfiguration.Builder.setSystemWideThresholds(java.util.List<android.car.watchdog.IoOveruseAlertThreshold>)
UnflaggedApi: android.car.watchdog.PackageKillableState:
    New API must be flagged with @FlaggedApi: class android.car.watchdog.PackageKillableState
UnflaggedApi: android.car.watchdog.PackageKillableState#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.PackageKillableState.CREATOR
UnflaggedApi: android.car.watchdog.PackageKillableState#KILLABLE_STATE_NEVER:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.PackageKillableState.KILLABLE_STATE_NEVER
UnflaggedApi: android.car.watchdog.PackageKillableState#KILLABLE_STATE_NO:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.PackageKillableState.KILLABLE_STATE_NO
UnflaggedApi: android.car.watchdog.PackageKillableState#KILLABLE_STATE_YES:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.PackageKillableState.KILLABLE_STATE_YES
UnflaggedApi: android.car.watchdog.PackageKillableState#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.PackageKillableState.describeContents()
UnflaggedApi: android.car.watchdog.PackageKillableState#getKillableState():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.PackageKillableState.getKillableState()
UnflaggedApi: android.car.watchdog.PackageKillableState#getPackageName():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.PackageKillableState.getPackageName()
UnflaggedApi: android.car.watchdog.PackageKillableState#getUserId():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.PackageKillableState.getUserId()
UnflaggedApi: android.car.watchdog.PackageKillableState#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.PackageKillableState.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration:
    New API must be flagged with @FlaggedApi: class android.car.watchdog.ResourceOveruseConfiguration
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#APPLICATION_CATEGORY_TYPE_MAPS:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.ResourceOveruseConfiguration.APPLICATION_CATEGORY_TYPE_MAPS
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#APPLICATION_CATEGORY_TYPE_MEDIA:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.ResourceOveruseConfiguration.APPLICATION_CATEGORY_TYPE_MEDIA
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#COMPONENT_TYPE_SYSTEM:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.ResourceOveruseConfiguration.COMPONENT_TYPE_SYSTEM
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#COMPONENT_TYPE_THIRD_PARTY:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.ResourceOveruseConfiguration.COMPONENT_TYPE_THIRD_PARTY
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#COMPONENT_TYPE_VENDOR:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.ResourceOveruseConfiguration.COMPONENT_TYPE_VENDOR
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#CREATOR:
    New API must be flagged with @FlaggedApi: field android.car.watchdog.ResourceOveruseConfiguration.CREATOR
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#describeContents():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.describeContents()
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#getComponentType():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.getComponentType()
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#getIoOveruseConfiguration():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.getIoOveruseConfiguration()
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#getPackagesToAppCategoryTypes():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.getPackagesToAppCategoryTypes()
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#getSafeToKillPackages():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.getSafeToKillPackages()
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#getVendorPackagePrefixes():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.getVendorPackagePrefixes()
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration#writeToParcel(android.os.Parcel, int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.writeToParcel(android.os.Parcel,int)
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder:
    New API must be flagged with @FlaggedApi: class android.car.watchdog.ResourceOveruseConfiguration.Builder
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder#Builder(int, java.util.List<java.lang.String>, java.util.List<java.lang.String>, java.util.Map<java.lang.String,java.lang.String>):
    New API must be flagged with @FlaggedApi: constructor android.car.watchdog.ResourceOveruseConfiguration.Builder(int,java.util.List<java.lang.String>,java.util.List<java.lang.String>,java.util.Map<java.lang.String,java.lang.String>)
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder#addPackagesToAppCategoryTypes(String, String):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.Builder.addPackagesToAppCategoryTypes(String,String)
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder#addSafeToKillPackages(String):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.Builder.addSafeToKillPackages(String)
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder#addVendorPackagePrefixes(String):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.Builder.addVendorPackagePrefixes(String)
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder#build():
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.Builder.build()
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder#setComponentType(int):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.Builder.setComponentType(int)
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder#setIoOveruseConfiguration(android.car.watchdog.IoOveruseConfiguration):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.Builder.setIoOveruseConfiguration(android.car.watchdog.IoOveruseConfiguration)
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder#setPackagesToAppCategoryTypes(java.util.Map<java.lang.String,java.lang.String>):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.Builder.setPackagesToAppCategoryTypes(java.util.Map<java.lang.String,java.lang.String>)
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder#setSafeToKillPackages(java.util.List<java.lang.String>):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.Builder.setSafeToKillPackages(java.util.List<java.lang.String>)
UnflaggedApi: android.car.watchdog.ResourceOveruseConfiguration.Builder#setVendorPackagePrefixes(java.util.List<java.lang.String>):
    New API must be flagged with @FlaggedApi: method android.car.watchdog.ResourceOveruseConfiguration.Builder.setVendorPackagePrefixes(java.util.List<java.lang.String>)


UseParcelFileDescriptor: android.car.oem.OemCarServiceComponent#dump(java.io.FileDescriptor, java.io.PrintWriter, String[]) parameter #0:
    Must use ParcelFileDescriptor instead of FileDescriptor in parameter fd in android.car.oem.OemCarServiceComponent.dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, String[] args)


UserHandle: android.car.CarOccupantZoneManager#assignVisibleUserToOccupantZone(android.car.CarOccupantZoneManager.OccupantZoneInfo, android.os.UserHandle):
    When a method overload is needed to target a specific UserHandle, callers should be directed to use Context.createPackageContextAsUser() and re-obtain the relevant Manager, and no new API should be added
UserHandle: android.car.admin.CarDevicePolicyManager#removeUser(android.os.UserHandle):
    When a method overload is needed to target a specific UserHandle, callers should be directed to use Context.createPackageContextAsUser() and re-obtain the relevant Manager, and no new API should be added
UserHandle: android.car.watchdog.CarWatchdogManager#getPackageKillableStatesAsUser(android.os.UserHandle):
    When a method overload is needed to target a specific UserHandle, callers should be directed to use Context.createPackageContextAsUser() and re-obtain the relevant Manager, and no new API should be added
UserHandle: android.car.watchdog.CarWatchdogManager#getResourceOveruseStatsForUserPackage(String, android.os.UserHandle, int, int):
    When a method overload is needed to target a specific UserHandle, callers should be directed to use Context.createPackageContextAsUser() and re-obtain the relevant Manager, and no new API should be added
UserHandle: android.car.watchdog.CarWatchdogManager#setKillablePackageAsUser(String, android.os.UserHandle, boolean):
    When a method overload is needed to target a specific UserHandle, callers should be directed to use Context.createPackageContextAsUser() and re-obtain the relevant Manager, and no new API should be added


UserHandleName: android.car.projection.ProjectionOptions:
    Classes holding a set of parameters should be called `FooParams`, was `ProjectionOptions`
UserHandleName: android.car.user.UserLifecycleEventFilter.Builder#addUser(android.os.UserHandle):
    Method taking UserHandle should be named `doFooAsUser` or `queryFooForUser`, was `addUser`


VisiblySynchronized: android.car.drivingstate.CarDrivingStateManager#registerListener(android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener):
    Internal locks must not be exposed: method android.car.drivingstate.CarDrivingStateManager.registerListener(android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener)
VisiblySynchronized: android.car.drivingstate.CarDrivingStateManager#unregisterListener():
    Internal locks must not be exposed: method android.car.drivingstate.CarDrivingStateManager.unregisterListener()
VisiblySynchronized: android.car.hardware.cabin.CarCabinManager#registerCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback):
    Internal locks must not be exposed: method android.car.hardware.cabin.CarCabinManager.registerCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback)
VisiblySynchronized: android.car.hardware.cabin.CarCabinManager#unregisterCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback):
    Internal locks must not be exposed: method android.car.hardware.cabin.CarCabinManager.unregisterCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback)
VisiblySynchronized: android.car.hardware.hvac.CarHvacManager#registerCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback):
    Internal locks must not be exposed: method android.car.hardware.hvac.CarHvacManager.registerCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback)
VisiblySynchronized: android.car.hardware.hvac.CarHvacManager#unregisterCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback):
    Internal locks must not be exposed: method android.car.hardware.hvac.CarHvacManager.unregisterCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback)
